// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/contrib/schemast/internal/mutatetest/ent/predicate"
	"entgo.io/contrib/schemast/internal/mutatetest/ent/withfields"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WithFieldsUpdate is the builder for updating WithFields entities.
type WithFieldsUpdate struct {
	config
	hooks    []Hook
	mutation *WithFieldsMutation
}

// Where appends a list predicates to the WithFieldsUpdate builder.
func (wfu *WithFieldsUpdate) Where(ps ...predicate.WithFields) *WithFieldsUpdate {
	wfu.mutation.Where(ps...)
	return wfu
}

// SetExisting sets the "existing" field.
func (wfu *WithFieldsUpdate) SetExisting(s string) *WithFieldsUpdate {
	wfu.mutation.SetExisting(s)
	return wfu
}

// SetNillableExisting sets the "existing" field if the given value is not nil.
func (wfu *WithFieldsUpdate) SetNillableExisting(s *string) *WithFieldsUpdate {
	if s != nil {
		wfu.SetExisting(*s)
	}
	return wfu
}

// Mutation returns the WithFieldsMutation object of the builder.
func (wfu *WithFieldsUpdate) Mutation() *WithFieldsMutation {
	return wfu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wfu *WithFieldsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, wfu.sqlSave, wfu.mutation, wfu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wfu *WithFieldsUpdate) SaveX(ctx context.Context) int {
	affected, err := wfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wfu *WithFieldsUpdate) Exec(ctx context.Context) error {
	_, err := wfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wfu *WithFieldsUpdate) ExecX(ctx context.Context) {
	if err := wfu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wfu *WithFieldsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(withfields.Table, withfields.Columns, sqlgraph.NewFieldSpec(withfields.FieldID, field.TypeInt))
	if ps := wfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wfu.mutation.Existing(); ok {
		_spec.SetField(withfields.FieldExisting, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{withfields.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wfu.mutation.done = true
	return n, nil
}

// WithFieldsUpdateOne is the builder for updating a single WithFields entity.
type WithFieldsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WithFieldsMutation
}

// SetExisting sets the "existing" field.
func (wfuo *WithFieldsUpdateOne) SetExisting(s string) *WithFieldsUpdateOne {
	wfuo.mutation.SetExisting(s)
	return wfuo
}

// SetNillableExisting sets the "existing" field if the given value is not nil.
func (wfuo *WithFieldsUpdateOne) SetNillableExisting(s *string) *WithFieldsUpdateOne {
	if s != nil {
		wfuo.SetExisting(*s)
	}
	return wfuo
}

// Mutation returns the WithFieldsMutation object of the builder.
func (wfuo *WithFieldsUpdateOne) Mutation() *WithFieldsMutation {
	return wfuo.mutation
}

// Where appends a list predicates to the WithFieldsUpdate builder.
func (wfuo *WithFieldsUpdateOne) Where(ps ...predicate.WithFields) *WithFieldsUpdateOne {
	wfuo.mutation.Where(ps...)
	return wfuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wfuo *WithFieldsUpdateOne) Select(field string, fields ...string) *WithFieldsUpdateOne {
	wfuo.fields = append([]string{field}, fields...)
	return wfuo
}

// Save executes the query and returns the updated WithFields entity.
func (wfuo *WithFieldsUpdateOne) Save(ctx context.Context) (*WithFields, error) {
	return withHooks(ctx, wfuo.sqlSave, wfuo.mutation, wfuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wfuo *WithFieldsUpdateOne) SaveX(ctx context.Context) *WithFields {
	node, err := wfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wfuo *WithFieldsUpdateOne) Exec(ctx context.Context) error {
	_, err := wfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wfuo *WithFieldsUpdateOne) ExecX(ctx context.Context) {
	if err := wfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wfuo *WithFieldsUpdateOne) sqlSave(ctx context.Context) (_node *WithFields, err error) {
	_spec := sqlgraph.NewUpdateSpec(withfields.Table, withfields.Columns, sqlgraph.NewFieldSpec(withfields.FieldID, field.TypeInt))
	id, ok := wfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WithFields.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, withfields.FieldID)
		for _, f := range fields {
			if !withfields.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != withfields.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wfuo.mutation.Existing(); ok {
		_spec.SetField(withfields.FieldExisting, field.TypeString, value)
	}
	_node = &WithFields{config: wfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{withfields.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wfuo.mutation.done = true
	return _node, nil
}
