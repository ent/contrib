// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/contrib/schemast/internal/mutatetest/ent/withfields"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WithFieldsCreate is the builder for creating a WithFields entity.
type WithFieldsCreate struct {
	config
	mutation *WithFieldsMutation
	hooks    []Hook
}

// SetExisting sets the "existing" field.
func (wfc *WithFieldsCreate) SetExisting(s string) *WithFieldsCreate {
	wfc.mutation.SetExisting(s)
	return wfc
}

// Mutation returns the WithFieldsMutation object of the builder.
func (wfc *WithFieldsCreate) Mutation() *WithFieldsMutation {
	return wfc.mutation
}

// Save creates the WithFields in the database.
func (wfc *WithFieldsCreate) Save(ctx context.Context) (*WithFields, error) {
	var (
		err  error
		node *WithFields
	)
	if len(wfc.hooks) == 0 {
		if err = wfc.check(); err != nil {
			return nil, err
		}
		node, err = wfc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WithFieldsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wfc.check(); err != nil {
				return nil, err
			}
			wfc.mutation = mutation
			if node, err = wfc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(wfc.hooks) - 1; i >= 0; i-- {
			if wfc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = wfc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, wfc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*WithFields)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from WithFieldsMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (wfc *WithFieldsCreate) SaveX(ctx context.Context) *WithFields {
	v, err := wfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wfc *WithFieldsCreate) Exec(ctx context.Context) error {
	_, err := wfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wfc *WithFieldsCreate) ExecX(ctx context.Context) {
	if err := wfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wfc *WithFieldsCreate) check() error {
	if _, ok := wfc.mutation.Existing(); !ok {
		return &ValidationError{Name: "existing", err: errors.New(`ent: missing required field "WithFields.existing"`)}
	}
	return nil
}

func (wfc *WithFieldsCreate) sqlSave(ctx context.Context) (*WithFields, error) {
	_node, _spec := wfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (wfc *WithFieldsCreate) createSpec() (*WithFields, *sqlgraph.CreateSpec) {
	var (
		_node = &WithFields{config: wfc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: withfields.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: withfields.FieldID,
			},
		}
	)
	if value, ok := wfc.mutation.Existing(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: withfields.FieldExisting,
		})
		_node.Existing = value
	}
	return _node, _spec
}

// WithFieldsCreateBulk is the builder for creating many WithFields entities in bulk.
type WithFieldsCreateBulk struct {
	config
	builders []*WithFieldsCreate
}

// Save creates the WithFields entities in the database.
func (wfcb *WithFieldsCreateBulk) Save(ctx context.Context) ([]*WithFields, error) {
	specs := make([]*sqlgraph.CreateSpec, len(wfcb.builders))
	nodes := make([]*WithFields, len(wfcb.builders))
	mutators := make([]Mutator, len(wfcb.builders))
	for i := range wfcb.builders {
		func(i int, root context.Context) {
			builder := wfcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WithFieldsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wfcb *WithFieldsCreateBulk) SaveX(ctx context.Context) []*WithFields {
	v, err := wfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wfcb *WithFieldsCreateBulk) Exec(ctx context.Context) error {
	_, err := wfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wfcb *WithFieldsCreateBulk) ExecX(ctx context.Context) {
	if err := wfcb.Exec(ctx); err != nil {
		panic(err)
	}
}
