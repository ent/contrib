// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// BlogPostsColumns holds the columns for the "blog_posts" table.
	BlogPostsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "title", Type: field.TypeString},
		{Name: "body", Type: field.TypeString},
		{Name: "blog_post_author", Type: field.TypeInt, Nullable: true},
	}
	// BlogPostsTable holds the schema information for the "blog_posts" table.
	BlogPostsTable = &schema.Table{
		Name:       "blog_posts",
		Columns:    BlogPostsColumns,
		PrimaryKey: []*schema.Column{BlogPostsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "blog_posts_users_author",
				Columns: []*schema.Column{BlogPostsColumns[3]},

				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// CategoriesColumns holds the columns for the "categories" table.
	CategoriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
	}
	// CategoriesTable holds the schema information for the "categories" table.
	CategoriesTable = &schema.Table{
		Name:        "categories",
		Columns:     CategoriesColumns,
		PrimaryKey:  []*schema.Column{CategoriesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// DependsOnSkippedsColumns holds the columns for the "depends_on_skippeds" table.
	DependsOnSkippedsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
	}
	// DependsOnSkippedsTable holds the schema information for the "depends_on_skippeds" table.
	DependsOnSkippedsTable = &schema.Table{
		Name:        "depends_on_skippeds",
		Columns:     DependsOnSkippedsColumns,
		PrimaryKey:  []*schema.Column{DependsOnSkippedsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// DuplicateNumberMessagesColumns holds the columns for the "duplicate_number_messages" table.
	DuplicateNumberMessagesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "hello", Type: field.TypeString},
		{Name: "world", Type: field.TypeString},
	}
	// DuplicateNumberMessagesTable holds the schema information for the "duplicate_number_messages" table.
	DuplicateNumberMessagesTable = &schema.Table{
		Name:        "duplicate_number_messages",
		Columns:     DuplicateNumberMessagesColumns,
		PrimaryKey:  []*schema.Column{DuplicateNumberMessagesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// ExplicitSkippedMessagesColumns holds the columns for the "explicit_skipped_messages" table.
	ExplicitSkippedMessagesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
	}
	// ExplicitSkippedMessagesTable holds the schema information for the "explicit_skipped_messages" table.
	ExplicitSkippedMessagesTable = &schema.Table{
		Name:        "explicit_skipped_messages",
		Columns:     ExplicitSkippedMessagesColumns,
		PrimaryKey:  []*schema.Column{ExplicitSkippedMessagesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// ImplicitSkippedMessagesColumns holds the columns for the "implicit_skipped_messages" table.
	ImplicitSkippedMessagesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "depends_on_skipped_skipped", Type: field.TypeInt, Nullable: true},
	}
	// ImplicitSkippedMessagesTable holds the schema information for the "implicit_skipped_messages" table.
	ImplicitSkippedMessagesTable = &schema.Table{
		Name:       "implicit_skipped_messages",
		Columns:    ImplicitSkippedMessagesColumns,
		PrimaryKey: []*schema.Column{ImplicitSkippedMessagesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "implicit_skipped_messages_depends_on_skippeds_skipped",
				Columns: []*schema.Column{ImplicitSkippedMessagesColumns[1]},

				RefColumns: []*schema.Column{DependsOnSkippedsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// InvalidFieldMessagesColumns holds the columns for the "invalid_field_messages" table.
	InvalidFieldMessagesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "hello", Type: field.TypeUUID},
	}
	// InvalidFieldMessagesTable holds the schema information for the "invalid_field_messages" table.
	InvalidFieldMessagesTable = &schema.Table{
		Name:        "invalid_field_messages",
		Columns:     InvalidFieldMessagesColumns,
		PrimaryKey:  []*schema.Column{InvalidFieldMessagesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// MessageWithEnumsColumns holds the columns for the "message_with_enums" table.
	MessageWithEnumsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "enum_type", Type: field.TypeEnum, Enums: []string{"pending", "active", "suspended", "deleted"}, Default: "pending"},
		{Name: "enum_without_default", Type: field.TypeEnum, Enums: []string{"first", "second"}},
	}
	// MessageWithEnumsTable holds the schema information for the "message_with_enums" table.
	MessageWithEnumsTable = &schema.Table{
		Name:        "message_with_enums",
		Columns:     MessageWithEnumsColumns,
		PrimaryKey:  []*schema.Column{MessageWithEnumsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// MessageWithFieldOnesColumns holds the columns for the "message_with_field_ones" table.
	MessageWithFieldOnesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "field_one", Type: field.TypeInt32},
	}
	// MessageWithFieldOnesTable holds the schema information for the "message_with_field_ones" table.
	MessageWithFieldOnesTable = &schema.Table{
		Name:        "message_with_field_ones",
		Columns:     MessageWithFieldOnesColumns,
		PrimaryKey:  []*schema.Column{MessageWithFieldOnesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// MessageWithIdsColumns holds the columns for the "message_with_ids" table.
	MessageWithIdsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt32, Increment: true},
	}
	// MessageWithIdsTable holds the schema information for the "message_with_ids" table.
	MessageWithIdsTable = &schema.Table{
		Name:        "message_with_ids",
		Columns:     MessageWithIdsColumns,
		PrimaryKey:  []*schema.Column{MessageWithIdsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// MessageWithPackageNamesColumns holds the columns for the "message_with_package_names" table.
	MessageWithPackageNamesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
	}
	// MessageWithPackageNamesTable holds the schema information for the "message_with_package_names" table.
	MessageWithPackageNamesTable = &schema.Table{
		Name:        "message_with_package_names",
		Columns:     MessageWithPackageNamesColumns,
		PrimaryKey:  []*schema.Column{MessageWithPackageNamesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// PortalsColumns holds the columns for the "portals" table.
	PortalsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "portal_category", Type: field.TypeInt, Nullable: true},
	}
	// PortalsTable holds the schema information for the "portals" table.
	PortalsTable = &schema.Table{
		Name:       "portals",
		Columns:    PortalsColumns,
		PrimaryKey: []*schema.Column{PortalsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "portals_categories_category",
				Columns: []*schema.Column{PortalsColumns[3]},

				RefColumns: []*schema.Column{CategoriesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "user_name", Type: field.TypeString},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:        "users",
		Columns:     UsersColumns,
		PrimaryKey:  []*schema.Column{UsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// ValidMessagesColumns holds the columns for the "valid_messages" table.
	ValidMessagesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "ts", Type: field.TypeTime},
	}
	// ValidMessagesTable holds the schema information for the "valid_messages" table.
	ValidMessagesTable = &schema.Table{
		Name:        "valid_messages",
		Columns:     ValidMessagesColumns,
		PrimaryKey:  []*schema.Column{ValidMessagesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// CategoryBlogPostsColumns holds the columns for the "category_blog_posts" table.
	CategoryBlogPostsColumns = []*schema.Column{
		{Name: "category_id", Type: field.TypeInt},
		{Name: "blog_post_id", Type: field.TypeInt},
	}
	// CategoryBlogPostsTable holds the schema information for the "category_blog_posts" table.
	CategoryBlogPostsTable = &schema.Table{
		Name:       "category_blog_posts",
		Columns:    CategoryBlogPostsColumns,
		PrimaryKey: []*schema.Column{CategoryBlogPostsColumns[0], CategoryBlogPostsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "category_blog_posts_category_id",
				Columns: []*schema.Column{CategoryBlogPostsColumns[0]},

				RefColumns: []*schema.Column{CategoriesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:  "category_blog_posts_blog_post_id",
				Columns: []*schema.Column{CategoryBlogPostsColumns[1]},

				RefColumns: []*schema.Column{BlogPostsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		BlogPostsTable,
		CategoriesTable,
		DependsOnSkippedsTable,
		DuplicateNumberMessagesTable,
		ExplicitSkippedMessagesTable,
		ImplicitSkippedMessagesTable,
		InvalidFieldMessagesTable,
		MessageWithEnumsTable,
		MessageWithFieldOnesTable,
		MessageWithIdsTable,
		MessageWithPackageNamesTable,
		PortalsTable,
		UsersTable,
		ValidMessagesTable,
		CategoryBlogPostsTable,
	}
)

func init() {
	BlogPostsTable.ForeignKeys[0].RefTable = UsersTable
	ImplicitSkippedMessagesTable.ForeignKeys[0].RefTable = DependsOnSkippedsTable
	PortalsTable.ForeignKeys[0].RefTable = CategoriesTable
	CategoryBlogPostsTable.ForeignKeys[0].RefTable = CategoriesTable
	CategoryBlogPostsTable.ForeignKeys[1].RefTable = BlogPostsTable
}
