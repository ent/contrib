// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/contrib/entproto/internal/entprototest/ent/enumwithconflictingvalue"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// EnumWithConflictingValue is the model entity for the EnumWithConflictingValue schema.
type EnumWithConflictingValue struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Enum holds the value of the "enum" field.
	Enum         enumwithconflictingvalue.Enum `json:"enum,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EnumWithConflictingValue) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case enumwithconflictingvalue.FieldID:
			values[i] = new(sql.NullInt64)
		case enumwithconflictingvalue.FieldEnum:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EnumWithConflictingValue fields.
func (ewcv *EnumWithConflictingValue) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case enumwithconflictingvalue.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ewcv.ID = int(value.Int64)
		case enumwithconflictingvalue.FieldEnum:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field enum", values[i])
			} else if value.Valid {
				ewcv.Enum = enumwithconflictingvalue.Enum(value.String)
			}
		default:
			ewcv.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EnumWithConflictingValue.
// This includes values selected through modifiers, order, etc.
func (ewcv *EnumWithConflictingValue) Value(name string) (ent.Value, error) {
	return ewcv.selectValues.Get(name)
}

// Update returns a builder for updating this EnumWithConflictingValue.
// Note that you need to call EnumWithConflictingValue.Unwrap() before calling this method if this EnumWithConflictingValue
// was returned from a transaction, and the transaction was committed or rolled back.
func (ewcv *EnumWithConflictingValue) Update() *EnumWithConflictingValueUpdateOne {
	return NewEnumWithConflictingValueClient(ewcv.config).UpdateOne(ewcv)
}

// Unwrap unwraps the EnumWithConflictingValue entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ewcv *EnumWithConflictingValue) Unwrap() *EnumWithConflictingValue {
	_tx, ok := ewcv.config.driver.(*txDriver)
	if !ok {
		panic("ent: EnumWithConflictingValue is not a transactional entity")
	}
	ewcv.config.driver = _tx.drv
	return ewcv
}

// String implements the fmt.Stringer.
func (ewcv *EnumWithConflictingValue) String() string {
	var builder strings.Builder
	builder.WriteString("EnumWithConflictingValue(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ewcv.ID))
	builder.WriteString("enum=")
	builder.WriteString(fmt.Sprintf("%v", ewcv.Enum))
	builder.WriteByte(')')
	return builder.String()
}

// EnumWithConflictingValues is a parsable slice of EnumWithConflictingValue.
type EnumWithConflictingValues []*EnumWithConflictingValue
