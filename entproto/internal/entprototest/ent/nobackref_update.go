// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/contrib/entproto/internal/entprototest/ent/image"
	"entgo.io/contrib/entproto/internal/entprototest/ent/nobackref"
	"entgo.io/contrib/entproto/internal/entprototest/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// NoBackrefUpdate is the builder for updating NoBackref entities.
type NoBackrefUpdate struct {
	config
	hooks    []Hook
	mutation *NoBackrefMutation
}

// Where appends a list predicates to the NoBackrefUpdate builder.
func (nbu *NoBackrefUpdate) Where(ps ...predicate.NoBackref) *NoBackrefUpdate {
	nbu.mutation.Where(ps...)
	return nbu
}

// AddImageIDs adds the "images" edge to the Image entity by IDs.
func (nbu *NoBackrefUpdate) AddImageIDs(ids ...uuid.UUID) *NoBackrefUpdate {
	nbu.mutation.AddImageIDs(ids...)
	return nbu
}

// AddImages adds the "images" edges to the Image entity.
func (nbu *NoBackrefUpdate) AddImages(i ...*Image) *NoBackrefUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return nbu.AddImageIDs(ids...)
}

// Mutation returns the NoBackrefMutation object of the builder.
func (nbu *NoBackrefUpdate) Mutation() *NoBackrefMutation {
	return nbu.mutation
}

// ClearImages clears all "images" edges to the Image entity.
func (nbu *NoBackrefUpdate) ClearImages() *NoBackrefUpdate {
	nbu.mutation.ClearImages()
	return nbu
}

// RemoveImageIDs removes the "images" edge to Image entities by IDs.
func (nbu *NoBackrefUpdate) RemoveImageIDs(ids ...uuid.UUID) *NoBackrefUpdate {
	nbu.mutation.RemoveImageIDs(ids...)
	return nbu
}

// RemoveImages removes "images" edges to Image entities.
func (nbu *NoBackrefUpdate) RemoveImages(i ...*Image) *NoBackrefUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return nbu.RemoveImageIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nbu *NoBackrefUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, nbu.sqlSave, nbu.mutation, nbu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nbu *NoBackrefUpdate) SaveX(ctx context.Context) int {
	affected, err := nbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nbu *NoBackrefUpdate) Exec(ctx context.Context) error {
	_, err := nbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nbu *NoBackrefUpdate) ExecX(ctx context.Context) {
	if err := nbu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (nbu *NoBackrefUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(nobackref.Table, nobackref.Columns, sqlgraph.NewFieldSpec(nobackref.FieldID, field.TypeInt))
	if ps := nbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if nbu.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   nobackref.ImagesTable,
			Columns: []string{nobackref.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nbu.mutation.RemovedImagesIDs(); len(nodes) > 0 && !nbu.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   nobackref.ImagesTable,
			Columns: []string{nobackref.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nbu.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   nobackref.ImagesTable,
			Columns: []string{nobackref.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{nobackref.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nbu.mutation.done = true
	return n, nil
}

// NoBackrefUpdateOne is the builder for updating a single NoBackref entity.
type NoBackrefUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NoBackrefMutation
}

// AddImageIDs adds the "images" edge to the Image entity by IDs.
func (nbuo *NoBackrefUpdateOne) AddImageIDs(ids ...uuid.UUID) *NoBackrefUpdateOne {
	nbuo.mutation.AddImageIDs(ids...)
	return nbuo
}

// AddImages adds the "images" edges to the Image entity.
func (nbuo *NoBackrefUpdateOne) AddImages(i ...*Image) *NoBackrefUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return nbuo.AddImageIDs(ids...)
}

// Mutation returns the NoBackrefMutation object of the builder.
func (nbuo *NoBackrefUpdateOne) Mutation() *NoBackrefMutation {
	return nbuo.mutation
}

// ClearImages clears all "images" edges to the Image entity.
func (nbuo *NoBackrefUpdateOne) ClearImages() *NoBackrefUpdateOne {
	nbuo.mutation.ClearImages()
	return nbuo
}

// RemoveImageIDs removes the "images" edge to Image entities by IDs.
func (nbuo *NoBackrefUpdateOne) RemoveImageIDs(ids ...uuid.UUID) *NoBackrefUpdateOne {
	nbuo.mutation.RemoveImageIDs(ids...)
	return nbuo
}

// RemoveImages removes "images" edges to Image entities.
func (nbuo *NoBackrefUpdateOne) RemoveImages(i ...*Image) *NoBackrefUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return nbuo.RemoveImageIDs(ids...)
}

// Where appends a list predicates to the NoBackrefUpdate builder.
func (nbuo *NoBackrefUpdateOne) Where(ps ...predicate.NoBackref) *NoBackrefUpdateOne {
	nbuo.mutation.Where(ps...)
	return nbuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nbuo *NoBackrefUpdateOne) Select(field string, fields ...string) *NoBackrefUpdateOne {
	nbuo.fields = append([]string{field}, fields...)
	return nbuo
}

// Save executes the query and returns the updated NoBackref entity.
func (nbuo *NoBackrefUpdateOne) Save(ctx context.Context) (*NoBackref, error) {
	return withHooks(ctx, nbuo.sqlSave, nbuo.mutation, nbuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nbuo *NoBackrefUpdateOne) SaveX(ctx context.Context) *NoBackref {
	node, err := nbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nbuo *NoBackrefUpdateOne) Exec(ctx context.Context) error {
	_, err := nbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nbuo *NoBackrefUpdateOne) ExecX(ctx context.Context) {
	if err := nbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (nbuo *NoBackrefUpdateOne) sqlSave(ctx context.Context) (_node *NoBackref, err error) {
	_spec := sqlgraph.NewUpdateSpec(nobackref.Table, nobackref.Columns, sqlgraph.NewFieldSpec(nobackref.FieldID, field.TypeInt))
	id, ok := nbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "NoBackref.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nbuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, nobackref.FieldID)
		for _, f := range fields {
			if !nobackref.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != nobackref.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if nbuo.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   nobackref.ImagesTable,
			Columns: []string{nobackref.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nbuo.mutation.RemovedImagesIDs(); len(nodes) > 0 && !nbuo.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   nobackref.ImagesTable,
			Columns: []string{nobackref.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nbuo.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   nobackref.ImagesTable,
			Columns: []string{nobackref.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &NoBackref{config: nbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{nobackref.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nbuo.mutation.done = true
	return _node, nil
}
