// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/contrib/entproto/internal/entprototest/ent/messagewithoptionals"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// MessageWithOptionalsCreate is the builder for creating a MessageWithOptionals entity.
type MessageWithOptionalsCreate struct {
	config
	mutation *MessageWithOptionalsMutation
	hooks    []Hook
}

// SetStrField sets the "str_field" field.
func (mwoc *MessageWithOptionalsCreate) SetStrField(s string) *MessageWithOptionalsCreate {
	mwoc.mutation.SetStrField(s)
	return mwoc
}

// SetNillableStrField sets the "str_field" field if the given value is not nil.
func (mwoc *MessageWithOptionalsCreate) SetNillableStrField(s *string) *MessageWithOptionalsCreate {
	if s != nil {
		mwoc.SetStrField(*s)
	}
	return mwoc
}

// SetIntField sets the "int_field" field.
func (mwoc *MessageWithOptionalsCreate) SetIntField(i int8) *MessageWithOptionalsCreate {
	mwoc.mutation.SetIntField(i)
	return mwoc
}

// SetNillableIntField sets the "int_field" field if the given value is not nil.
func (mwoc *MessageWithOptionalsCreate) SetNillableIntField(i *int8) *MessageWithOptionalsCreate {
	if i != nil {
		mwoc.SetIntField(*i)
	}
	return mwoc
}

// SetUintField sets the "uint_field" field.
func (mwoc *MessageWithOptionalsCreate) SetUintField(u uint8) *MessageWithOptionalsCreate {
	mwoc.mutation.SetUintField(u)
	return mwoc
}

// SetNillableUintField sets the "uint_field" field if the given value is not nil.
func (mwoc *MessageWithOptionalsCreate) SetNillableUintField(u *uint8) *MessageWithOptionalsCreate {
	if u != nil {
		mwoc.SetUintField(*u)
	}
	return mwoc
}

// SetFloatField sets the "float_field" field.
func (mwoc *MessageWithOptionalsCreate) SetFloatField(f float32) *MessageWithOptionalsCreate {
	mwoc.mutation.SetFloatField(f)
	return mwoc
}

// SetNillableFloatField sets the "float_field" field if the given value is not nil.
func (mwoc *MessageWithOptionalsCreate) SetNillableFloatField(f *float32) *MessageWithOptionalsCreate {
	if f != nil {
		mwoc.SetFloatField(*f)
	}
	return mwoc
}

// SetBoolField sets the "bool_field" field.
func (mwoc *MessageWithOptionalsCreate) SetBoolField(b bool) *MessageWithOptionalsCreate {
	mwoc.mutation.SetBoolField(b)
	return mwoc
}

// SetNillableBoolField sets the "bool_field" field if the given value is not nil.
func (mwoc *MessageWithOptionalsCreate) SetNillableBoolField(b *bool) *MessageWithOptionalsCreate {
	if b != nil {
		mwoc.SetBoolField(*b)
	}
	return mwoc
}

// SetBytesField sets the "bytes_field" field.
func (mwoc *MessageWithOptionalsCreate) SetBytesField(b []byte) *MessageWithOptionalsCreate {
	mwoc.mutation.SetBytesField(b)
	return mwoc
}

// SetUUIDField sets the "uuid_field" field.
func (mwoc *MessageWithOptionalsCreate) SetUUIDField(u uuid.UUID) *MessageWithOptionalsCreate {
	mwoc.mutation.SetUUIDField(u)
	return mwoc
}

// Mutation returns the MessageWithOptionalsMutation object of the builder.
func (mwoc *MessageWithOptionalsCreate) Mutation() *MessageWithOptionalsMutation {
	return mwoc.mutation
}

// Save creates the MessageWithOptionals in the database.
func (mwoc *MessageWithOptionalsCreate) Save(ctx context.Context) (*MessageWithOptionals, error) {
	var (
		err  error
		node *MessageWithOptionals
	)
	if len(mwoc.hooks) == 0 {
		if err = mwoc.check(); err != nil {
			return nil, err
		}
		node, err = mwoc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MessageWithOptionalsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mwoc.check(); err != nil {
				return nil, err
			}
			mwoc.mutation = mutation
			node, err = mwoc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mwoc.hooks) - 1; i >= 0; i-- {
			mut = mwoc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mwoc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mwoc *MessageWithOptionalsCreate) SaveX(ctx context.Context) *MessageWithOptionals {
	v, err := mwoc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (mwoc *MessageWithOptionalsCreate) check() error {
	return nil
}

func (mwoc *MessageWithOptionalsCreate) sqlSave(ctx context.Context) (*MessageWithOptionals, error) {
	_node, _spec := mwoc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mwoc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (mwoc *MessageWithOptionalsCreate) createSpec() (*MessageWithOptionals, *sqlgraph.CreateSpec) {
	var (
		_node = &MessageWithOptionals{config: mwoc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: messagewithoptionals.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: messagewithoptionals.FieldID,
			},
		}
	)
	if value, ok := mwoc.mutation.StrField(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: messagewithoptionals.FieldStrField,
		})
		_node.StrField = value
	}
	if value, ok := mwoc.mutation.IntField(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: messagewithoptionals.FieldIntField,
		})
		_node.IntField = value
	}
	if value, ok := mwoc.mutation.UintField(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: messagewithoptionals.FieldUintField,
		})
		_node.UintField = value
	}
	if value, ok := mwoc.mutation.FloatField(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: messagewithoptionals.FieldFloatField,
		})
		_node.FloatField = value
	}
	if value, ok := mwoc.mutation.BoolField(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: messagewithoptionals.FieldBoolField,
		})
		_node.BoolField = value
	}
	if value, ok := mwoc.mutation.BytesField(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: messagewithoptionals.FieldBytesField,
		})
		_node.BytesField = value
	}
	if value, ok := mwoc.mutation.UUIDField(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: messagewithoptionals.FieldUUIDField,
		})
		_node.UUIDField = value
	}
	return _node, _spec
}

// MessageWithOptionalsCreateBulk is the builder for creating many MessageWithOptionals entities in bulk.
type MessageWithOptionalsCreateBulk struct {
	config
	builders []*MessageWithOptionalsCreate
}

// Save creates the MessageWithOptionals entities in the database.
func (mwocb *MessageWithOptionalsCreateBulk) Save(ctx context.Context) ([]*MessageWithOptionals, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mwocb.builders))
	nodes := make([]*MessageWithOptionals, len(mwocb.builders))
	mutators := make([]Mutator, len(mwocb.builders))
	for i := range mwocb.builders {
		func(i int, root context.Context) {
			builder := mwocb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MessageWithOptionalsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mwocb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mwocb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mwocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mwocb *MessageWithOptionalsCreateBulk) SaveX(ctx context.Context) []*MessageWithOptionals {
	v, err := mwocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
