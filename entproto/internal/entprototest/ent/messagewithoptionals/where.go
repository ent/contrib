// Code generated by entc, DO NOT EDIT.

package messagewithoptionals

import (
	"time"

	"entgo.io/contrib/entproto/internal/entprototest/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// StrField applies equality check predicate on the "str_field" field. It's identical to StrFieldEQ.
func StrField(v string) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStrField), v))
	})
}

// IntField applies equality check predicate on the "int_field" field. It's identical to IntFieldEQ.
func IntField(v int8) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIntField), v))
	})
}

// UintField applies equality check predicate on the "uint_field" field. It's identical to UintFieldEQ.
func UintField(v uint8) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUintField), v))
	})
}

// FloatField applies equality check predicate on the "float_field" field. It's identical to FloatFieldEQ.
func FloatField(v float32) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFloatField), v))
	})
}

// BoolField applies equality check predicate on the "bool_field" field. It's identical to BoolFieldEQ.
func BoolField(v bool) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBoolField), v))
	})
}

// BytesField applies equality check predicate on the "bytes_field" field. It's identical to BytesFieldEQ.
func BytesField(v []byte) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBytesField), v))
	})
}

// UUIDField applies equality check predicate on the "uuid_field" field. It's identical to UUIDFieldEQ.
func UUIDField(v uuid.UUID) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUIDField), v))
	})
}

// TimeField applies equality check predicate on the "time_field" field. It's identical to TimeFieldEQ.
func TimeField(v time.Time) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimeField), v))
	})
}

// StrFieldEQ applies the EQ predicate on the "str_field" field.
func StrFieldEQ(v string) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStrField), v))
	})
}

// StrFieldNEQ applies the NEQ predicate on the "str_field" field.
func StrFieldNEQ(v string) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStrField), v))
	})
}

// StrFieldIn applies the In predicate on the "str_field" field.
func StrFieldIn(vs ...string) predicate.MessageWithOptionals {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStrField), v...))
	})
}

// StrFieldNotIn applies the NotIn predicate on the "str_field" field.
func StrFieldNotIn(vs ...string) predicate.MessageWithOptionals {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStrField), v...))
	})
}

// StrFieldGT applies the GT predicate on the "str_field" field.
func StrFieldGT(v string) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStrField), v))
	})
}

// StrFieldGTE applies the GTE predicate on the "str_field" field.
func StrFieldGTE(v string) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStrField), v))
	})
}

// StrFieldLT applies the LT predicate on the "str_field" field.
func StrFieldLT(v string) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStrField), v))
	})
}

// StrFieldLTE applies the LTE predicate on the "str_field" field.
func StrFieldLTE(v string) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStrField), v))
	})
}

// StrFieldContains applies the Contains predicate on the "str_field" field.
func StrFieldContains(v string) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStrField), v))
	})
}

// StrFieldHasPrefix applies the HasPrefix predicate on the "str_field" field.
func StrFieldHasPrefix(v string) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStrField), v))
	})
}

// StrFieldHasSuffix applies the HasSuffix predicate on the "str_field" field.
func StrFieldHasSuffix(v string) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStrField), v))
	})
}

// StrFieldIsNil applies the IsNil predicate on the "str_field" field.
func StrFieldIsNil() predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStrField)))
	})
}

// StrFieldNotNil applies the NotNil predicate on the "str_field" field.
func StrFieldNotNil() predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStrField)))
	})
}

// StrFieldEqualFold applies the EqualFold predicate on the "str_field" field.
func StrFieldEqualFold(v string) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStrField), v))
	})
}

// StrFieldContainsFold applies the ContainsFold predicate on the "str_field" field.
func StrFieldContainsFold(v string) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStrField), v))
	})
}

// IntFieldEQ applies the EQ predicate on the "int_field" field.
func IntFieldEQ(v int8) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIntField), v))
	})
}

// IntFieldNEQ applies the NEQ predicate on the "int_field" field.
func IntFieldNEQ(v int8) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIntField), v))
	})
}

// IntFieldIn applies the In predicate on the "int_field" field.
func IntFieldIn(vs ...int8) predicate.MessageWithOptionals {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIntField), v...))
	})
}

// IntFieldNotIn applies the NotIn predicate on the "int_field" field.
func IntFieldNotIn(vs ...int8) predicate.MessageWithOptionals {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIntField), v...))
	})
}

// IntFieldGT applies the GT predicate on the "int_field" field.
func IntFieldGT(v int8) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIntField), v))
	})
}

// IntFieldGTE applies the GTE predicate on the "int_field" field.
func IntFieldGTE(v int8) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIntField), v))
	})
}

// IntFieldLT applies the LT predicate on the "int_field" field.
func IntFieldLT(v int8) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIntField), v))
	})
}

// IntFieldLTE applies the LTE predicate on the "int_field" field.
func IntFieldLTE(v int8) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIntField), v))
	})
}

// IntFieldIsNil applies the IsNil predicate on the "int_field" field.
func IntFieldIsNil() predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIntField)))
	})
}

// IntFieldNotNil applies the NotNil predicate on the "int_field" field.
func IntFieldNotNil() predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIntField)))
	})
}

// UintFieldEQ applies the EQ predicate on the "uint_field" field.
func UintFieldEQ(v uint8) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUintField), v))
	})
}

// UintFieldNEQ applies the NEQ predicate on the "uint_field" field.
func UintFieldNEQ(v uint8) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUintField), v))
	})
}

// UintFieldIn applies the In predicate on the "uint_field" field.
func UintFieldIn(vs ...uint8) predicate.MessageWithOptionals {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUintField), v...))
	})
}

// UintFieldNotIn applies the NotIn predicate on the "uint_field" field.
func UintFieldNotIn(vs ...uint8) predicate.MessageWithOptionals {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUintField), v...))
	})
}

// UintFieldGT applies the GT predicate on the "uint_field" field.
func UintFieldGT(v uint8) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUintField), v))
	})
}

// UintFieldGTE applies the GTE predicate on the "uint_field" field.
func UintFieldGTE(v uint8) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUintField), v))
	})
}

// UintFieldLT applies the LT predicate on the "uint_field" field.
func UintFieldLT(v uint8) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUintField), v))
	})
}

// UintFieldLTE applies the LTE predicate on the "uint_field" field.
func UintFieldLTE(v uint8) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUintField), v))
	})
}

// UintFieldIsNil applies the IsNil predicate on the "uint_field" field.
func UintFieldIsNil() predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUintField)))
	})
}

// UintFieldNotNil applies the NotNil predicate on the "uint_field" field.
func UintFieldNotNil() predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUintField)))
	})
}

// FloatFieldEQ applies the EQ predicate on the "float_field" field.
func FloatFieldEQ(v float32) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFloatField), v))
	})
}

// FloatFieldNEQ applies the NEQ predicate on the "float_field" field.
func FloatFieldNEQ(v float32) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFloatField), v))
	})
}

// FloatFieldIn applies the In predicate on the "float_field" field.
func FloatFieldIn(vs ...float32) predicate.MessageWithOptionals {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFloatField), v...))
	})
}

// FloatFieldNotIn applies the NotIn predicate on the "float_field" field.
func FloatFieldNotIn(vs ...float32) predicate.MessageWithOptionals {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFloatField), v...))
	})
}

// FloatFieldGT applies the GT predicate on the "float_field" field.
func FloatFieldGT(v float32) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFloatField), v))
	})
}

// FloatFieldGTE applies the GTE predicate on the "float_field" field.
func FloatFieldGTE(v float32) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFloatField), v))
	})
}

// FloatFieldLT applies the LT predicate on the "float_field" field.
func FloatFieldLT(v float32) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFloatField), v))
	})
}

// FloatFieldLTE applies the LTE predicate on the "float_field" field.
func FloatFieldLTE(v float32) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFloatField), v))
	})
}

// FloatFieldIsNil applies the IsNil predicate on the "float_field" field.
func FloatFieldIsNil() predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFloatField)))
	})
}

// FloatFieldNotNil applies the NotNil predicate on the "float_field" field.
func FloatFieldNotNil() predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFloatField)))
	})
}

// BoolFieldEQ applies the EQ predicate on the "bool_field" field.
func BoolFieldEQ(v bool) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBoolField), v))
	})
}

// BoolFieldNEQ applies the NEQ predicate on the "bool_field" field.
func BoolFieldNEQ(v bool) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBoolField), v))
	})
}

// BoolFieldIsNil applies the IsNil predicate on the "bool_field" field.
func BoolFieldIsNil() predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBoolField)))
	})
}

// BoolFieldNotNil applies the NotNil predicate on the "bool_field" field.
func BoolFieldNotNil() predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBoolField)))
	})
}

// BytesFieldEQ applies the EQ predicate on the "bytes_field" field.
func BytesFieldEQ(v []byte) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBytesField), v))
	})
}

// BytesFieldNEQ applies the NEQ predicate on the "bytes_field" field.
func BytesFieldNEQ(v []byte) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBytesField), v))
	})
}

// BytesFieldIn applies the In predicate on the "bytes_field" field.
func BytesFieldIn(vs ...[]byte) predicate.MessageWithOptionals {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBytesField), v...))
	})
}

// BytesFieldNotIn applies the NotIn predicate on the "bytes_field" field.
func BytesFieldNotIn(vs ...[]byte) predicate.MessageWithOptionals {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBytesField), v...))
	})
}

// BytesFieldGT applies the GT predicate on the "bytes_field" field.
func BytesFieldGT(v []byte) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBytesField), v))
	})
}

// BytesFieldGTE applies the GTE predicate on the "bytes_field" field.
func BytesFieldGTE(v []byte) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBytesField), v))
	})
}

// BytesFieldLT applies the LT predicate on the "bytes_field" field.
func BytesFieldLT(v []byte) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBytesField), v))
	})
}

// BytesFieldLTE applies the LTE predicate on the "bytes_field" field.
func BytesFieldLTE(v []byte) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBytesField), v))
	})
}

// BytesFieldIsNil applies the IsNil predicate on the "bytes_field" field.
func BytesFieldIsNil() predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBytesField)))
	})
}

// BytesFieldNotNil applies the NotNil predicate on the "bytes_field" field.
func BytesFieldNotNil() predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBytesField)))
	})
}

// UUIDFieldEQ applies the EQ predicate on the "uuid_field" field.
func UUIDFieldEQ(v uuid.UUID) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUIDField), v))
	})
}

// UUIDFieldNEQ applies the NEQ predicate on the "uuid_field" field.
func UUIDFieldNEQ(v uuid.UUID) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUUIDField), v))
	})
}

// UUIDFieldIn applies the In predicate on the "uuid_field" field.
func UUIDFieldIn(vs ...uuid.UUID) predicate.MessageWithOptionals {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUUIDField), v...))
	})
}

// UUIDFieldNotIn applies the NotIn predicate on the "uuid_field" field.
func UUIDFieldNotIn(vs ...uuid.UUID) predicate.MessageWithOptionals {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUUIDField), v...))
	})
}

// UUIDFieldGT applies the GT predicate on the "uuid_field" field.
func UUIDFieldGT(v uuid.UUID) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUUIDField), v))
	})
}

// UUIDFieldGTE applies the GTE predicate on the "uuid_field" field.
func UUIDFieldGTE(v uuid.UUID) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUUIDField), v))
	})
}

// UUIDFieldLT applies the LT predicate on the "uuid_field" field.
func UUIDFieldLT(v uuid.UUID) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUUIDField), v))
	})
}

// UUIDFieldLTE applies the LTE predicate on the "uuid_field" field.
func UUIDFieldLTE(v uuid.UUID) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUUIDField), v))
	})
}

// UUIDFieldIsNil applies the IsNil predicate on the "uuid_field" field.
func UUIDFieldIsNil() predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUUIDField)))
	})
}

// UUIDFieldNotNil applies the NotNil predicate on the "uuid_field" field.
func UUIDFieldNotNil() predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUUIDField)))
	})
}

// TimeFieldEQ applies the EQ predicate on the "time_field" field.
func TimeFieldEQ(v time.Time) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimeField), v))
	})
}

// TimeFieldNEQ applies the NEQ predicate on the "time_field" field.
func TimeFieldNEQ(v time.Time) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTimeField), v))
	})
}

// TimeFieldIn applies the In predicate on the "time_field" field.
func TimeFieldIn(vs ...time.Time) predicate.MessageWithOptionals {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTimeField), v...))
	})
}

// TimeFieldNotIn applies the NotIn predicate on the "time_field" field.
func TimeFieldNotIn(vs ...time.Time) predicate.MessageWithOptionals {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTimeField), v...))
	})
}

// TimeFieldGT applies the GT predicate on the "time_field" field.
func TimeFieldGT(v time.Time) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTimeField), v))
	})
}

// TimeFieldGTE applies the GTE predicate on the "time_field" field.
func TimeFieldGTE(v time.Time) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTimeField), v))
	})
}

// TimeFieldLT applies the LT predicate on the "time_field" field.
func TimeFieldLT(v time.Time) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTimeField), v))
	})
}

// TimeFieldLTE applies the LTE predicate on the "time_field" field.
func TimeFieldLTE(v time.Time) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTimeField), v))
	})
}

// TimeFieldIsNil applies the IsNil predicate on the "time_field" field.
func TimeFieldIsNil() predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTimeField)))
	})
}

// TimeFieldNotNil applies the NotNil predicate on the "time_field" field.
func TimeFieldNotNil() predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTimeField)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MessageWithOptionals) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MessageWithOptionals) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MessageWithOptionals) predicate.MessageWithOptionals {
	return predicate.MessageWithOptionals(func(s *sql.Selector) {
		p(s.Not())
	})
}
