// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/contrib/entproto/internal/entprototest/ent/messagewithpackagename"
	"entgo.io/contrib/entproto/internal/entprototest/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MessageWithPackageNameUpdate is the builder for updating MessageWithPackageName entities.
type MessageWithPackageNameUpdate struct {
	config
	hooks    []Hook
	mutation *MessageWithPackageNameMutation
}

// Where adds a new predicate for the MessageWithPackageNameUpdate builder.
func (mwpnu *MessageWithPackageNameUpdate) Where(ps ...predicate.MessageWithPackageName) *MessageWithPackageNameUpdate {
	mwpnu.mutation.predicates = append(mwpnu.mutation.predicates, ps...)
	return mwpnu
}

// SetName sets the "name" field.
func (mwpnu *MessageWithPackageNameUpdate) SetName(s string) *MessageWithPackageNameUpdate {
	mwpnu.mutation.SetName(s)
	return mwpnu
}

// Mutation returns the MessageWithPackageNameMutation object of the builder.
func (mwpnu *MessageWithPackageNameUpdate) Mutation() *MessageWithPackageNameMutation {
	return mwpnu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mwpnu *MessageWithPackageNameUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(mwpnu.hooks) == 0 {
		affected, err = mwpnu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MessageWithPackageNameMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mwpnu.mutation = mutation
			affected, err = mwpnu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mwpnu.hooks) - 1; i >= 0; i-- {
			mut = mwpnu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mwpnu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mwpnu *MessageWithPackageNameUpdate) SaveX(ctx context.Context) int {
	affected, err := mwpnu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mwpnu *MessageWithPackageNameUpdate) Exec(ctx context.Context) error {
	_, err := mwpnu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mwpnu *MessageWithPackageNameUpdate) ExecX(ctx context.Context) {
	if err := mwpnu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mwpnu *MessageWithPackageNameUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   messagewithpackagename.Table,
			Columns: messagewithpackagename.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: messagewithpackagename.FieldID,
			},
		},
	}
	if ps := mwpnu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mwpnu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: messagewithpackagename.FieldName,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mwpnu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{messagewithpackagename.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// MessageWithPackageNameUpdateOne is the builder for updating a single MessageWithPackageName entity.
type MessageWithPackageNameUpdateOne struct {
	config
	hooks    []Hook
	mutation *MessageWithPackageNameMutation
}

// SetName sets the "name" field.
func (mwpnuo *MessageWithPackageNameUpdateOne) SetName(s string) *MessageWithPackageNameUpdateOne {
	mwpnuo.mutation.SetName(s)
	return mwpnuo
}

// Mutation returns the MessageWithPackageNameMutation object of the builder.
func (mwpnuo *MessageWithPackageNameUpdateOne) Mutation() *MessageWithPackageNameMutation {
	return mwpnuo.mutation
}

// Save executes the query and returns the updated MessageWithPackageName entity.
func (mwpnuo *MessageWithPackageNameUpdateOne) Save(ctx context.Context) (*MessageWithPackageName, error) {
	var (
		err  error
		node *MessageWithPackageName
	)
	if len(mwpnuo.hooks) == 0 {
		node, err = mwpnuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MessageWithPackageNameMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mwpnuo.mutation = mutation
			node, err = mwpnuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mwpnuo.hooks) - 1; i >= 0; i-- {
			mut = mwpnuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mwpnuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (mwpnuo *MessageWithPackageNameUpdateOne) SaveX(ctx context.Context) *MessageWithPackageName {
	node, err := mwpnuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mwpnuo *MessageWithPackageNameUpdateOne) Exec(ctx context.Context) error {
	_, err := mwpnuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mwpnuo *MessageWithPackageNameUpdateOne) ExecX(ctx context.Context) {
	if err := mwpnuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mwpnuo *MessageWithPackageNameUpdateOne) sqlSave(ctx context.Context) (_node *MessageWithPackageName, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   messagewithpackagename.Table,
			Columns: messagewithpackagename.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: messagewithpackagename.FieldID,
			},
		},
	}
	id, ok := mwpnuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing MessageWithPackageName.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := mwpnuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mwpnuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: messagewithpackagename.FieldName,
		})
	}
	_node = &MessageWithPackageName{config: mwpnuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mwpnuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{messagewithpackagename.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
