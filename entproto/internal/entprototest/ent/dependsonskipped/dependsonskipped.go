// Code generated by ent, DO NOT EDIT.

package dependsonskipped

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the dependsonskipped type in the database.
	Label = "depends_on_skipped"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeSkipped holds the string denoting the skipped edge name in mutations.
	EdgeSkipped = "skipped"
	// Table holds the table name of the dependsonskipped in the database.
	Table = "depends_on_skippeds"
	// SkippedTable is the table that holds the skipped relation/edge.
	SkippedTable = "implicit_skipped_messages"
	// SkippedInverseTable is the table name for the ImplicitSkippedMessage entity.
	// It exists in this package in order to avoid circular dependency with the "implicitskippedmessage" package.
	SkippedInverseTable = "implicit_skipped_messages"
	// SkippedColumn is the table column denoting the skipped relation/edge.
	SkippedColumn = "depends_on_skipped_skipped"
)

// Columns holds all SQL columns for dependsonskipped fields.
var Columns = []string{
	FieldID,
	FieldName,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Order defines the ordering method for the DependsOnSkipped queries.
type Order func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// BySkippedCount orders the results by skipped count.
func BySkippedCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSkippedStep(), opts...)
	}
}

// BySkipped orders the results by skipped terms.
func BySkipped(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSkippedStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSkippedStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SkippedInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SkippedTable, SkippedColumn),
	)
}
