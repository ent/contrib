// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/contrib/entproto/internal/entprototest/ent/allmethodsservice"
	"entgo.io/contrib/entproto/internal/entprototest/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AllMethodsServiceDelete is the builder for deleting a AllMethodsService entity.
type AllMethodsServiceDelete struct {
	config
	hooks    []Hook
	mutation *AllMethodsServiceMutation
}

// Where appends a list predicates to the AllMethodsServiceDelete builder.
func (amsd *AllMethodsServiceDelete) Where(ps ...predicate.AllMethodsService) *AllMethodsServiceDelete {
	amsd.mutation.Where(ps...)
	return amsd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (amsd *AllMethodsServiceDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, amsd.sqlExec, amsd.mutation, amsd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (amsd *AllMethodsServiceDelete) ExecX(ctx context.Context) int {
	n, err := amsd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (amsd *AllMethodsServiceDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(allmethodsservice.Table, sqlgraph.NewFieldSpec(allmethodsservice.FieldID, field.TypeInt))
	if ps := amsd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, amsd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	amsd.mutation.done = true
	return affected, err
}

// AllMethodsServiceDeleteOne is the builder for deleting a single AllMethodsService entity.
type AllMethodsServiceDeleteOne struct {
	amsd *AllMethodsServiceDelete
}

// Where appends a list predicates to the AllMethodsServiceDelete builder.
func (amsdo *AllMethodsServiceDeleteOne) Where(ps ...predicate.AllMethodsService) *AllMethodsServiceDeleteOne {
	amsdo.amsd.mutation.Where(ps...)
	return amsdo
}

// Exec executes the deletion query.
func (amsdo *AllMethodsServiceDeleteOne) Exec(ctx context.Context) error {
	n, err := amsdo.amsd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{allmethodsservice.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (amsdo *AllMethodsServiceDeleteOne) ExecX(ctx context.Context) {
	if err := amsdo.Exec(ctx); err != nil {
		panic(err)
	}
}
