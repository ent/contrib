// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/contrib/entproto/internal/entprototest/ent/servicewithid"
	"entgo.io/ent/dialect/sql"
)

// ServiceWithID is the model entity for the ServiceWithID schema.
type ServiceWithID struct {
	config
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ServiceWithID) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case servicewithid.FieldID:
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ServiceWithID", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ServiceWithID fields.
func (swi *ServiceWithID) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case servicewithid.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			swi.ID = int32(value.Int64)
		}
	}
	return nil
}

// Update returns a builder for updating this ServiceWithID.
// Note that you need to call ServiceWithID.Unwrap() before calling this method if this ServiceWithID
// was returned from a transaction, and the transaction was committed or rolled back.
func (swi *ServiceWithID) Update() *ServiceWithIDUpdateOne {
	return (&ServiceWithIDClient{config: swi.config}).UpdateOne(swi)
}

// Unwrap unwraps the ServiceWithID entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (swi *ServiceWithID) Unwrap() *ServiceWithID {
	_tx, ok := swi.config.driver.(*txDriver)
	if !ok {
		panic("ent: ServiceWithID is not a transactional entity")
	}
	swi.config.driver = _tx.drv
	return swi
}

// String implements the fmt.Stringer.
func (swi *ServiceWithID) String() string {
	var builder strings.Builder
	builder.WriteString("ServiceWithID(")
	builder.WriteString(fmt.Sprintf("id=%v", swi.ID))
	builder.WriteByte(')')
	return builder.String()
}

// ServiceWithIDs is a parsable slice of ServiceWithID.
type ServiceWithIDs []*ServiceWithID

func (swi ServiceWithIDs) config(cfg config) {
	for _i := range swi {
		swi[_i].config = cfg
	}
}
