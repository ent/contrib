// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/contrib/entproto/internal/entprototest/ent/messagewithoptionals"
	"entgo.io/contrib/entproto/internal/entprototest/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// MessageWithOptionalsUpdate is the builder for updating MessageWithOptionals entities.
type MessageWithOptionalsUpdate struct {
	config
	hooks    []Hook
	mutation *MessageWithOptionalsMutation
}

// Where adds a new predicate for the MessageWithOptionalsUpdate builder.
func (mwou *MessageWithOptionalsUpdate) Where(ps ...predicate.MessageWithOptionals) *MessageWithOptionalsUpdate {
	mwou.mutation.predicates = append(mwou.mutation.predicates, ps...)
	return mwou
}

// SetStrField sets the "str_field" field.
func (mwou *MessageWithOptionalsUpdate) SetStrField(s string) *MessageWithOptionalsUpdate {
	mwou.mutation.SetStrField(s)
	return mwou
}

// SetNillableStrField sets the "str_field" field if the given value is not nil.
func (mwou *MessageWithOptionalsUpdate) SetNillableStrField(s *string) *MessageWithOptionalsUpdate {
	if s != nil {
		mwou.SetStrField(*s)
	}
	return mwou
}

// ClearStrField clears the value of the "str_field" field.
func (mwou *MessageWithOptionalsUpdate) ClearStrField() *MessageWithOptionalsUpdate {
	mwou.mutation.ClearStrField()
	return mwou
}

// SetIntField sets the "int_field" field.
func (mwou *MessageWithOptionalsUpdate) SetIntField(i int8) *MessageWithOptionalsUpdate {
	mwou.mutation.ResetIntField()
	mwou.mutation.SetIntField(i)
	return mwou
}

// SetNillableIntField sets the "int_field" field if the given value is not nil.
func (mwou *MessageWithOptionalsUpdate) SetNillableIntField(i *int8) *MessageWithOptionalsUpdate {
	if i != nil {
		mwou.SetIntField(*i)
	}
	return mwou
}

// AddIntField adds i to the "int_field" field.
func (mwou *MessageWithOptionalsUpdate) AddIntField(i int8) *MessageWithOptionalsUpdate {
	mwou.mutation.AddIntField(i)
	return mwou
}

// ClearIntField clears the value of the "int_field" field.
func (mwou *MessageWithOptionalsUpdate) ClearIntField() *MessageWithOptionalsUpdate {
	mwou.mutation.ClearIntField()
	return mwou
}

// SetUintField sets the "uint_field" field.
func (mwou *MessageWithOptionalsUpdate) SetUintField(u uint8) *MessageWithOptionalsUpdate {
	mwou.mutation.ResetUintField()
	mwou.mutation.SetUintField(u)
	return mwou
}

// SetNillableUintField sets the "uint_field" field if the given value is not nil.
func (mwou *MessageWithOptionalsUpdate) SetNillableUintField(u *uint8) *MessageWithOptionalsUpdate {
	if u != nil {
		mwou.SetUintField(*u)
	}
	return mwou
}

// AddUintField adds u to the "uint_field" field.
func (mwou *MessageWithOptionalsUpdate) AddUintField(u uint8) *MessageWithOptionalsUpdate {
	mwou.mutation.AddUintField(u)
	return mwou
}

// ClearUintField clears the value of the "uint_field" field.
func (mwou *MessageWithOptionalsUpdate) ClearUintField() *MessageWithOptionalsUpdate {
	mwou.mutation.ClearUintField()
	return mwou
}

// SetFloatField sets the "float_field" field.
func (mwou *MessageWithOptionalsUpdate) SetFloatField(f float32) *MessageWithOptionalsUpdate {
	mwou.mutation.ResetFloatField()
	mwou.mutation.SetFloatField(f)
	return mwou
}

// SetNillableFloatField sets the "float_field" field if the given value is not nil.
func (mwou *MessageWithOptionalsUpdate) SetNillableFloatField(f *float32) *MessageWithOptionalsUpdate {
	if f != nil {
		mwou.SetFloatField(*f)
	}
	return mwou
}

// AddFloatField adds f to the "float_field" field.
func (mwou *MessageWithOptionalsUpdate) AddFloatField(f float32) *MessageWithOptionalsUpdate {
	mwou.mutation.AddFloatField(f)
	return mwou
}

// ClearFloatField clears the value of the "float_field" field.
func (mwou *MessageWithOptionalsUpdate) ClearFloatField() *MessageWithOptionalsUpdate {
	mwou.mutation.ClearFloatField()
	return mwou
}

// SetBoolField sets the "bool_field" field.
func (mwou *MessageWithOptionalsUpdate) SetBoolField(b bool) *MessageWithOptionalsUpdate {
	mwou.mutation.SetBoolField(b)
	return mwou
}

// SetNillableBoolField sets the "bool_field" field if the given value is not nil.
func (mwou *MessageWithOptionalsUpdate) SetNillableBoolField(b *bool) *MessageWithOptionalsUpdate {
	if b != nil {
		mwou.SetBoolField(*b)
	}
	return mwou
}

// ClearBoolField clears the value of the "bool_field" field.
func (mwou *MessageWithOptionalsUpdate) ClearBoolField() *MessageWithOptionalsUpdate {
	mwou.mutation.ClearBoolField()
	return mwou
}

// SetBytesField sets the "bytes_field" field.
func (mwou *MessageWithOptionalsUpdate) SetBytesField(b []byte) *MessageWithOptionalsUpdate {
	mwou.mutation.SetBytesField(b)
	return mwou
}

// ClearBytesField clears the value of the "bytes_field" field.
func (mwou *MessageWithOptionalsUpdate) ClearBytesField() *MessageWithOptionalsUpdate {
	mwou.mutation.ClearBytesField()
	return mwou
}

// SetUUIDField sets the "uuid_field" field.
func (mwou *MessageWithOptionalsUpdate) SetUUIDField(u uuid.UUID) *MessageWithOptionalsUpdate {
	mwou.mutation.SetUUIDField(u)
	return mwou
}

// ClearUUIDField clears the value of the "uuid_field" field.
func (mwou *MessageWithOptionalsUpdate) ClearUUIDField() *MessageWithOptionalsUpdate {
	mwou.mutation.ClearUUIDField()
	return mwou
}

// Mutation returns the MessageWithOptionalsMutation object of the builder.
func (mwou *MessageWithOptionalsUpdate) Mutation() *MessageWithOptionalsMutation {
	return mwou.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mwou *MessageWithOptionalsUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(mwou.hooks) == 0 {
		affected, err = mwou.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MessageWithOptionalsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mwou.mutation = mutation
			affected, err = mwou.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mwou.hooks) - 1; i >= 0; i-- {
			mut = mwou.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mwou.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mwou *MessageWithOptionalsUpdate) SaveX(ctx context.Context) int {
	affected, err := mwou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mwou *MessageWithOptionalsUpdate) Exec(ctx context.Context) error {
	_, err := mwou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mwou *MessageWithOptionalsUpdate) ExecX(ctx context.Context) {
	if err := mwou.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mwou *MessageWithOptionalsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   messagewithoptionals.Table,
			Columns: messagewithoptionals.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: messagewithoptionals.FieldID,
			},
		},
	}
	if ps := mwou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mwou.mutation.StrField(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: messagewithoptionals.FieldStrField,
		})
	}
	if mwou.mutation.StrFieldCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: messagewithoptionals.FieldStrField,
		})
	}
	if value, ok := mwou.mutation.IntField(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: messagewithoptionals.FieldIntField,
		})
	}
	if value, ok := mwou.mutation.AddedIntField(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: messagewithoptionals.FieldIntField,
		})
	}
	if mwou.mutation.IntFieldCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Column: messagewithoptionals.FieldIntField,
		})
	}
	if value, ok := mwou.mutation.UintField(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: messagewithoptionals.FieldUintField,
		})
	}
	if value, ok := mwou.mutation.AddedUintField(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: messagewithoptionals.FieldUintField,
		})
	}
	if mwou.mutation.UintFieldCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Column: messagewithoptionals.FieldUintField,
		})
	}
	if value, ok := mwou.mutation.FloatField(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: messagewithoptionals.FieldFloatField,
		})
	}
	if value, ok := mwou.mutation.AddedFloatField(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: messagewithoptionals.FieldFloatField,
		})
	}
	if mwou.mutation.FloatFieldCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Column: messagewithoptionals.FieldFloatField,
		})
	}
	if value, ok := mwou.mutation.BoolField(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: messagewithoptionals.FieldBoolField,
		})
	}
	if mwou.mutation.BoolFieldCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: messagewithoptionals.FieldBoolField,
		})
	}
	if value, ok := mwou.mutation.BytesField(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: messagewithoptionals.FieldBytesField,
		})
	}
	if mwou.mutation.BytesFieldCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Column: messagewithoptionals.FieldBytesField,
		})
	}
	if value, ok := mwou.mutation.UUIDField(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: messagewithoptionals.FieldUUIDField,
		})
	}
	if mwou.mutation.UUIDFieldCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: messagewithoptionals.FieldUUIDField,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mwou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{messagewithoptionals.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// MessageWithOptionalsUpdateOne is the builder for updating a single MessageWithOptionals entity.
type MessageWithOptionalsUpdateOne struct {
	config
	hooks    []Hook
	mutation *MessageWithOptionalsMutation
}

// SetStrField sets the "str_field" field.
func (mwouo *MessageWithOptionalsUpdateOne) SetStrField(s string) *MessageWithOptionalsUpdateOne {
	mwouo.mutation.SetStrField(s)
	return mwouo
}

// SetNillableStrField sets the "str_field" field if the given value is not nil.
func (mwouo *MessageWithOptionalsUpdateOne) SetNillableStrField(s *string) *MessageWithOptionalsUpdateOne {
	if s != nil {
		mwouo.SetStrField(*s)
	}
	return mwouo
}

// ClearStrField clears the value of the "str_field" field.
func (mwouo *MessageWithOptionalsUpdateOne) ClearStrField() *MessageWithOptionalsUpdateOne {
	mwouo.mutation.ClearStrField()
	return mwouo
}

// SetIntField sets the "int_field" field.
func (mwouo *MessageWithOptionalsUpdateOne) SetIntField(i int8) *MessageWithOptionalsUpdateOne {
	mwouo.mutation.ResetIntField()
	mwouo.mutation.SetIntField(i)
	return mwouo
}

// SetNillableIntField sets the "int_field" field if the given value is not nil.
func (mwouo *MessageWithOptionalsUpdateOne) SetNillableIntField(i *int8) *MessageWithOptionalsUpdateOne {
	if i != nil {
		mwouo.SetIntField(*i)
	}
	return mwouo
}

// AddIntField adds i to the "int_field" field.
func (mwouo *MessageWithOptionalsUpdateOne) AddIntField(i int8) *MessageWithOptionalsUpdateOne {
	mwouo.mutation.AddIntField(i)
	return mwouo
}

// ClearIntField clears the value of the "int_field" field.
func (mwouo *MessageWithOptionalsUpdateOne) ClearIntField() *MessageWithOptionalsUpdateOne {
	mwouo.mutation.ClearIntField()
	return mwouo
}

// SetUintField sets the "uint_field" field.
func (mwouo *MessageWithOptionalsUpdateOne) SetUintField(u uint8) *MessageWithOptionalsUpdateOne {
	mwouo.mutation.ResetUintField()
	mwouo.mutation.SetUintField(u)
	return mwouo
}

// SetNillableUintField sets the "uint_field" field if the given value is not nil.
func (mwouo *MessageWithOptionalsUpdateOne) SetNillableUintField(u *uint8) *MessageWithOptionalsUpdateOne {
	if u != nil {
		mwouo.SetUintField(*u)
	}
	return mwouo
}

// AddUintField adds u to the "uint_field" field.
func (mwouo *MessageWithOptionalsUpdateOne) AddUintField(u uint8) *MessageWithOptionalsUpdateOne {
	mwouo.mutation.AddUintField(u)
	return mwouo
}

// ClearUintField clears the value of the "uint_field" field.
func (mwouo *MessageWithOptionalsUpdateOne) ClearUintField() *MessageWithOptionalsUpdateOne {
	mwouo.mutation.ClearUintField()
	return mwouo
}

// SetFloatField sets the "float_field" field.
func (mwouo *MessageWithOptionalsUpdateOne) SetFloatField(f float32) *MessageWithOptionalsUpdateOne {
	mwouo.mutation.ResetFloatField()
	mwouo.mutation.SetFloatField(f)
	return mwouo
}

// SetNillableFloatField sets the "float_field" field if the given value is not nil.
func (mwouo *MessageWithOptionalsUpdateOne) SetNillableFloatField(f *float32) *MessageWithOptionalsUpdateOne {
	if f != nil {
		mwouo.SetFloatField(*f)
	}
	return mwouo
}

// AddFloatField adds f to the "float_field" field.
func (mwouo *MessageWithOptionalsUpdateOne) AddFloatField(f float32) *MessageWithOptionalsUpdateOne {
	mwouo.mutation.AddFloatField(f)
	return mwouo
}

// ClearFloatField clears the value of the "float_field" field.
func (mwouo *MessageWithOptionalsUpdateOne) ClearFloatField() *MessageWithOptionalsUpdateOne {
	mwouo.mutation.ClearFloatField()
	return mwouo
}

// SetBoolField sets the "bool_field" field.
func (mwouo *MessageWithOptionalsUpdateOne) SetBoolField(b bool) *MessageWithOptionalsUpdateOne {
	mwouo.mutation.SetBoolField(b)
	return mwouo
}

// SetNillableBoolField sets the "bool_field" field if the given value is not nil.
func (mwouo *MessageWithOptionalsUpdateOne) SetNillableBoolField(b *bool) *MessageWithOptionalsUpdateOne {
	if b != nil {
		mwouo.SetBoolField(*b)
	}
	return mwouo
}

// ClearBoolField clears the value of the "bool_field" field.
func (mwouo *MessageWithOptionalsUpdateOne) ClearBoolField() *MessageWithOptionalsUpdateOne {
	mwouo.mutation.ClearBoolField()
	return mwouo
}

// SetBytesField sets the "bytes_field" field.
func (mwouo *MessageWithOptionalsUpdateOne) SetBytesField(b []byte) *MessageWithOptionalsUpdateOne {
	mwouo.mutation.SetBytesField(b)
	return mwouo
}

// ClearBytesField clears the value of the "bytes_field" field.
func (mwouo *MessageWithOptionalsUpdateOne) ClearBytesField() *MessageWithOptionalsUpdateOne {
	mwouo.mutation.ClearBytesField()
	return mwouo
}

// SetUUIDField sets the "uuid_field" field.
func (mwouo *MessageWithOptionalsUpdateOne) SetUUIDField(u uuid.UUID) *MessageWithOptionalsUpdateOne {
	mwouo.mutation.SetUUIDField(u)
	return mwouo
}

// ClearUUIDField clears the value of the "uuid_field" field.
func (mwouo *MessageWithOptionalsUpdateOne) ClearUUIDField() *MessageWithOptionalsUpdateOne {
	mwouo.mutation.ClearUUIDField()
	return mwouo
}

// Mutation returns the MessageWithOptionalsMutation object of the builder.
func (mwouo *MessageWithOptionalsUpdateOne) Mutation() *MessageWithOptionalsMutation {
	return mwouo.mutation
}

// Save executes the query and returns the updated MessageWithOptionals entity.
func (mwouo *MessageWithOptionalsUpdateOne) Save(ctx context.Context) (*MessageWithOptionals, error) {
	var (
		err  error
		node *MessageWithOptionals
	)
	if len(mwouo.hooks) == 0 {
		node, err = mwouo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MessageWithOptionalsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mwouo.mutation = mutation
			node, err = mwouo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mwouo.hooks) - 1; i >= 0; i-- {
			mut = mwouo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mwouo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (mwouo *MessageWithOptionalsUpdateOne) SaveX(ctx context.Context) *MessageWithOptionals {
	node, err := mwouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mwouo *MessageWithOptionalsUpdateOne) Exec(ctx context.Context) error {
	_, err := mwouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mwouo *MessageWithOptionalsUpdateOne) ExecX(ctx context.Context) {
	if err := mwouo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mwouo *MessageWithOptionalsUpdateOne) sqlSave(ctx context.Context) (_node *MessageWithOptionals, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   messagewithoptionals.Table,
			Columns: messagewithoptionals.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: messagewithoptionals.FieldID,
			},
		},
	}
	id, ok := mwouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing MessageWithOptionals.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := mwouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mwouo.mutation.StrField(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: messagewithoptionals.FieldStrField,
		})
	}
	if mwouo.mutation.StrFieldCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: messagewithoptionals.FieldStrField,
		})
	}
	if value, ok := mwouo.mutation.IntField(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: messagewithoptionals.FieldIntField,
		})
	}
	if value, ok := mwouo.mutation.AddedIntField(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: messagewithoptionals.FieldIntField,
		})
	}
	if mwouo.mutation.IntFieldCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Column: messagewithoptionals.FieldIntField,
		})
	}
	if value, ok := mwouo.mutation.UintField(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: messagewithoptionals.FieldUintField,
		})
	}
	if value, ok := mwouo.mutation.AddedUintField(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: messagewithoptionals.FieldUintField,
		})
	}
	if mwouo.mutation.UintFieldCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Column: messagewithoptionals.FieldUintField,
		})
	}
	if value, ok := mwouo.mutation.FloatField(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: messagewithoptionals.FieldFloatField,
		})
	}
	if value, ok := mwouo.mutation.AddedFloatField(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: messagewithoptionals.FieldFloatField,
		})
	}
	if mwouo.mutation.FloatFieldCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Column: messagewithoptionals.FieldFloatField,
		})
	}
	if value, ok := mwouo.mutation.BoolField(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: messagewithoptionals.FieldBoolField,
		})
	}
	if mwouo.mutation.BoolFieldCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: messagewithoptionals.FieldBoolField,
		})
	}
	if value, ok := mwouo.mutation.BytesField(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: messagewithoptionals.FieldBytesField,
		})
	}
	if mwouo.mutation.BytesFieldCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Column: messagewithoptionals.FieldBytesField,
		})
	}
	if value, ok := mwouo.mutation.UUIDField(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: messagewithoptionals.FieldUUIDField,
		})
	}
	if mwouo.mutation.UUIDFieldCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: messagewithoptionals.FieldUUIDField,
		})
	}
	_node = &MessageWithOptionals{config: mwouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mwouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{messagewithoptionals.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
