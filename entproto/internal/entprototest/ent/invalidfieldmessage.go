// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/contrib/entproto/internal/entprototest/ent/invalidfieldmessage"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// InvalidFieldMessage is the model entity for the InvalidFieldMessage schema.
type InvalidFieldMessage struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Hello holds the value of the "hello" field.
	Hello uuid.UUID `json:"hello,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*InvalidFieldMessage) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case invalidfieldmessage.FieldID:
			values[i] = &sql.NullInt64{}
		case invalidfieldmessage.FieldHello:
			values[i] = &uuid.UUID{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type InvalidFieldMessage", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the InvalidFieldMessage fields.
func (ifm *InvalidFieldMessage) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case invalidfieldmessage.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ifm.ID = int(value.Int64)
		case invalidfieldmessage.FieldHello:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field hello", values[i])
			} else if value != nil {
				ifm.Hello = *value
			}
		}
	}
	return nil
}

// Update returns a builder for updating this InvalidFieldMessage.
// Note that you need to call InvalidFieldMessage.Unwrap() before calling this method if this InvalidFieldMessage
// was returned from a transaction, and the transaction was committed or rolled back.
func (ifm *InvalidFieldMessage) Update() *InvalidFieldMessageUpdateOne {
	return (&InvalidFieldMessageClient{config: ifm.config}).UpdateOne(ifm)
}

// Unwrap unwraps the InvalidFieldMessage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ifm *InvalidFieldMessage) Unwrap() *InvalidFieldMessage {
	tx, ok := ifm.config.driver.(*txDriver)
	if !ok {
		panic("ent: InvalidFieldMessage is not a transactional entity")
	}
	ifm.config.driver = tx.drv
	return ifm
}

// String implements the fmt.Stringer.
func (ifm *InvalidFieldMessage) String() string {
	var builder strings.Builder
	builder.WriteString("InvalidFieldMessage(")
	builder.WriteString(fmt.Sprintf("id=%v", ifm.ID))
	builder.WriteString(", hello=")
	builder.WriteString(fmt.Sprintf("%v", ifm.Hello))
	builder.WriteByte(')')
	return builder.String()
}

// InvalidFieldMessages is a parsable slice of InvalidFieldMessage.
type InvalidFieldMessages []*InvalidFieldMessage

func (ifm InvalidFieldMessages) config(cfg config) {
	for _i := range ifm {
		ifm[_i].config = cfg
	}
}
