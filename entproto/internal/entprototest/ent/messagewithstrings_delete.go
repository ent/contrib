// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/contrib/entproto/internal/entprototest/ent/messagewithstrings"
	"entgo.io/contrib/entproto/internal/entprototest/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MessageWithStringsDelete is the builder for deleting a MessageWithStrings entity.
type MessageWithStringsDelete struct {
	config
	hooks    []Hook
	mutation *MessageWithStringsMutation
}

// Where appends a list predicates to the MessageWithStringsDelete builder.
func (mwsd *MessageWithStringsDelete) Where(ps ...predicate.MessageWithStrings) *MessageWithStringsDelete {
	mwsd.mutation.Where(ps...)
	return mwsd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (mwsd *MessageWithStringsDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, mwsd.sqlExec, mwsd.mutation, mwsd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (mwsd *MessageWithStringsDelete) ExecX(ctx context.Context) int {
	n, err := mwsd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (mwsd *MessageWithStringsDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(messagewithstrings.Table, sqlgraph.NewFieldSpec(messagewithstrings.FieldID, field.TypeInt))
	if ps := mwsd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, mwsd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	mwsd.mutation.done = true
	return affected, err
}

// MessageWithStringsDeleteOne is the builder for deleting a single MessageWithStrings entity.
type MessageWithStringsDeleteOne struct {
	mwsd *MessageWithStringsDelete
}

// Where appends a list predicates to the MessageWithStringsDelete builder.
func (mwsdo *MessageWithStringsDeleteOne) Where(ps ...predicate.MessageWithStrings) *MessageWithStringsDeleteOne {
	mwsdo.mwsd.mutation.Where(ps...)
	return mwsdo
}

// Exec executes the deletion query.
func (mwsdo *MessageWithStringsDeleteOne) Exec(ctx context.Context) error {
	n, err := mwsdo.mwsd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{messagewithstrings.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (mwsdo *MessageWithStringsDeleteOne) ExecX(ctx context.Context) {
	if err := mwsdo.Exec(ctx); err != nil {
		panic(err)
	}
}
