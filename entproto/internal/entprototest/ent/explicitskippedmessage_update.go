// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/contrib/entproto/internal/entprototest/ent/explicitskippedmessage"
	"entgo.io/contrib/entproto/internal/entprototest/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExplicitSkippedMessageUpdate is the builder for updating ExplicitSkippedMessage entities.
type ExplicitSkippedMessageUpdate struct {
	config
	hooks    []Hook
	mutation *ExplicitSkippedMessageMutation
}

// Where adds a new predicate for the ExplicitSkippedMessageUpdate builder.
func (esmu *ExplicitSkippedMessageUpdate) Where(ps ...predicate.ExplicitSkippedMessage) *ExplicitSkippedMessageUpdate {
	esmu.mutation.predicates = append(esmu.mutation.predicates, ps...)
	return esmu
}

// Mutation returns the ExplicitSkippedMessageMutation object of the builder.
func (esmu *ExplicitSkippedMessageUpdate) Mutation() *ExplicitSkippedMessageMutation {
	return esmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (esmu *ExplicitSkippedMessageUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(esmu.hooks) == 0 {
		affected, err = esmu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ExplicitSkippedMessageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			esmu.mutation = mutation
			affected, err = esmu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(esmu.hooks) - 1; i >= 0; i-- {
			mut = esmu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, esmu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (esmu *ExplicitSkippedMessageUpdate) SaveX(ctx context.Context) int {
	affected, err := esmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (esmu *ExplicitSkippedMessageUpdate) Exec(ctx context.Context) error {
	_, err := esmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (esmu *ExplicitSkippedMessageUpdate) ExecX(ctx context.Context) {
	if err := esmu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (esmu *ExplicitSkippedMessageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   explicitskippedmessage.Table,
			Columns: explicitskippedmessage.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: explicitskippedmessage.FieldID,
			},
		},
	}
	if ps := esmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if n, err = sqlgraph.UpdateNodes(ctx, esmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{explicitskippedmessage.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ExplicitSkippedMessageUpdateOne is the builder for updating a single ExplicitSkippedMessage entity.
type ExplicitSkippedMessageUpdateOne struct {
	config
	hooks    []Hook
	mutation *ExplicitSkippedMessageMutation
}

// Mutation returns the ExplicitSkippedMessageMutation object of the builder.
func (esmuo *ExplicitSkippedMessageUpdateOne) Mutation() *ExplicitSkippedMessageMutation {
	return esmuo.mutation
}

// Save executes the query and returns the updated ExplicitSkippedMessage entity.
func (esmuo *ExplicitSkippedMessageUpdateOne) Save(ctx context.Context) (*ExplicitSkippedMessage, error) {
	var (
		err  error
		node *ExplicitSkippedMessage
	)
	if len(esmuo.hooks) == 0 {
		node, err = esmuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ExplicitSkippedMessageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			esmuo.mutation = mutation
			node, err = esmuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(esmuo.hooks) - 1; i >= 0; i-- {
			mut = esmuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, esmuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (esmuo *ExplicitSkippedMessageUpdateOne) SaveX(ctx context.Context) *ExplicitSkippedMessage {
	node, err := esmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (esmuo *ExplicitSkippedMessageUpdateOne) Exec(ctx context.Context) error {
	_, err := esmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (esmuo *ExplicitSkippedMessageUpdateOne) ExecX(ctx context.Context) {
	if err := esmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (esmuo *ExplicitSkippedMessageUpdateOne) sqlSave(ctx context.Context) (_node *ExplicitSkippedMessage, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   explicitskippedmessage.Table,
			Columns: explicitskippedmessage.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: explicitskippedmessage.FieldID,
			},
		},
	}
	id, ok := esmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ExplicitSkippedMessage.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := esmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_node = &ExplicitSkippedMessage{config: esmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, esmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{explicitskippedmessage.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
