// Code generated by ent, DO NOT EDIT.

package messagewithenum

import (
	"entgo.io/contrib/entproto/internal/entprototest/ent/predicate"
	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.MessageWithEnum {
	return predicate.MessageWithEnum(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.MessageWithEnum {
	return predicate.MessageWithEnum(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.MessageWithEnum {
	return predicate.MessageWithEnum(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.MessageWithEnum {
	return predicate.MessageWithEnum(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.MessageWithEnum {
	return predicate.MessageWithEnum(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.MessageWithEnum {
	return predicate.MessageWithEnum(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.MessageWithEnum {
	return predicate.MessageWithEnum(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.MessageWithEnum {
	return predicate.MessageWithEnum(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.MessageWithEnum {
	return predicate.MessageWithEnum(sql.FieldLTE(FieldID, id))
}

// EnumTypeEQ applies the EQ predicate on the "enum_type" field.
func EnumTypeEQ(v EnumType) predicate.MessageWithEnum {
	return predicate.MessageWithEnum(sql.FieldEQ(FieldEnumType, v))
}

// EnumTypeNEQ applies the NEQ predicate on the "enum_type" field.
func EnumTypeNEQ(v EnumType) predicate.MessageWithEnum {
	return predicate.MessageWithEnum(sql.FieldNEQ(FieldEnumType, v))
}

// EnumTypeIn applies the In predicate on the "enum_type" field.
func EnumTypeIn(vs ...EnumType) predicate.MessageWithEnum {
	return predicate.MessageWithEnum(sql.FieldIn(FieldEnumType, vs...))
}

// EnumTypeNotIn applies the NotIn predicate on the "enum_type" field.
func EnumTypeNotIn(vs ...EnumType) predicate.MessageWithEnum {
	return predicate.MessageWithEnum(sql.FieldNotIn(FieldEnumType, vs...))
}

// EnumWithoutDefaultEQ applies the EQ predicate on the "enum_without_default" field.
func EnumWithoutDefaultEQ(v EnumWithoutDefault) predicate.MessageWithEnum {
	return predicate.MessageWithEnum(sql.FieldEQ(FieldEnumWithoutDefault, v))
}

// EnumWithoutDefaultNEQ applies the NEQ predicate on the "enum_without_default" field.
func EnumWithoutDefaultNEQ(v EnumWithoutDefault) predicate.MessageWithEnum {
	return predicate.MessageWithEnum(sql.FieldNEQ(FieldEnumWithoutDefault, v))
}

// EnumWithoutDefaultIn applies the In predicate on the "enum_without_default" field.
func EnumWithoutDefaultIn(vs ...EnumWithoutDefault) predicate.MessageWithEnum {
	return predicate.MessageWithEnum(sql.FieldIn(FieldEnumWithoutDefault, vs...))
}

// EnumWithoutDefaultNotIn applies the NotIn predicate on the "enum_without_default" field.
func EnumWithoutDefaultNotIn(vs ...EnumWithoutDefault) predicate.MessageWithEnum {
	return predicate.MessageWithEnum(sql.FieldNotIn(FieldEnumWithoutDefault, vs...))
}

// EnumWithSpecialCharactersEQ applies the EQ predicate on the "enum_with_special_characters" field.
func EnumWithSpecialCharactersEQ(v EnumWithSpecialCharacters) predicate.MessageWithEnum {
	return predicate.MessageWithEnum(sql.FieldEQ(FieldEnumWithSpecialCharacters, v))
}

// EnumWithSpecialCharactersNEQ applies the NEQ predicate on the "enum_with_special_characters" field.
func EnumWithSpecialCharactersNEQ(v EnumWithSpecialCharacters) predicate.MessageWithEnum {
	return predicate.MessageWithEnum(sql.FieldNEQ(FieldEnumWithSpecialCharacters, v))
}

// EnumWithSpecialCharactersIn applies the In predicate on the "enum_with_special_characters" field.
func EnumWithSpecialCharactersIn(vs ...EnumWithSpecialCharacters) predicate.MessageWithEnum {
	return predicate.MessageWithEnum(sql.FieldIn(FieldEnumWithSpecialCharacters, vs...))
}

// EnumWithSpecialCharactersNotIn applies the NotIn predicate on the "enum_with_special_characters" field.
func EnumWithSpecialCharactersNotIn(vs ...EnumWithSpecialCharacters) predicate.MessageWithEnum {
	return predicate.MessageWithEnum(sql.FieldNotIn(FieldEnumWithSpecialCharacters, vs...))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MessageWithEnum) predicate.MessageWithEnum {
	return predicate.MessageWithEnum(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MessageWithEnum) predicate.MessageWithEnum {
	return predicate.MessageWithEnum(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MessageWithEnum) predicate.MessageWithEnum {
	return predicate.MessageWithEnum(sql.NotPredicates(p))
}
