// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/contrib/entproto/internal/entprototest/ent/messagewithoptionals"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// MessageWithOptionals is the model entity for the MessageWithOptionals schema.
type MessageWithOptionals struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// StrOptional holds the value of the "str_optional" field.
	StrOptional string `json:"str_optional,omitempty"`
	// IntOptional holds the value of the "int_optional" field.
	IntOptional int8 `json:"int_optional,omitempty"`
	// UintOptional holds the value of the "uint_optional" field.
	UintOptional uint8 `json:"uint_optional,omitempty"`
	// FloatOptional holds the value of the "float_optional" field.
	FloatOptional float32 `json:"float_optional,omitempty"`
	// BoolOptional holds the value of the "bool_optional" field.
	BoolOptional bool `json:"bool_optional,omitempty"`
	// BytesOptional holds the value of the "bytes_optional" field.
	BytesOptional []byte `json:"bytes_optional,omitempty"`
	// UUIDOptional holds the value of the "uuid_optional" field.
	UUIDOptional uuid.UUID `json:"uuid_optional,omitempty"`
	// TimeOptional holds the value of the "time_optional" field.
	TimeOptional time.Time `json:"time_optional,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MessageWithOptionals) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case messagewithoptionals.FieldBytesOptional:
			values[i] = &[]byte{}
		case messagewithoptionals.FieldBoolOptional:
			values[i] = &sql.NullBool{}
		case messagewithoptionals.FieldFloatOptional:
			values[i] = &sql.NullFloat64{}
		case messagewithoptionals.FieldID, messagewithoptionals.FieldIntOptional, messagewithoptionals.FieldUintOptional:
			values[i] = &sql.NullInt64{}
		case messagewithoptionals.FieldStrOptional:
			values[i] = &sql.NullString{}
		case messagewithoptionals.FieldTimeOptional:
			values[i] = &sql.NullTime{}
		case messagewithoptionals.FieldUUIDOptional:
			values[i] = &uuid.UUID{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type MessageWithOptionals", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MessageWithOptionals fields.
func (mwo *MessageWithOptionals) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case messagewithoptionals.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mwo.ID = int(value.Int64)
		case messagewithoptionals.FieldStrOptional:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field str_optional", values[i])
			} else if value.Valid {
				mwo.StrOptional = value.String
			}
		case messagewithoptionals.FieldIntOptional:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field int_optional", values[i])
			} else if value.Valid {
				mwo.IntOptional = int8(value.Int64)
			}
		case messagewithoptionals.FieldUintOptional:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field uint_optional", values[i])
			} else if value.Valid {
				mwo.UintOptional = uint8(value.Int64)
			}
		case messagewithoptionals.FieldFloatOptional:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field float_optional", values[i])
			} else if value.Valid {
				mwo.FloatOptional = float32(value.Float64)
			}
		case messagewithoptionals.FieldBoolOptional:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field bool_optional", values[i])
			} else if value.Valid {
				mwo.BoolOptional = value.Bool
			}
		case messagewithoptionals.FieldBytesOptional:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field bytes_optional", values[i])
			} else if value != nil {
				mwo.BytesOptional = *value
			}
		case messagewithoptionals.FieldUUIDOptional:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field uuid_optional", values[i])
			} else if value != nil {
				mwo.UUIDOptional = *value
			}
		case messagewithoptionals.FieldTimeOptional:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field time_optional", values[i])
			} else if value.Valid {
				mwo.TimeOptional = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this MessageWithOptionals.
// Note that you need to call MessageWithOptionals.Unwrap() before calling this method if this MessageWithOptionals
// was returned from a transaction, and the transaction was committed or rolled back.
func (mwo *MessageWithOptionals) Update() *MessageWithOptionalsUpdateOne {
	return (&MessageWithOptionalsClient{config: mwo.config}).UpdateOne(mwo)
}

// Unwrap unwraps the MessageWithOptionals entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mwo *MessageWithOptionals) Unwrap() *MessageWithOptionals {
	tx, ok := mwo.config.driver.(*txDriver)
	if !ok {
		panic("ent: MessageWithOptionals is not a transactional entity")
	}
	mwo.config.driver = tx.drv
	return mwo
}

// String implements the fmt.Stringer.
func (mwo *MessageWithOptionals) String() string {
	var builder strings.Builder
	builder.WriteString("MessageWithOptionals(")
	builder.WriteString(fmt.Sprintf("id=%v", mwo.ID))
	builder.WriteString(", str_optional=")
	builder.WriteString(mwo.StrOptional)
	builder.WriteString(", int_optional=")
	builder.WriteString(fmt.Sprintf("%v", mwo.IntOptional))
	builder.WriteString(", uint_optional=")
	builder.WriteString(fmt.Sprintf("%v", mwo.UintOptional))
	builder.WriteString(", float_optional=")
	builder.WriteString(fmt.Sprintf("%v", mwo.FloatOptional))
	builder.WriteString(", bool_optional=")
	builder.WriteString(fmt.Sprintf("%v", mwo.BoolOptional))
	builder.WriteString(", bytes_optional=")
	builder.WriteString(fmt.Sprintf("%v", mwo.BytesOptional))
	builder.WriteString(", uuid_optional=")
	builder.WriteString(fmt.Sprintf("%v", mwo.UUIDOptional))
	builder.WriteString(", time_optional=")
	builder.WriteString(mwo.TimeOptional.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// MessageWithOptionalsSlice is a parsable slice of MessageWithOptionals.
type MessageWithOptionalsSlice []*MessageWithOptionals

func (mwo MessageWithOptionalsSlice) config(cfg config) {
	for _i := range mwo {
		mwo[_i].config = cfg
	}
}
