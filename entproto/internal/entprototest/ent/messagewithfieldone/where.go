// Code generated by ent, DO NOT EDIT.

package messagewithfieldone

import (
	"entgo.io/contrib/entproto/internal/entprototest/ent/predicate"
	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.MessageWithFieldOne {
	return predicate.MessageWithFieldOne(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.MessageWithFieldOne {
	return predicate.MessageWithFieldOne(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.MessageWithFieldOne {
	return predicate.MessageWithFieldOne(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.MessageWithFieldOne {
	return predicate.MessageWithFieldOne(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.MessageWithFieldOne {
	return predicate.MessageWithFieldOne(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.MessageWithFieldOne {
	return predicate.MessageWithFieldOne(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.MessageWithFieldOne {
	return predicate.MessageWithFieldOne(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.MessageWithFieldOne {
	return predicate.MessageWithFieldOne(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.MessageWithFieldOne {
	return predicate.MessageWithFieldOne(sql.FieldLTE(FieldID, id))
}

// FieldOne applies equality check predicate on the "field_one" field. It's identical to FieldOneEQ.
func FieldOne(v int32) predicate.MessageWithFieldOne {
	return predicate.MessageWithFieldOne(sql.FieldEQ(FieldFieldOne, v))
}

// FieldOneEQ applies the EQ predicate on the "field_one" field.
func FieldOneEQ(v int32) predicate.MessageWithFieldOne {
	return predicate.MessageWithFieldOne(sql.FieldEQ(FieldFieldOne, v))
}

// FieldOneNEQ applies the NEQ predicate on the "field_one" field.
func FieldOneNEQ(v int32) predicate.MessageWithFieldOne {
	return predicate.MessageWithFieldOne(sql.FieldNEQ(FieldFieldOne, v))
}

// FieldOneIn applies the In predicate on the "field_one" field.
func FieldOneIn(vs ...int32) predicate.MessageWithFieldOne {
	return predicate.MessageWithFieldOne(sql.FieldIn(FieldFieldOne, vs...))
}

// FieldOneNotIn applies the NotIn predicate on the "field_one" field.
func FieldOneNotIn(vs ...int32) predicate.MessageWithFieldOne {
	return predicate.MessageWithFieldOne(sql.FieldNotIn(FieldFieldOne, vs...))
}

// FieldOneGT applies the GT predicate on the "field_one" field.
func FieldOneGT(v int32) predicate.MessageWithFieldOne {
	return predicate.MessageWithFieldOne(sql.FieldGT(FieldFieldOne, v))
}

// FieldOneGTE applies the GTE predicate on the "field_one" field.
func FieldOneGTE(v int32) predicate.MessageWithFieldOne {
	return predicate.MessageWithFieldOne(sql.FieldGTE(FieldFieldOne, v))
}

// FieldOneLT applies the LT predicate on the "field_one" field.
func FieldOneLT(v int32) predicate.MessageWithFieldOne {
	return predicate.MessageWithFieldOne(sql.FieldLT(FieldFieldOne, v))
}

// FieldOneLTE applies the LTE predicate on the "field_one" field.
func FieldOneLTE(v int32) predicate.MessageWithFieldOne {
	return predicate.MessageWithFieldOne(sql.FieldLTE(FieldFieldOne, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MessageWithFieldOne) predicate.MessageWithFieldOne {
	return predicate.MessageWithFieldOne(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MessageWithFieldOne) predicate.MessageWithFieldOne {
	return predicate.MessageWithFieldOne(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MessageWithFieldOne) predicate.MessageWithFieldOne {
	return predicate.MessageWithFieldOne(sql.NotPredicates(p))
}
