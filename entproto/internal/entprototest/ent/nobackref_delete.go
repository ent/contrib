// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/contrib/entproto/internal/entprototest/ent/nobackref"
	"entgo.io/contrib/entproto/internal/entprototest/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NoBackrefDelete is the builder for deleting a NoBackref entity.
type NoBackrefDelete struct {
	config
	hooks    []Hook
	mutation *NoBackrefMutation
}

// Where appends a list predicates to the NoBackrefDelete builder.
func (nbd *NoBackrefDelete) Where(ps ...predicate.NoBackref) *NoBackrefDelete {
	nbd.mutation.Where(ps...)
	return nbd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (nbd *NoBackrefDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, nbd.sqlExec, nbd.mutation, nbd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (nbd *NoBackrefDelete) ExecX(ctx context.Context) int {
	n, err := nbd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (nbd *NoBackrefDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(nobackref.Table, sqlgraph.NewFieldSpec(nobackref.FieldID, field.TypeInt))
	if ps := nbd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, nbd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	nbd.mutation.done = true
	return affected, err
}

// NoBackrefDeleteOne is the builder for deleting a single NoBackref entity.
type NoBackrefDeleteOne struct {
	nbd *NoBackrefDelete
}

// Where appends a list predicates to the NoBackrefDelete builder.
func (nbdo *NoBackrefDeleteOne) Where(ps ...predicate.NoBackref) *NoBackrefDeleteOne {
	nbdo.nbd.mutation.Where(ps...)
	return nbdo
}

// Exec executes the deletion query.
func (nbdo *NoBackrefDeleteOne) Exec(ctx context.Context) error {
	n, err := nbdo.nbd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{nobackref.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (nbdo *NoBackrefDeleteOne) ExecX(ctx context.Context) {
	if err := nbdo.Exec(ctx); err != nil {
		panic(err)
	}
}
