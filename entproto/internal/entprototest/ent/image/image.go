// Code generated by ent, DO NOT EDIT.

package image

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the image type in the database.
	Label = "image"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldURLPath holds the string denoting the url_path field in the database.
	FieldURLPath = "url_path"
	// EdgeUserProfilePic holds the string denoting the user_profile_pic edge name in mutations.
	EdgeUserProfilePic = "user_profile_pic"
	// Table holds the table name of the image in the database.
	Table = "images"
	// UserProfilePicTable is the table that holds the user_profile_pic relation/edge.
	UserProfilePicTable = "users"
	// UserProfilePicInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserProfilePicInverseTable = "users"
	// UserProfilePicColumn is the table column denoting the user_profile_pic relation/edge.
	UserProfilePicColumn = "user_profile_pic"
)

// Columns holds all SQL columns for image fields.
var Columns = []string{
	FieldID,
	FieldURLPath,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "images"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"no_backref_images",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Image queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByURLPath orders the results by the url_path field.
func ByURLPath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURLPath, opts...).ToFunc()
}

// ByUserProfilePicCount orders the results by user_profile_pic count.
func ByUserProfilePicCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserProfilePicStep(), opts...)
	}
}

// ByUserProfilePic orders the results by user_profile_pic terms.
func ByUserProfilePic(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserProfilePicStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserProfilePicStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserProfilePicInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, UserProfilePicTable, UserProfilePicColumn),
	)
}
