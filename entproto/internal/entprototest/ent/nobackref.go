// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/contrib/entproto/internal/entprototest/ent/nobackref"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// NoBackref is the model entity for the NoBackref schema.
type NoBackref struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NoBackrefQuery when eager-loading is set.
	Edges        NoBackrefEdges `json:"edges"`
	selectValues sql.SelectValues
}

// NoBackrefEdges holds the relations/edges for other nodes in the graph.
type NoBackrefEdges struct {
	// Images holds the value of the images edge.
	Images []*Image `json:"images,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ImagesOrErr returns the Images value or an error if the edge
// was not loaded in eager-loading.
func (e NoBackrefEdges) ImagesOrErr() ([]*Image, error) {
	if e.loadedTypes[0] {
		return e.Images, nil
	}
	return nil, &NotLoadedError{edge: "images"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NoBackref) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case nobackref.FieldID:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NoBackref fields.
func (nb *NoBackref) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case nobackref.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			nb.ID = int(value.Int64)
		default:
			nb.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the NoBackref.
// This includes values selected through modifiers, order, etc.
func (nb *NoBackref) Value(name string) (ent.Value, error) {
	return nb.selectValues.Get(name)
}

// QueryImages queries the "images" edge of the NoBackref entity.
func (nb *NoBackref) QueryImages() *ImageQuery {
	return NewNoBackrefClient(nb.config).QueryImages(nb)
}

// Update returns a builder for updating this NoBackref.
// Note that you need to call NoBackref.Unwrap() before calling this method if this NoBackref
// was returned from a transaction, and the transaction was committed or rolled back.
func (nb *NoBackref) Update() *NoBackrefUpdateOne {
	return NewNoBackrefClient(nb.config).UpdateOne(nb)
}

// Unwrap unwraps the NoBackref entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (nb *NoBackref) Unwrap() *NoBackref {
	_tx, ok := nb.config.driver.(*txDriver)
	if !ok {
		panic("ent: NoBackref is not a transactional entity")
	}
	nb.config.driver = _tx.drv
	return nb
}

// String implements the fmt.Stringer.
func (nb *NoBackref) String() string {
	var builder strings.Builder
	builder.WriteString("NoBackref(")
	builder.WriteString(fmt.Sprintf("id=%v", nb.ID))
	builder.WriteByte(')')
	return builder.String()
}

// NoBackrefs is a parsable slice of NoBackref.
type NoBackrefs []*NoBackref
