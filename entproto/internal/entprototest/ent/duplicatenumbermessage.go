// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/contrib/entproto/internal/entprototest/ent/duplicatenumbermessage"
	"entgo.io/ent/dialect/sql"
)

// DuplicateNumberMessage is the model entity for the DuplicateNumberMessage schema.
type DuplicateNumberMessage struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Hello holds the value of the "hello" field.
	Hello string `json:"hello,omitempty"`
	// World holds the value of the "world" field.
	World string `json:"world,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DuplicateNumberMessage) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case duplicatenumbermessage.FieldID:
			values[i] = &sql.NullInt64{}
		case duplicatenumbermessage.FieldHello, duplicatenumbermessage.FieldWorld:
			values[i] = &sql.NullString{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type DuplicateNumberMessage", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DuplicateNumberMessage fields.
func (dnm *DuplicateNumberMessage) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case duplicatenumbermessage.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			dnm.ID = int(value.Int64)
		case duplicatenumbermessage.FieldHello:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hello", values[i])
			} else if value.Valid {
				dnm.Hello = value.String
			}
		case duplicatenumbermessage.FieldWorld:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field world", values[i])
			} else if value.Valid {
				dnm.World = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this DuplicateNumberMessage.
// Note that you need to call DuplicateNumberMessage.Unwrap() before calling this method if this DuplicateNumberMessage
// was returned from a transaction, and the transaction was committed or rolled back.
func (dnm *DuplicateNumberMessage) Update() *DuplicateNumberMessageUpdateOne {
	return (&DuplicateNumberMessageClient{config: dnm.config}).UpdateOne(dnm)
}

// Unwrap unwraps the DuplicateNumberMessage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dnm *DuplicateNumberMessage) Unwrap() *DuplicateNumberMessage {
	tx, ok := dnm.config.driver.(*txDriver)
	if !ok {
		panic("ent: DuplicateNumberMessage is not a transactional entity")
	}
	dnm.config.driver = tx.drv
	return dnm
}

// String implements the fmt.Stringer.
func (dnm *DuplicateNumberMessage) String() string {
	var builder strings.Builder
	builder.WriteString("DuplicateNumberMessage(")
	builder.WriteString(fmt.Sprintf("id=%v", dnm.ID))
	builder.WriteString(", hello=")
	builder.WriteString(dnm.Hello)
	builder.WriteString(", world=")
	builder.WriteString(dnm.World)
	builder.WriteByte(')')
	return builder.String()
}

// DuplicateNumberMessages is a parsable slice of DuplicateNumberMessage.
type DuplicateNumberMessages []*DuplicateNumberMessage

func (dnm DuplicateNumberMessages) config(cfg config) {
	for _i := range dnm {
		dnm[_i].config = cfg
	}
}
