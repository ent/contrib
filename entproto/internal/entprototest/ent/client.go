// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"entgo.io/contrib/entproto/internal/entprototest/ent/migrate"
	"github.com/google/uuid"

	"entgo.io/contrib/entproto/internal/entprototest/ent/blogpost"
	"entgo.io/contrib/entproto/internal/entprototest/ent/category"
	"entgo.io/contrib/entproto/internal/entprototest/ent/dependsonskipped"
	"entgo.io/contrib/entproto/internal/entprototest/ent/duplicatenumbermessage"
	"entgo.io/contrib/entproto/internal/entprototest/ent/explicitskippedmessage"
	"entgo.io/contrib/entproto/internal/entprototest/ent/image"
	"entgo.io/contrib/entproto/internal/entprototest/ent/implicitskippedmessage"
	"entgo.io/contrib/entproto/internal/entprototest/ent/invalidfieldmessage"
	"entgo.io/contrib/entproto/internal/entprototest/ent/messagewithenum"
	"entgo.io/contrib/entproto/internal/entprototest/ent/messagewithfieldone"
	"entgo.io/contrib/entproto/internal/entprototest/ent/messagewithid"
	"entgo.io/contrib/entproto/internal/entprototest/ent/messagewithoptionals"
	"entgo.io/contrib/entproto/internal/entprototest/ent/messagewithpackagename"
	"entgo.io/contrib/entproto/internal/entprototest/ent/portal"
	"entgo.io/contrib/entproto/internal/entprototest/ent/user"
	"entgo.io/contrib/entproto/internal/entprototest/ent/validmessage"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// BlogPost is the client for interacting with the BlogPost builders.
	BlogPost *BlogPostClient
	// Category is the client for interacting with the Category builders.
	Category *CategoryClient
	// DependsOnSkipped is the client for interacting with the DependsOnSkipped builders.
	DependsOnSkipped *DependsOnSkippedClient
	// DuplicateNumberMessage is the client for interacting with the DuplicateNumberMessage builders.
	DuplicateNumberMessage *DuplicateNumberMessageClient
	// ExplicitSkippedMessage is the client for interacting with the ExplicitSkippedMessage builders.
	ExplicitSkippedMessage *ExplicitSkippedMessageClient
	// Image is the client for interacting with the Image builders.
	Image *ImageClient
	// ImplicitSkippedMessage is the client for interacting with the ImplicitSkippedMessage builders.
	ImplicitSkippedMessage *ImplicitSkippedMessageClient
	// InvalidFieldMessage is the client for interacting with the InvalidFieldMessage builders.
	InvalidFieldMessage *InvalidFieldMessageClient
	// MessageWithEnum is the client for interacting with the MessageWithEnum builders.
	MessageWithEnum *MessageWithEnumClient
	// MessageWithFieldOne is the client for interacting with the MessageWithFieldOne builders.
	MessageWithFieldOne *MessageWithFieldOneClient
	// MessageWithID is the client for interacting with the MessageWithID builders.
	MessageWithID *MessageWithIDClient
	// MessageWithOptionals is the client for interacting with the MessageWithOptionals builders.
	MessageWithOptionals *MessageWithOptionalsClient
	// MessageWithPackageName is the client for interacting with the MessageWithPackageName builders.
	MessageWithPackageName *MessageWithPackageNameClient
	// Portal is the client for interacting with the Portal builders.
	Portal *PortalClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// ValidMessage is the client for interacting with the ValidMessage builders.
	ValidMessage *ValidMessageClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.BlogPost = NewBlogPostClient(c.config)
	c.Category = NewCategoryClient(c.config)
	c.DependsOnSkipped = NewDependsOnSkippedClient(c.config)
	c.DuplicateNumberMessage = NewDuplicateNumberMessageClient(c.config)
	c.ExplicitSkippedMessage = NewExplicitSkippedMessageClient(c.config)
	c.Image = NewImageClient(c.config)
	c.ImplicitSkippedMessage = NewImplicitSkippedMessageClient(c.config)
	c.InvalidFieldMessage = NewInvalidFieldMessageClient(c.config)
	c.MessageWithEnum = NewMessageWithEnumClient(c.config)
	c.MessageWithFieldOne = NewMessageWithFieldOneClient(c.config)
	c.MessageWithID = NewMessageWithIDClient(c.config)
	c.MessageWithOptionals = NewMessageWithOptionalsClient(c.config)
	c.MessageWithPackageName = NewMessageWithPackageNameClient(c.config)
	c.Portal = NewPortalClient(c.config)
	c.User = NewUserClient(c.config)
	c.ValidMessage = NewValidMessageClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                    ctx,
		config:                 cfg,
		BlogPost:               NewBlogPostClient(cfg),
		Category:               NewCategoryClient(cfg),
		DependsOnSkipped:       NewDependsOnSkippedClient(cfg),
		DuplicateNumberMessage: NewDuplicateNumberMessageClient(cfg),
		ExplicitSkippedMessage: NewExplicitSkippedMessageClient(cfg),
		Image:                  NewImageClient(cfg),
		ImplicitSkippedMessage: NewImplicitSkippedMessageClient(cfg),
		InvalidFieldMessage:    NewInvalidFieldMessageClient(cfg),
		MessageWithEnum:        NewMessageWithEnumClient(cfg),
		MessageWithFieldOne:    NewMessageWithFieldOneClient(cfg),
		MessageWithID:          NewMessageWithIDClient(cfg),
		MessageWithOptionals:   NewMessageWithOptionalsClient(cfg),
		MessageWithPackageName: NewMessageWithPackageNameClient(cfg),
		Portal:                 NewPortalClient(cfg),
		User:                   NewUserClient(cfg),
		ValidMessage:           NewValidMessageClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:                 cfg,
		BlogPost:               NewBlogPostClient(cfg),
		Category:               NewCategoryClient(cfg),
		DependsOnSkipped:       NewDependsOnSkippedClient(cfg),
		DuplicateNumberMessage: NewDuplicateNumberMessageClient(cfg),
		ExplicitSkippedMessage: NewExplicitSkippedMessageClient(cfg),
		Image:                  NewImageClient(cfg),
		ImplicitSkippedMessage: NewImplicitSkippedMessageClient(cfg),
		InvalidFieldMessage:    NewInvalidFieldMessageClient(cfg),
		MessageWithEnum:        NewMessageWithEnumClient(cfg),
		MessageWithFieldOne:    NewMessageWithFieldOneClient(cfg),
		MessageWithID:          NewMessageWithIDClient(cfg),
		MessageWithOptionals:   NewMessageWithOptionalsClient(cfg),
		MessageWithPackageName: NewMessageWithPackageNameClient(cfg),
		Portal:                 NewPortalClient(cfg),
		User:                   NewUserClient(cfg),
		ValidMessage:           NewValidMessageClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		BlogPost.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.BlogPost.Use(hooks...)
	c.Category.Use(hooks...)
	c.DependsOnSkipped.Use(hooks...)
	c.DuplicateNumberMessage.Use(hooks...)
	c.ExplicitSkippedMessage.Use(hooks...)
	c.Image.Use(hooks...)
	c.ImplicitSkippedMessage.Use(hooks...)
	c.InvalidFieldMessage.Use(hooks...)
	c.MessageWithEnum.Use(hooks...)
	c.MessageWithFieldOne.Use(hooks...)
	c.MessageWithID.Use(hooks...)
	c.MessageWithOptionals.Use(hooks...)
	c.MessageWithPackageName.Use(hooks...)
	c.Portal.Use(hooks...)
	c.User.Use(hooks...)
	c.ValidMessage.Use(hooks...)
}

// BlogPostClient is a client for the BlogPost schema.
type BlogPostClient struct {
	config
}

// NewBlogPostClient returns a client for the BlogPost from the given config.
func NewBlogPostClient(c config) *BlogPostClient {
	return &BlogPostClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `blogpost.Hooks(f(g(h())))`.
func (c *BlogPostClient) Use(hooks ...Hook) {
	c.hooks.BlogPost = append(c.hooks.BlogPost, hooks...)
}

// Create returns a create builder for BlogPost.
func (c *BlogPostClient) Create() *BlogPostCreate {
	mutation := newBlogPostMutation(c.config, OpCreate)
	return &BlogPostCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BlogPost entities.
func (c *BlogPostClient) CreateBulk(builders ...*BlogPostCreate) *BlogPostCreateBulk {
	return &BlogPostCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BlogPost.
func (c *BlogPostClient) Update() *BlogPostUpdate {
	mutation := newBlogPostMutation(c.config, OpUpdate)
	return &BlogPostUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BlogPostClient) UpdateOne(bp *BlogPost) *BlogPostUpdateOne {
	mutation := newBlogPostMutation(c.config, OpUpdateOne, withBlogPost(bp))
	return &BlogPostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BlogPostClient) UpdateOneID(id int) *BlogPostUpdateOne {
	mutation := newBlogPostMutation(c.config, OpUpdateOne, withBlogPostID(id))
	return &BlogPostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BlogPost.
func (c *BlogPostClient) Delete() *BlogPostDelete {
	mutation := newBlogPostMutation(c.config, OpDelete)
	return &BlogPostDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BlogPostClient) DeleteOne(bp *BlogPost) *BlogPostDeleteOne {
	return c.DeleteOneID(bp.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BlogPostClient) DeleteOneID(id int) *BlogPostDeleteOne {
	builder := c.Delete().Where(blogpost.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BlogPostDeleteOne{builder}
}

// Query returns a query builder for BlogPost.
func (c *BlogPostClient) Query() *BlogPostQuery {
	return &BlogPostQuery{config: c.config}
}

// Get returns a BlogPost entity by its id.
func (c *BlogPostClient) Get(ctx context.Context, id int) (*BlogPost, error) {
	return c.Query().Where(blogpost.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BlogPostClient) GetX(ctx context.Context, id int) *BlogPost {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAuthor queries the author edge of a BlogPost.
func (c *BlogPostClient) QueryAuthor(bp *BlogPost) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := bp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(blogpost.Table, blogpost.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, blogpost.AuthorTable, blogpost.AuthorColumn),
		)
		fromV = sqlgraph.Neighbors(bp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCategories queries the categories edge of a BlogPost.
func (c *BlogPostClient) QueryCategories(bp *BlogPost) *CategoryQuery {
	query := &CategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := bp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(blogpost.Table, blogpost.FieldID, id),
			sqlgraph.To(category.Table, category.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, blogpost.CategoriesTable, blogpost.CategoriesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(bp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BlogPostClient) Hooks() []Hook {
	return c.hooks.BlogPost
}

// CategoryClient is a client for the Category schema.
type CategoryClient struct {
	config
}

// NewCategoryClient returns a client for the Category from the given config.
func NewCategoryClient(c config) *CategoryClient {
	return &CategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `category.Hooks(f(g(h())))`.
func (c *CategoryClient) Use(hooks ...Hook) {
	c.hooks.Category = append(c.hooks.Category, hooks...)
}

// Create returns a create builder for Category.
func (c *CategoryClient) Create() *CategoryCreate {
	mutation := newCategoryMutation(c.config, OpCreate)
	return &CategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Category entities.
func (c *CategoryClient) CreateBulk(builders ...*CategoryCreate) *CategoryCreateBulk {
	return &CategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Category.
func (c *CategoryClient) Update() *CategoryUpdate {
	mutation := newCategoryMutation(c.config, OpUpdate)
	return &CategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CategoryClient) UpdateOne(ca *Category) *CategoryUpdateOne {
	mutation := newCategoryMutation(c.config, OpUpdateOne, withCategory(ca))
	return &CategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CategoryClient) UpdateOneID(id int) *CategoryUpdateOne {
	mutation := newCategoryMutation(c.config, OpUpdateOne, withCategoryID(id))
	return &CategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Category.
func (c *CategoryClient) Delete() *CategoryDelete {
	mutation := newCategoryMutation(c.config, OpDelete)
	return &CategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CategoryClient) DeleteOne(ca *Category) *CategoryDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CategoryClient) DeleteOneID(id int) *CategoryDeleteOne {
	builder := c.Delete().Where(category.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CategoryDeleteOne{builder}
}

// Query returns a query builder for Category.
func (c *CategoryClient) Query() *CategoryQuery {
	return &CategoryQuery{config: c.config}
}

// Get returns a Category entity by its id.
func (c *CategoryClient) Get(ctx context.Context, id int) (*Category, error) {
	return c.Query().Where(category.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CategoryClient) GetX(ctx context.Context, id int) *Category {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBlogPosts queries the blog_posts edge of a Category.
func (c *CategoryClient) QueryBlogPosts(ca *Category) *BlogPostQuery {
	query := &BlogPostQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(category.Table, category.FieldID, id),
			sqlgraph.To(blogpost.Table, blogpost.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, category.BlogPostsTable, category.BlogPostsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CategoryClient) Hooks() []Hook {
	return c.hooks.Category
}

// DependsOnSkippedClient is a client for the DependsOnSkipped schema.
type DependsOnSkippedClient struct {
	config
}

// NewDependsOnSkippedClient returns a client for the DependsOnSkipped from the given config.
func NewDependsOnSkippedClient(c config) *DependsOnSkippedClient {
	return &DependsOnSkippedClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `dependsonskipped.Hooks(f(g(h())))`.
func (c *DependsOnSkippedClient) Use(hooks ...Hook) {
	c.hooks.DependsOnSkipped = append(c.hooks.DependsOnSkipped, hooks...)
}

// Create returns a create builder for DependsOnSkipped.
func (c *DependsOnSkippedClient) Create() *DependsOnSkippedCreate {
	mutation := newDependsOnSkippedMutation(c.config, OpCreate)
	return &DependsOnSkippedCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DependsOnSkipped entities.
func (c *DependsOnSkippedClient) CreateBulk(builders ...*DependsOnSkippedCreate) *DependsOnSkippedCreateBulk {
	return &DependsOnSkippedCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DependsOnSkipped.
func (c *DependsOnSkippedClient) Update() *DependsOnSkippedUpdate {
	mutation := newDependsOnSkippedMutation(c.config, OpUpdate)
	return &DependsOnSkippedUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DependsOnSkippedClient) UpdateOne(dos *DependsOnSkipped) *DependsOnSkippedUpdateOne {
	mutation := newDependsOnSkippedMutation(c.config, OpUpdateOne, withDependsOnSkipped(dos))
	return &DependsOnSkippedUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DependsOnSkippedClient) UpdateOneID(id int) *DependsOnSkippedUpdateOne {
	mutation := newDependsOnSkippedMutation(c.config, OpUpdateOne, withDependsOnSkippedID(id))
	return &DependsOnSkippedUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DependsOnSkipped.
func (c *DependsOnSkippedClient) Delete() *DependsOnSkippedDelete {
	mutation := newDependsOnSkippedMutation(c.config, OpDelete)
	return &DependsOnSkippedDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DependsOnSkippedClient) DeleteOne(dos *DependsOnSkipped) *DependsOnSkippedDeleteOne {
	return c.DeleteOneID(dos.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DependsOnSkippedClient) DeleteOneID(id int) *DependsOnSkippedDeleteOne {
	builder := c.Delete().Where(dependsonskipped.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DependsOnSkippedDeleteOne{builder}
}

// Query returns a query builder for DependsOnSkipped.
func (c *DependsOnSkippedClient) Query() *DependsOnSkippedQuery {
	return &DependsOnSkippedQuery{config: c.config}
}

// Get returns a DependsOnSkipped entity by its id.
func (c *DependsOnSkippedClient) Get(ctx context.Context, id int) (*DependsOnSkipped, error) {
	return c.Query().Where(dependsonskipped.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DependsOnSkippedClient) GetX(ctx context.Context, id int) *DependsOnSkipped {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySkipped queries the skipped edge of a DependsOnSkipped.
func (c *DependsOnSkippedClient) QuerySkipped(dos *DependsOnSkipped) *ImplicitSkippedMessageQuery {
	query := &ImplicitSkippedMessageQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dos.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dependsonskipped.Table, dependsonskipped.FieldID, id),
			sqlgraph.To(implicitskippedmessage.Table, implicitskippedmessage.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, dependsonskipped.SkippedTable, dependsonskipped.SkippedColumn),
		)
		fromV = sqlgraph.Neighbors(dos.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DependsOnSkippedClient) Hooks() []Hook {
	return c.hooks.DependsOnSkipped
}

// DuplicateNumberMessageClient is a client for the DuplicateNumberMessage schema.
type DuplicateNumberMessageClient struct {
	config
}

// NewDuplicateNumberMessageClient returns a client for the DuplicateNumberMessage from the given config.
func NewDuplicateNumberMessageClient(c config) *DuplicateNumberMessageClient {
	return &DuplicateNumberMessageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `duplicatenumbermessage.Hooks(f(g(h())))`.
func (c *DuplicateNumberMessageClient) Use(hooks ...Hook) {
	c.hooks.DuplicateNumberMessage = append(c.hooks.DuplicateNumberMessage, hooks...)
}

// Create returns a create builder for DuplicateNumberMessage.
func (c *DuplicateNumberMessageClient) Create() *DuplicateNumberMessageCreate {
	mutation := newDuplicateNumberMessageMutation(c.config, OpCreate)
	return &DuplicateNumberMessageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DuplicateNumberMessage entities.
func (c *DuplicateNumberMessageClient) CreateBulk(builders ...*DuplicateNumberMessageCreate) *DuplicateNumberMessageCreateBulk {
	return &DuplicateNumberMessageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DuplicateNumberMessage.
func (c *DuplicateNumberMessageClient) Update() *DuplicateNumberMessageUpdate {
	mutation := newDuplicateNumberMessageMutation(c.config, OpUpdate)
	return &DuplicateNumberMessageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DuplicateNumberMessageClient) UpdateOne(dnm *DuplicateNumberMessage) *DuplicateNumberMessageUpdateOne {
	mutation := newDuplicateNumberMessageMutation(c.config, OpUpdateOne, withDuplicateNumberMessage(dnm))
	return &DuplicateNumberMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DuplicateNumberMessageClient) UpdateOneID(id int) *DuplicateNumberMessageUpdateOne {
	mutation := newDuplicateNumberMessageMutation(c.config, OpUpdateOne, withDuplicateNumberMessageID(id))
	return &DuplicateNumberMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DuplicateNumberMessage.
func (c *DuplicateNumberMessageClient) Delete() *DuplicateNumberMessageDelete {
	mutation := newDuplicateNumberMessageMutation(c.config, OpDelete)
	return &DuplicateNumberMessageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DuplicateNumberMessageClient) DeleteOne(dnm *DuplicateNumberMessage) *DuplicateNumberMessageDeleteOne {
	return c.DeleteOneID(dnm.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DuplicateNumberMessageClient) DeleteOneID(id int) *DuplicateNumberMessageDeleteOne {
	builder := c.Delete().Where(duplicatenumbermessage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DuplicateNumberMessageDeleteOne{builder}
}

// Query returns a query builder for DuplicateNumberMessage.
func (c *DuplicateNumberMessageClient) Query() *DuplicateNumberMessageQuery {
	return &DuplicateNumberMessageQuery{config: c.config}
}

// Get returns a DuplicateNumberMessage entity by its id.
func (c *DuplicateNumberMessageClient) Get(ctx context.Context, id int) (*DuplicateNumberMessage, error) {
	return c.Query().Where(duplicatenumbermessage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DuplicateNumberMessageClient) GetX(ctx context.Context, id int) *DuplicateNumberMessage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *DuplicateNumberMessageClient) Hooks() []Hook {
	return c.hooks.DuplicateNumberMessage
}

// ExplicitSkippedMessageClient is a client for the ExplicitSkippedMessage schema.
type ExplicitSkippedMessageClient struct {
	config
}

// NewExplicitSkippedMessageClient returns a client for the ExplicitSkippedMessage from the given config.
func NewExplicitSkippedMessageClient(c config) *ExplicitSkippedMessageClient {
	return &ExplicitSkippedMessageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `explicitskippedmessage.Hooks(f(g(h())))`.
func (c *ExplicitSkippedMessageClient) Use(hooks ...Hook) {
	c.hooks.ExplicitSkippedMessage = append(c.hooks.ExplicitSkippedMessage, hooks...)
}

// Create returns a create builder for ExplicitSkippedMessage.
func (c *ExplicitSkippedMessageClient) Create() *ExplicitSkippedMessageCreate {
	mutation := newExplicitSkippedMessageMutation(c.config, OpCreate)
	return &ExplicitSkippedMessageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ExplicitSkippedMessage entities.
func (c *ExplicitSkippedMessageClient) CreateBulk(builders ...*ExplicitSkippedMessageCreate) *ExplicitSkippedMessageCreateBulk {
	return &ExplicitSkippedMessageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ExplicitSkippedMessage.
func (c *ExplicitSkippedMessageClient) Update() *ExplicitSkippedMessageUpdate {
	mutation := newExplicitSkippedMessageMutation(c.config, OpUpdate)
	return &ExplicitSkippedMessageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExplicitSkippedMessageClient) UpdateOne(esm *ExplicitSkippedMessage) *ExplicitSkippedMessageUpdateOne {
	mutation := newExplicitSkippedMessageMutation(c.config, OpUpdateOne, withExplicitSkippedMessage(esm))
	return &ExplicitSkippedMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExplicitSkippedMessageClient) UpdateOneID(id int) *ExplicitSkippedMessageUpdateOne {
	mutation := newExplicitSkippedMessageMutation(c.config, OpUpdateOne, withExplicitSkippedMessageID(id))
	return &ExplicitSkippedMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ExplicitSkippedMessage.
func (c *ExplicitSkippedMessageClient) Delete() *ExplicitSkippedMessageDelete {
	mutation := newExplicitSkippedMessageMutation(c.config, OpDelete)
	return &ExplicitSkippedMessageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ExplicitSkippedMessageClient) DeleteOne(esm *ExplicitSkippedMessage) *ExplicitSkippedMessageDeleteOne {
	return c.DeleteOneID(esm.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ExplicitSkippedMessageClient) DeleteOneID(id int) *ExplicitSkippedMessageDeleteOne {
	builder := c.Delete().Where(explicitskippedmessage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExplicitSkippedMessageDeleteOne{builder}
}

// Query returns a query builder for ExplicitSkippedMessage.
func (c *ExplicitSkippedMessageClient) Query() *ExplicitSkippedMessageQuery {
	return &ExplicitSkippedMessageQuery{config: c.config}
}

// Get returns a ExplicitSkippedMessage entity by its id.
func (c *ExplicitSkippedMessageClient) Get(ctx context.Context, id int) (*ExplicitSkippedMessage, error) {
	return c.Query().Where(explicitskippedmessage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExplicitSkippedMessageClient) GetX(ctx context.Context, id int) *ExplicitSkippedMessage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ExplicitSkippedMessageClient) Hooks() []Hook {
	return c.hooks.ExplicitSkippedMessage
}

// ImageClient is a client for the Image schema.
type ImageClient struct {
	config
}

// NewImageClient returns a client for the Image from the given config.
func NewImageClient(c config) *ImageClient {
	return &ImageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `image.Hooks(f(g(h())))`.
func (c *ImageClient) Use(hooks ...Hook) {
	c.hooks.Image = append(c.hooks.Image, hooks...)
}

// Create returns a create builder for Image.
func (c *ImageClient) Create() *ImageCreate {
	mutation := newImageMutation(c.config, OpCreate)
	return &ImageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Image entities.
func (c *ImageClient) CreateBulk(builders ...*ImageCreate) *ImageCreateBulk {
	return &ImageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Image.
func (c *ImageClient) Update() *ImageUpdate {
	mutation := newImageMutation(c.config, OpUpdate)
	return &ImageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ImageClient) UpdateOne(i *Image) *ImageUpdateOne {
	mutation := newImageMutation(c.config, OpUpdateOne, withImage(i))
	return &ImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ImageClient) UpdateOneID(id uuid.UUID) *ImageUpdateOne {
	mutation := newImageMutation(c.config, OpUpdateOne, withImageID(id))
	return &ImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Image.
func (c *ImageClient) Delete() *ImageDelete {
	mutation := newImageMutation(c.config, OpDelete)
	return &ImageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ImageClient) DeleteOne(i *Image) *ImageDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ImageClient) DeleteOneID(id uuid.UUID) *ImageDeleteOne {
	builder := c.Delete().Where(image.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ImageDeleteOne{builder}
}

// Query returns a query builder for Image.
func (c *ImageClient) Query() *ImageQuery {
	return &ImageQuery{config: c.config}
}

// Get returns a Image entity by its id.
func (c *ImageClient) Get(ctx context.Context, id uuid.UUID) (*Image, error) {
	return c.Query().Where(image.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ImageClient) GetX(ctx context.Context, id uuid.UUID) *Image {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUserProfilePic queries the user_profile_pic edge of a Image.
func (c *ImageClient) QueryUserProfilePic(i *Image) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(image.Table, image.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, image.UserProfilePicTable, image.UserProfilePicColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ImageClient) Hooks() []Hook {
	return c.hooks.Image
}

// ImplicitSkippedMessageClient is a client for the ImplicitSkippedMessage schema.
type ImplicitSkippedMessageClient struct {
	config
}

// NewImplicitSkippedMessageClient returns a client for the ImplicitSkippedMessage from the given config.
func NewImplicitSkippedMessageClient(c config) *ImplicitSkippedMessageClient {
	return &ImplicitSkippedMessageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `implicitskippedmessage.Hooks(f(g(h())))`.
func (c *ImplicitSkippedMessageClient) Use(hooks ...Hook) {
	c.hooks.ImplicitSkippedMessage = append(c.hooks.ImplicitSkippedMessage, hooks...)
}

// Create returns a create builder for ImplicitSkippedMessage.
func (c *ImplicitSkippedMessageClient) Create() *ImplicitSkippedMessageCreate {
	mutation := newImplicitSkippedMessageMutation(c.config, OpCreate)
	return &ImplicitSkippedMessageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ImplicitSkippedMessage entities.
func (c *ImplicitSkippedMessageClient) CreateBulk(builders ...*ImplicitSkippedMessageCreate) *ImplicitSkippedMessageCreateBulk {
	return &ImplicitSkippedMessageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ImplicitSkippedMessage.
func (c *ImplicitSkippedMessageClient) Update() *ImplicitSkippedMessageUpdate {
	mutation := newImplicitSkippedMessageMutation(c.config, OpUpdate)
	return &ImplicitSkippedMessageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ImplicitSkippedMessageClient) UpdateOne(ism *ImplicitSkippedMessage) *ImplicitSkippedMessageUpdateOne {
	mutation := newImplicitSkippedMessageMutation(c.config, OpUpdateOne, withImplicitSkippedMessage(ism))
	return &ImplicitSkippedMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ImplicitSkippedMessageClient) UpdateOneID(id int) *ImplicitSkippedMessageUpdateOne {
	mutation := newImplicitSkippedMessageMutation(c.config, OpUpdateOne, withImplicitSkippedMessageID(id))
	return &ImplicitSkippedMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ImplicitSkippedMessage.
func (c *ImplicitSkippedMessageClient) Delete() *ImplicitSkippedMessageDelete {
	mutation := newImplicitSkippedMessageMutation(c.config, OpDelete)
	return &ImplicitSkippedMessageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ImplicitSkippedMessageClient) DeleteOne(ism *ImplicitSkippedMessage) *ImplicitSkippedMessageDeleteOne {
	return c.DeleteOneID(ism.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ImplicitSkippedMessageClient) DeleteOneID(id int) *ImplicitSkippedMessageDeleteOne {
	builder := c.Delete().Where(implicitskippedmessage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ImplicitSkippedMessageDeleteOne{builder}
}

// Query returns a query builder for ImplicitSkippedMessage.
func (c *ImplicitSkippedMessageClient) Query() *ImplicitSkippedMessageQuery {
	return &ImplicitSkippedMessageQuery{config: c.config}
}

// Get returns a ImplicitSkippedMessage entity by its id.
func (c *ImplicitSkippedMessageClient) Get(ctx context.Context, id int) (*ImplicitSkippedMessage, error) {
	return c.Query().Where(implicitskippedmessage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ImplicitSkippedMessageClient) GetX(ctx context.Context, id int) *ImplicitSkippedMessage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ImplicitSkippedMessageClient) Hooks() []Hook {
	return c.hooks.ImplicitSkippedMessage
}

// InvalidFieldMessageClient is a client for the InvalidFieldMessage schema.
type InvalidFieldMessageClient struct {
	config
}

// NewInvalidFieldMessageClient returns a client for the InvalidFieldMessage from the given config.
func NewInvalidFieldMessageClient(c config) *InvalidFieldMessageClient {
	return &InvalidFieldMessageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `invalidfieldmessage.Hooks(f(g(h())))`.
func (c *InvalidFieldMessageClient) Use(hooks ...Hook) {
	c.hooks.InvalidFieldMessage = append(c.hooks.InvalidFieldMessage, hooks...)
}

// Create returns a create builder for InvalidFieldMessage.
func (c *InvalidFieldMessageClient) Create() *InvalidFieldMessageCreate {
	mutation := newInvalidFieldMessageMutation(c.config, OpCreate)
	return &InvalidFieldMessageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of InvalidFieldMessage entities.
func (c *InvalidFieldMessageClient) CreateBulk(builders ...*InvalidFieldMessageCreate) *InvalidFieldMessageCreateBulk {
	return &InvalidFieldMessageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for InvalidFieldMessage.
func (c *InvalidFieldMessageClient) Update() *InvalidFieldMessageUpdate {
	mutation := newInvalidFieldMessageMutation(c.config, OpUpdate)
	return &InvalidFieldMessageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InvalidFieldMessageClient) UpdateOne(ifm *InvalidFieldMessage) *InvalidFieldMessageUpdateOne {
	mutation := newInvalidFieldMessageMutation(c.config, OpUpdateOne, withInvalidFieldMessage(ifm))
	return &InvalidFieldMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InvalidFieldMessageClient) UpdateOneID(id int) *InvalidFieldMessageUpdateOne {
	mutation := newInvalidFieldMessageMutation(c.config, OpUpdateOne, withInvalidFieldMessageID(id))
	return &InvalidFieldMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for InvalidFieldMessage.
func (c *InvalidFieldMessageClient) Delete() *InvalidFieldMessageDelete {
	mutation := newInvalidFieldMessageMutation(c.config, OpDelete)
	return &InvalidFieldMessageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *InvalidFieldMessageClient) DeleteOne(ifm *InvalidFieldMessage) *InvalidFieldMessageDeleteOne {
	return c.DeleteOneID(ifm.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *InvalidFieldMessageClient) DeleteOneID(id int) *InvalidFieldMessageDeleteOne {
	builder := c.Delete().Where(invalidfieldmessage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InvalidFieldMessageDeleteOne{builder}
}

// Query returns a query builder for InvalidFieldMessage.
func (c *InvalidFieldMessageClient) Query() *InvalidFieldMessageQuery {
	return &InvalidFieldMessageQuery{config: c.config}
}

// Get returns a InvalidFieldMessage entity by its id.
func (c *InvalidFieldMessageClient) Get(ctx context.Context, id int) (*InvalidFieldMessage, error) {
	return c.Query().Where(invalidfieldmessage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InvalidFieldMessageClient) GetX(ctx context.Context, id int) *InvalidFieldMessage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *InvalidFieldMessageClient) Hooks() []Hook {
	return c.hooks.InvalidFieldMessage
}

// MessageWithEnumClient is a client for the MessageWithEnum schema.
type MessageWithEnumClient struct {
	config
}

// NewMessageWithEnumClient returns a client for the MessageWithEnum from the given config.
func NewMessageWithEnumClient(c config) *MessageWithEnumClient {
	return &MessageWithEnumClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `messagewithenum.Hooks(f(g(h())))`.
func (c *MessageWithEnumClient) Use(hooks ...Hook) {
	c.hooks.MessageWithEnum = append(c.hooks.MessageWithEnum, hooks...)
}

// Create returns a create builder for MessageWithEnum.
func (c *MessageWithEnumClient) Create() *MessageWithEnumCreate {
	mutation := newMessageWithEnumMutation(c.config, OpCreate)
	return &MessageWithEnumCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MessageWithEnum entities.
func (c *MessageWithEnumClient) CreateBulk(builders ...*MessageWithEnumCreate) *MessageWithEnumCreateBulk {
	return &MessageWithEnumCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MessageWithEnum.
func (c *MessageWithEnumClient) Update() *MessageWithEnumUpdate {
	mutation := newMessageWithEnumMutation(c.config, OpUpdate)
	return &MessageWithEnumUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MessageWithEnumClient) UpdateOne(mwe *MessageWithEnum) *MessageWithEnumUpdateOne {
	mutation := newMessageWithEnumMutation(c.config, OpUpdateOne, withMessageWithEnum(mwe))
	return &MessageWithEnumUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MessageWithEnumClient) UpdateOneID(id int) *MessageWithEnumUpdateOne {
	mutation := newMessageWithEnumMutation(c.config, OpUpdateOne, withMessageWithEnumID(id))
	return &MessageWithEnumUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MessageWithEnum.
func (c *MessageWithEnumClient) Delete() *MessageWithEnumDelete {
	mutation := newMessageWithEnumMutation(c.config, OpDelete)
	return &MessageWithEnumDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MessageWithEnumClient) DeleteOne(mwe *MessageWithEnum) *MessageWithEnumDeleteOne {
	return c.DeleteOneID(mwe.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MessageWithEnumClient) DeleteOneID(id int) *MessageWithEnumDeleteOne {
	builder := c.Delete().Where(messagewithenum.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MessageWithEnumDeleteOne{builder}
}

// Query returns a query builder for MessageWithEnum.
func (c *MessageWithEnumClient) Query() *MessageWithEnumQuery {
	return &MessageWithEnumQuery{config: c.config}
}

// Get returns a MessageWithEnum entity by its id.
func (c *MessageWithEnumClient) Get(ctx context.Context, id int) (*MessageWithEnum, error) {
	return c.Query().Where(messagewithenum.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MessageWithEnumClient) GetX(ctx context.Context, id int) *MessageWithEnum {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MessageWithEnumClient) Hooks() []Hook {
	return c.hooks.MessageWithEnum
}

// MessageWithFieldOneClient is a client for the MessageWithFieldOne schema.
type MessageWithFieldOneClient struct {
	config
}

// NewMessageWithFieldOneClient returns a client for the MessageWithFieldOne from the given config.
func NewMessageWithFieldOneClient(c config) *MessageWithFieldOneClient {
	return &MessageWithFieldOneClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `messagewithfieldone.Hooks(f(g(h())))`.
func (c *MessageWithFieldOneClient) Use(hooks ...Hook) {
	c.hooks.MessageWithFieldOne = append(c.hooks.MessageWithFieldOne, hooks...)
}

// Create returns a create builder for MessageWithFieldOne.
func (c *MessageWithFieldOneClient) Create() *MessageWithFieldOneCreate {
	mutation := newMessageWithFieldOneMutation(c.config, OpCreate)
	return &MessageWithFieldOneCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MessageWithFieldOne entities.
func (c *MessageWithFieldOneClient) CreateBulk(builders ...*MessageWithFieldOneCreate) *MessageWithFieldOneCreateBulk {
	return &MessageWithFieldOneCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MessageWithFieldOne.
func (c *MessageWithFieldOneClient) Update() *MessageWithFieldOneUpdate {
	mutation := newMessageWithFieldOneMutation(c.config, OpUpdate)
	return &MessageWithFieldOneUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MessageWithFieldOneClient) UpdateOne(mwfo *MessageWithFieldOne) *MessageWithFieldOneUpdateOne {
	mutation := newMessageWithFieldOneMutation(c.config, OpUpdateOne, withMessageWithFieldOne(mwfo))
	return &MessageWithFieldOneUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MessageWithFieldOneClient) UpdateOneID(id int) *MessageWithFieldOneUpdateOne {
	mutation := newMessageWithFieldOneMutation(c.config, OpUpdateOne, withMessageWithFieldOneID(id))
	return &MessageWithFieldOneUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MessageWithFieldOne.
func (c *MessageWithFieldOneClient) Delete() *MessageWithFieldOneDelete {
	mutation := newMessageWithFieldOneMutation(c.config, OpDelete)
	return &MessageWithFieldOneDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MessageWithFieldOneClient) DeleteOne(mwfo *MessageWithFieldOne) *MessageWithFieldOneDeleteOne {
	return c.DeleteOneID(mwfo.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MessageWithFieldOneClient) DeleteOneID(id int) *MessageWithFieldOneDeleteOne {
	builder := c.Delete().Where(messagewithfieldone.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MessageWithFieldOneDeleteOne{builder}
}

// Query returns a query builder for MessageWithFieldOne.
func (c *MessageWithFieldOneClient) Query() *MessageWithFieldOneQuery {
	return &MessageWithFieldOneQuery{config: c.config}
}

// Get returns a MessageWithFieldOne entity by its id.
func (c *MessageWithFieldOneClient) Get(ctx context.Context, id int) (*MessageWithFieldOne, error) {
	return c.Query().Where(messagewithfieldone.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MessageWithFieldOneClient) GetX(ctx context.Context, id int) *MessageWithFieldOne {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MessageWithFieldOneClient) Hooks() []Hook {
	return c.hooks.MessageWithFieldOne
}

// MessageWithIDClient is a client for the MessageWithID schema.
type MessageWithIDClient struct {
	config
}

// NewMessageWithIDClient returns a client for the MessageWithID from the given config.
func NewMessageWithIDClient(c config) *MessageWithIDClient {
	return &MessageWithIDClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `messagewithid.Hooks(f(g(h())))`.
func (c *MessageWithIDClient) Use(hooks ...Hook) {
	c.hooks.MessageWithID = append(c.hooks.MessageWithID, hooks...)
}

// Create returns a create builder for MessageWithID.
func (c *MessageWithIDClient) Create() *MessageWithIDCreate {
	mutation := newMessageWithIDMutation(c.config, OpCreate)
	return &MessageWithIDCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MessageWithID entities.
func (c *MessageWithIDClient) CreateBulk(builders ...*MessageWithIDCreate) *MessageWithIDCreateBulk {
	return &MessageWithIDCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MessageWithID.
func (c *MessageWithIDClient) Update() *MessageWithIDUpdate {
	mutation := newMessageWithIDMutation(c.config, OpUpdate)
	return &MessageWithIDUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MessageWithIDClient) UpdateOne(mwi *MessageWithID) *MessageWithIDUpdateOne {
	mutation := newMessageWithIDMutation(c.config, OpUpdateOne, withMessageWithID(mwi))
	return &MessageWithIDUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MessageWithIDClient) UpdateOneID(id int32) *MessageWithIDUpdateOne {
	mutation := newMessageWithIDMutation(c.config, OpUpdateOne, withMessageWithIDID(id))
	return &MessageWithIDUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MessageWithID.
func (c *MessageWithIDClient) Delete() *MessageWithIDDelete {
	mutation := newMessageWithIDMutation(c.config, OpDelete)
	return &MessageWithIDDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MessageWithIDClient) DeleteOne(mwi *MessageWithID) *MessageWithIDDeleteOne {
	return c.DeleteOneID(mwi.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MessageWithIDClient) DeleteOneID(id int32) *MessageWithIDDeleteOne {
	builder := c.Delete().Where(messagewithid.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MessageWithIDDeleteOne{builder}
}

// Query returns a query builder for MessageWithID.
func (c *MessageWithIDClient) Query() *MessageWithIDQuery {
	return &MessageWithIDQuery{config: c.config}
}

// Get returns a MessageWithID entity by its id.
func (c *MessageWithIDClient) Get(ctx context.Context, id int32) (*MessageWithID, error) {
	return c.Query().Where(messagewithid.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MessageWithIDClient) GetX(ctx context.Context, id int32) *MessageWithID {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MessageWithIDClient) Hooks() []Hook {
	return c.hooks.MessageWithID
}

// MessageWithOptionalsClient is a client for the MessageWithOptionals schema.
type MessageWithOptionalsClient struct {
	config
}

// NewMessageWithOptionalsClient returns a client for the MessageWithOptionals from the given config.
func NewMessageWithOptionalsClient(c config) *MessageWithOptionalsClient {
	return &MessageWithOptionalsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `messagewithoptionals.Hooks(f(g(h())))`.
func (c *MessageWithOptionalsClient) Use(hooks ...Hook) {
	c.hooks.MessageWithOptionals = append(c.hooks.MessageWithOptionals, hooks...)
}

// Create returns a create builder for MessageWithOptionals.
func (c *MessageWithOptionalsClient) Create() *MessageWithOptionalsCreate {
	mutation := newMessageWithOptionalsMutation(c.config, OpCreate)
	return &MessageWithOptionalsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MessageWithOptionals entities.
func (c *MessageWithOptionalsClient) CreateBulk(builders ...*MessageWithOptionalsCreate) *MessageWithOptionalsCreateBulk {
	return &MessageWithOptionalsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MessageWithOptionals.
func (c *MessageWithOptionalsClient) Update() *MessageWithOptionalsUpdate {
	mutation := newMessageWithOptionalsMutation(c.config, OpUpdate)
	return &MessageWithOptionalsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MessageWithOptionalsClient) UpdateOne(mwo *MessageWithOptionals) *MessageWithOptionalsUpdateOne {
	mutation := newMessageWithOptionalsMutation(c.config, OpUpdateOne, withMessageWithOptionals(mwo))
	return &MessageWithOptionalsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MessageWithOptionalsClient) UpdateOneID(id int) *MessageWithOptionalsUpdateOne {
	mutation := newMessageWithOptionalsMutation(c.config, OpUpdateOne, withMessageWithOptionalsID(id))
	return &MessageWithOptionalsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MessageWithOptionals.
func (c *MessageWithOptionalsClient) Delete() *MessageWithOptionalsDelete {
	mutation := newMessageWithOptionalsMutation(c.config, OpDelete)
	return &MessageWithOptionalsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MessageWithOptionalsClient) DeleteOne(mwo *MessageWithOptionals) *MessageWithOptionalsDeleteOne {
	return c.DeleteOneID(mwo.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MessageWithOptionalsClient) DeleteOneID(id int) *MessageWithOptionalsDeleteOne {
	builder := c.Delete().Where(messagewithoptionals.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MessageWithOptionalsDeleteOne{builder}
}

// Query returns a query builder for MessageWithOptionals.
func (c *MessageWithOptionalsClient) Query() *MessageWithOptionalsQuery {
	return &MessageWithOptionalsQuery{config: c.config}
}

// Get returns a MessageWithOptionals entity by its id.
func (c *MessageWithOptionalsClient) Get(ctx context.Context, id int) (*MessageWithOptionals, error) {
	return c.Query().Where(messagewithoptionals.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MessageWithOptionalsClient) GetX(ctx context.Context, id int) *MessageWithOptionals {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MessageWithOptionalsClient) Hooks() []Hook {
	return c.hooks.MessageWithOptionals
}

// MessageWithPackageNameClient is a client for the MessageWithPackageName schema.
type MessageWithPackageNameClient struct {
	config
}

// NewMessageWithPackageNameClient returns a client for the MessageWithPackageName from the given config.
func NewMessageWithPackageNameClient(c config) *MessageWithPackageNameClient {
	return &MessageWithPackageNameClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `messagewithpackagename.Hooks(f(g(h())))`.
func (c *MessageWithPackageNameClient) Use(hooks ...Hook) {
	c.hooks.MessageWithPackageName = append(c.hooks.MessageWithPackageName, hooks...)
}

// Create returns a create builder for MessageWithPackageName.
func (c *MessageWithPackageNameClient) Create() *MessageWithPackageNameCreate {
	mutation := newMessageWithPackageNameMutation(c.config, OpCreate)
	return &MessageWithPackageNameCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MessageWithPackageName entities.
func (c *MessageWithPackageNameClient) CreateBulk(builders ...*MessageWithPackageNameCreate) *MessageWithPackageNameCreateBulk {
	return &MessageWithPackageNameCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MessageWithPackageName.
func (c *MessageWithPackageNameClient) Update() *MessageWithPackageNameUpdate {
	mutation := newMessageWithPackageNameMutation(c.config, OpUpdate)
	return &MessageWithPackageNameUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MessageWithPackageNameClient) UpdateOne(mwpn *MessageWithPackageName) *MessageWithPackageNameUpdateOne {
	mutation := newMessageWithPackageNameMutation(c.config, OpUpdateOne, withMessageWithPackageName(mwpn))
	return &MessageWithPackageNameUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MessageWithPackageNameClient) UpdateOneID(id int) *MessageWithPackageNameUpdateOne {
	mutation := newMessageWithPackageNameMutation(c.config, OpUpdateOne, withMessageWithPackageNameID(id))
	return &MessageWithPackageNameUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MessageWithPackageName.
func (c *MessageWithPackageNameClient) Delete() *MessageWithPackageNameDelete {
	mutation := newMessageWithPackageNameMutation(c.config, OpDelete)
	return &MessageWithPackageNameDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MessageWithPackageNameClient) DeleteOne(mwpn *MessageWithPackageName) *MessageWithPackageNameDeleteOne {
	return c.DeleteOneID(mwpn.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MessageWithPackageNameClient) DeleteOneID(id int) *MessageWithPackageNameDeleteOne {
	builder := c.Delete().Where(messagewithpackagename.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MessageWithPackageNameDeleteOne{builder}
}

// Query returns a query builder for MessageWithPackageName.
func (c *MessageWithPackageNameClient) Query() *MessageWithPackageNameQuery {
	return &MessageWithPackageNameQuery{config: c.config}
}

// Get returns a MessageWithPackageName entity by its id.
func (c *MessageWithPackageNameClient) Get(ctx context.Context, id int) (*MessageWithPackageName, error) {
	return c.Query().Where(messagewithpackagename.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MessageWithPackageNameClient) GetX(ctx context.Context, id int) *MessageWithPackageName {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MessageWithPackageNameClient) Hooks() []Hook {
	return c.hooks.MessageWithPackageName
}

// PortalClient is a client for the Portal schema.
type PortalClient struct {
	config
}

// NewPortalClient returns a client for the Portal from the given config.
func NewPortalClient(c config) *PortalClient {
	return &PortalClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `portal.Hooks(f(g(h())))`.
func (c *PortalClient) Use(hooks ...Hook) {
	c.hooks.Portal = append(c.hooks.Portal, hooks...)
}

// Create returns a create builder for Portal.
func (c *PortalClient) Create() *PortalCreate {
	mutation := newPortalMutation(c.config, OpCreate)
	return &PortalCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Portal entities.
func (c *PortalClient) CreateBulk(builders ...*PortalCreate) *PortalCreateBulk {
	return &PortalCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Portal.
func (c *PortalClient) Update() *PortalUpdate {
	mutation := newPortalMutation(c.config, OpUpdate)
	return &PortalUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PortalClient) UpdateOne(po *Portal) *PortalUpdateOne {
	mutation := newPortalMutation(c.config, OpUpdateOne, withPortal(po))
	return &PortalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PortalClient) UpdateOneID(id int) *PortalUpdateOne {
	mutation := newPortalMutation(c.config, OpUpdateOne, withPortalID(id))
	return &PortalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Portal.
func (c *PortalClient) Delete() *PortalDelete {
	mutation := newPortalMutation(c.config, OpDelete)
	return &PortalDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PortalClient) DeleteOne(po *Portal) *PortalDeleteOne {
	return c.DeleteOneID(po.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PortalClient) DeleteOneID(id int) *PortalDeleteOne {
	builder := c.Delete().Where(portal.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PortalDeleteOne{builder}
}

// Query returns a query builder for Portal.
func (c *PortalClient) Query() *PortalQuery {
	return &PortalQuery{config: c.config}
}

// Get returns a Portal entity by its id.
func (c *PortalClient) Get(ctx context.Context, id int) (*Portal, error) {
	return c.Query().Where(portal.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PortalClient) GetX(ctx context.Context, id int) *Portal {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCategory queries the category edge of a Portal.
func (c *PortalClient) QueryCategory(po *Portal) *CategoryQuery {
	query := &CategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := po.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(portal.Table, portal.FieldID, id),
			sqlgraph.To(category.Table, category.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, portal.CategoryTable, portal.CategoryColumn),
		)
		fromV = sqlgraph.Neighbors(po.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PortalClient) Hooks() []Hook {
	return c.hooks.Portal
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{config: c.config}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBlogPosts queries the blog_posts edge of a User.
func (c *UserClient) QueryBlogPosts(u *User) *BlogPostQuery {
	query := &BlogPostQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(blogpost.Table, blogpost.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.BlogPostsTable, user.BlogPostsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProfilePic queries the profile_pic edge of a User.
func (c *UserClient) QueryProfilePic(u *User) *ImageQuery {
	query := &ImageQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(image.Table, image.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, user.ProfilePicTable, user.ProfilePicColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// ValidMessageClient is a client for the ValidMessage schema.
type ValidMessageClient struct {
	config
}

// NewValidMessageClient returns a client for the ValidMessage from the given config.
func NewValidMessageClient(c config) *ValidMessageClient {
	return &ValidMessageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `validmessage.Hooks(f(g(h())))`.
func (c *ValidMessageClient) Use(hooks ...Hook) {
	c.hooks.ValidMessage = append(c.hooks.ValidMessage, hooks...)
}

// Create returns a create builder for ValidMessage.
func (c *ValidMessageClient) Create() *ValidMessageCreate {
	mutation := newValidMessageMutation(c.config, OpCreate)
	return &ValidMessageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ValidMessage entities.
func (c *ValidMessageClient) CreateBulk(builders ...*ValidMessageCreate) *ValidMessageCreateBulk {
	return &ValidMessageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ValidMessage.
func (c *ValidMessageClient) Update() *ValidMessageUpdate {
	mutation := newValidMessageMutation(c.config, OpUpdate)
	return &ValidMessageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ValidMessageClient) UpdateOne(vm *ValidMessage) *ValidMessageUpdateOne {
	mutation := newValidMessageMutation(c.config, OpUpdateOne, withValidMessage(vm))
	return &ValidMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ValidMessageClient) UpdateOneID(id int) *ValidMessageUpdateOne {
	mutation := newValidMessageMutation(c.config, OpUpdateOne, withValidMessageID(id))
	return &ValidMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ValidMessage.
func (c *ValidMessageClient) Delete() *ValidMessageDelete {
	mutation := newValidMessageMutation(c.config, OpDelete)
	return &ValidMessageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ValidMessageClient) DeleteOne(vm *ValidMessage) *ValidMessageDeleteOne {
	return c.DeleteOneID(vm.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ValidMessageClient) DeleteOneID(id int) *ValidMessageDeleteOne {
	builder := c.Delete().Where(validmessage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ValidMessageDeleteOne{builder}
}

// Query returns a query builder for ValidMessage.
func (c *ValidMessageClient) Query() *ValidMessageQuery {
	return &ValidMessageQuery{config: c.config}
}

// Get returns a ValidMessage entity by its id.
func (c *ValidMessageClient) Get(ctx context.Context, id int) (*ValidMessage, error) {
	return c.Query().Where(validmessage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ValidMessageClient) GetX(ctx context.Context, id int) *ValidMessage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ValidMessageClient) Hooks() []Hook {
	return c.hooks.ValidMessage
}
