// Code generated by ent, DO NOT EDIT.

package hook

import (
	"context"
	"fmt"

	"entgo.io/contrib/entproto/internal/entprototest/ent"
)

// The AllMethodsServiceFunc type is an adapter to allow the use of ordinary
// function as AllMethodsService mutator.
type AllMethodsServiceFunc func(context.Context, *ent.AllMethodsServiceMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AllMethodsServiceFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.AllMethodsServiceMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AllMethodsServiceMutation", m)
}

// The BlogPostFunc type is an adapter to allow the use of ordinary
// function as BlogPost mutator.
type BlogPostFunc func(context.Context, *ent.BlogPostMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BlogPostFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.BlogPostMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BlogPostMutation", m)
}

// The CategoryFunc type is an adapter to allow the use of ordinary
// function as Category mutator.
type CategoryFunc func(context.Context, *ent.CategoryMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CategoryFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CategoryMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CategoryMutation", m)
}

// The DependsOnSkippedFunc type is an adapter to allow the use of ordinary
// function as DependsOnSkipped mutator.
type DependsOnSkippedFunc func(context.Context, *ent.DependsOnSkippedMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f DependsOnSkippedFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.DependsOnSkippedMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.DependsOnSkippedMutation", m)
}

// The DuplicateNumberMessageFunc type is an adapter to allow the use of ordinary
// function as DuplicateNumberMessage mutator.
type DuplicateNumberMessageFunc func(context.Context, *ent.DuplicateNumberMessageMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f DuplicateNumberMessageFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.DuplicateNumberMessageMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.DuplicateNumberMessageMutation", m)
}

// The EnumWithConflictingValueFunc type is an adapter to allow the use of ordinary
// function as EnumWithConflictingValue mutator.
type EnumWithConflictingValueFunc func(context.Context, *ent.EnumWithConflictingValueMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f EnumWithConflictingValueFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.EnumWithConflictingValueMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.EnumWithConflictingValueMutation", m)
}

// The ExplicitSkippedMessageFunc type is an adapter to allow the use of ordinary
// function as ExplicitSkippedMessage mutator.
type ExplicitSkippedMessageFunc func(context.Context, *ent.ExplicitSkippedMessageMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ExplicitSkippedMessageFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ExplicitSkippedMessageMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ExplicitSkippedMessageMutation", m)
}

// The ImageFunc type is an adapter to allow the use of ordinary
// function as Image mutator.
type ImageFunc func(context.Context, *ent.ImageMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ImageFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ImageMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ImageMutation", m)
}

// The ImplicitSkippedMessageFunc type is an adapter to allow the use of ordinary
// function as ImplicitSkippedMessage mutator.
type ImplicitSkippedMessageFunc func(context.Context, *ent.ImplicitSkippedMessageMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ImplicitSkippedMessageFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ImplicitSkippedMessageMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ImplicitSkippedMessageMutation", m)
}

// The InvalidFieldMessageFunc type is an adapter to allow the use of ordinary
// function as InvalidFieldMessage mutator.
type InvalidFieldMessageFunc func(context.Context, *ent.InvalidFieldMessageMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f InvalidFieldMessageFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.InvalidFieldMessageMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.InvalidFieldMessageMutation", m)
}

// The MessageWithEnumFunc type is an adapter to allow the use of ordinary
// function as MessageWithEnum mutator.
type MessageWithEnumFunc func(context.Context, *ent.MessageWithEnumMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f MessageWithEnumFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.MessageWithEnumMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.MessageWithEnumMutation", m)
}

// The MessageWithFieldOneFunc type is an adapter to allow the use of ordinary
// function as MessageWithFieldOne mutator.
type MessageWithFieldOneFunc func(context.Context, *ent.MessageWithFieldOneMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f MessageWithFieldOneFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.MessageWithFieldOneMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.MessageWithFieldOneMutation", m)
}

// The MessageWithIDFunc type is an adapter to allow the use of ordinary
// function as MessageWithID mutator.
type MessageWithIDFunc func(context.Context, *ent.MessageWithIDMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f MessageWithIDFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.MessageWithIDMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.MessageWithIDMutation", m)
}

// The MessageWithIntsFunc type is an adapter to allow the use of ordinary
// function as MessageWithInts mutator.
type MessageWithIntsFunc func(context.Context, *ent.MessageWithIntsMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f MessageWithIntsFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.MessageWithIntsMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.MessageWithIntsMutation", m)
}

// The MessageWithOptionalsFunc type is an adapter to allow the use of ordinary
// function as MessageWithOptionals mutator.
type MessageWithOptionalsFunc func(context.Context, *ent.MessageWithOptionalsMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f MessageWithOptionalsFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.MessageWithOptionalsMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.MessageWithOptionalsMutation", m)
}

// The MessageWithPackageNameFunc type is an adapter to allow the use of ordinary
// function as MessageWithPackageName mutator.
type MessageWithPackageNameFunc func(context.Context, *ent.MessageWithPackageNameMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f MessageWithPackageNameFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.MessageWithPackageNameMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.MessageWithPackageNameMutation", m)
}

// The MessageWithStringsFunc type is an adapter to allow the use of ordinary
// function as MessageWithStrings mutator.
type MessageWithStringsFunc func(context.Context, *ent.MessageWithStringsMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f MessageWithStringsFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.MessageWithStringsMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.MessageWithStringsMutation", m)
}

// The NoBackrefFunc type is an adapter to allow the use of ordinary
// function as NoBackref mutator.
type NoBackrefFunc func(context.Context, *ent.NoBackrefMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f NoBackrefFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.NoBackrefMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.NoBackrefMutation", m)
}

// The OneMethodServiceFunc type is an adapter to allow the use of ordinary
// function as OneMethodService mutator.
type OneMethodServiceFunc func(context.Context, *ent.OneMethodServiceMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f OneMethodServiceFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.OneMethodServiceMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.OneMethodServiceMutation", m)
}

// The PortalFunc type is an adapter to allow the use of ordinary
// function as Portal mutator.
type PortalFunc func(context.Context, *ent.PortalMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PortalFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PortalMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PortalMutation", m)
}

// The SkipEdgeExampleFunc type is an adapter to allow the use of ordinary
// function as SkipEdgeExample mutator.
type SkipEdgeExampleFunc func(context.Context, *ent.SkipEdgeExampleMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SkipEdgeExampleFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.SkipEdgeExampleMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SkipEdgeExampleMutation", m)
}

// The TwoMethodServiceFunc type is an adapter to allow the use of ordinary
// function as TwoMethodService mutator.
type TwoMethodServiceFunc func(context.Context, *ent.TwoMethodServiceMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TwoMethodServiceFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.TwoMethodServiceMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TwoMethodServiceMutation", m)
}

// The UserFunc type is an adapter to allow the use of ordinary
// function as User mutator.
type UserFunc func(context.Context, *ent.UserMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UserFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UserMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UserMutation", m)
}

// The ValidMessageFunc type is an adapter to allow the use of ordinary
// function as ValidMessage mutator.
type ValidMessageFunc func(context.Context, *ent.ValidMessageMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ValidMessageFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ValidMessageMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ValidMessageMutation", m)
}

// Condition is a hook condition function.
type Condition func(context.Context, ent.Mutation) bool

// And groups conditions with the AND operator.
func And(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if !first(ctx, m) || !second(ctx, m) {
			return false
		}
		for _, cond := range rest {
			if !cond(ctx, m) {
				return false
			}
		}
		return true
	}
}

// Or groups conditions with the OR operator.
func Or(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if first(ctx, m) || second(ctx, m) {
			return true
		}
		for _, cond := range rest {
			if cond(ctx, m) {
				return true
			}
		}
		return false
	}
}

// Not negates a given condition.
func Not(cond Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		return !cond(ctx, m)
	}
}

// HasOp is a condition testing mutation operation.
func HasOp(op ent.Op) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		return m.Op().Is(op)
	}
}

// HasAddedFields is a condition validating `.AddedField` on fields.
func HasAddedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.AddedField(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.AddedField(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasClearedFields is a condition validating `.FieldCleared` on fields.
func HasClearedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if exists := m.FieldCleared(field); !exists {
			return false
		}
		for _, field := range fields {
			if exists := m.FieldCleared(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasFields is a condition validating `.Field` on fields.
func HasFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.Field(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.Field(field); !exists {
				return false
			}
		}
		return true
	}
}

// If executes the given hook under condition.
//
//	hook.If(ComputeAverage, And(HasFields(...), HasAddedFields(...)))
func If(hk ent.Hook, cond Condition) ent.Hook {
	return func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if cond(ctx, m) {
				return hk(next).Mutate(ctx, m)
			}
			return next.Mutate(ctx, m)
		})
	}
}

// On executes the given hook only for the given operation.
//
//	hook.On(Log, ent.Delete|ent.Create)
func On(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, HasOp(op))
}

// Unless skips the given hook only for the given operation.
//
//	hook.Unless(Log, ent.Update|ent.UpdateOne)
func Unless(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, Not(HasOp(op)))
}

// FixedError is a hook returning a fixed error.
func FixedError(err error) ent.Hook {
	return func(ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(context.Context, ent.Mutation) (ent.Value, error) {
			return nil, err
		})
	}
}

// Reject returns a hook that rejects all operations that match op.
//
//	func (T) Hooks() []ent.Hook {
//		return []ent.Hook{
//			Reject(ent.Delete|ent.Update),
//		}
//	}
func Reject(op ent.Op) ent.Hook {
	hk := FixedError(fmt.Errorf("%s operation is not allowed", op))
	return On(hk, op)
}

// Chain acts as a list of hooks and is effectively immutable.
// Once created, it will always hold the same set of hooks in the same order.
type Chain struct {
	hooks []ent.Hook
}

// NewChain creates a new chain of hooks.
func NewChain(hooks ...ent.Hook) Chain {
	return Chain{append([]ent.Hook(nil), hooks...)}
}

// Hook chains the list of hooks and returns the final hook.
func (c Chain) Hook() ent.Hook {
	return func(mutator ent.Mutator) ent.Mutator {
		for i := len(c.hooks) - 1; i >= 0; i-- {
			mutator = c.hooks[i](mutator)
		}
		return mutator
	}
}

// Append extends a chain, adding the specified hook
// as the last ones in the mutation flow.
func (c Chain) Append(hooks ...ent.Hook) Chain {
	newHooks := make([]ent.Hook, 0, len(c.hooks)+len(hooks))
	newHooks = append(newHooks, c.hooks...)
	newHooks = append(newHooks, hooks...)
	return Chain{newHooks}
}

// Extend extends a chain, adding the specified chain
// as the last ones in the mutation flow.
func (c Chain) Extend(chain Chain) Chain {
	return c.Append(chain.hooks...)
}
