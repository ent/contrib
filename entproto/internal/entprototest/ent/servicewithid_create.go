// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/contrib/entproto/internal/entprototest/ent/servicewithid"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ServiceWithIDCreate is the builder for creating a ServiceWithID entity.
type ServiceWithIDCreate struct {
	config
	mutation *ServiceWithIDMutation
	hooks    []Hook
}

// SetID sets the "id" field.
func (swic *ServiceWithIDCreate) SetID(i int32) *ServiceWithIDCreate {
	swic.mutation.SetID(i)
	return swic
}

// Mutation returns the ServiceWithIDMutation object of the builder.
func (swic *ServiceWithIDCreate) Mutation() *ServiceWithIDMutation {
	return swic.mutation
}

// Save creates the ServiceWithID in the database.
func (swic *ServiceWithIDCreate) Save(ctx context.Context) (*ServiceWithID, error) {
	var (
		err  error
		node *ServiceWithID
	)
	if len(swic.hooks) == 0 {
		if err = swic.check(); err != nil {
			return nil, err
		}
		node, err = swic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ServiceWithIDMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = swic.check(); err != nil {
				return nil, err
			}
			swic.mutation = mutation
			if node, err = swic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(swic.hooks) - 1; i >= 0; i-- {
			if swic.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = swic.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, swic.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ServiceWithID)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ServiceWithIDMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (swic *ServiceWithIDCreate) SaveX(ctx context.Context) *ServiceWithID {
	v, err := swic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (swic *ServiceWithIDCreate) Exec(ctx context.Context) error {
	_, err := swic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (swic *ServiceWithIDCreate) ExecX(ctx context.Context) {
	if err := swic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (swic *ServiceWithIDCreate) check() error {
	return nil
}

func (swic *ServiceWithIDCreate) sqlSave(ctx context.Context) (*ServiceWithID, error) {
	_node, _spec := swic.createSpec()
	if err := sqlgraph.CreateNode(ctx, swic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	return _node, nil
}

func (swic *ServiceWithIDCreate) createSpec() (*ServiceWithID, *sqlgraph.CreateSpec) {
	var (
		_node = &ServiceWithID{config: swic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: servicewithid.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt32,
				Column: servicewithid.FieldID,
			},
		}
	)
	if id, ok := swic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	return _node, _spec
}

// ServiceWithIDCreateBulk is the builder for creating many ServiceWithID entities in bulk.
type ServiceWithIDCreateBulk struct {
	config
	builders []*ServiceWithIDCreate
}

// Save creates the ServiceWithID entities in the database.
func (swicb *ServiceWithIDCreateBulk) Save(ctx context.Context) ([]*ServiceWithID, error) {
	specs := make([]*sqlgraph.CreateSpec, len(swicb.builders))
	nodes := make([]*ServiceWithID, len(swicb.builders))
	mutators := make([]Mutator, len(swicb.builders))
	for i := range swicb.builders {
		func(i int, root context.Context) {
			builder := swicb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ServiceWithIDMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, swicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, swicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, swicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (swicb *ServiceWithIDCreateBulk) SaveX(ctx context.Context) []*ServiceWithID {
	v, err := swicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (swicb *ServiceWithIDCreateBulk) Exec(ctx context.Context) error {
	_, err := swicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (swicb *ServiceWithIDCreateBulk) ExecX(ctx context.Context) {
	if err := swicb.Exec(ctx); err != nil {
		panic(err)
	}
}
