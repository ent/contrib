// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/contrib/entproto/internal/entprototest/ent/explicitskippedmessage"
	"entgo.io/contrib/entproto/internal/entprototest/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExplicitSkippedMessageDelete is the builder for deleting a ExplicitSkippedMessage entity.
type ExplicitSkippedMessageDelete struct {
	config
	hooks    []Hook
	mutation *ExplicitSkippedMessageMutation
}

// Where appends a list predicates to the ExplicitSkippedMessageDelete builder.
func (esmd *ExplicitSkippedMessageDelete) Where(ps ...predicate.ExplicitSkippedMessage) *ExplicitSkippedMessageDelete {
	esmd.mutation.Where(ps...)
	return esmd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (esmd *ExplicitSkippedMessageDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, esmd.sqlExec, esmd.mutation, esmd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (esmd *ExplicitSkippedMessageDelete) ExecX(ctx context.Context) int {
	n, err := esmd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (esmd *ExplicitSkippedMessageDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(explicitskippedmessage.Table, sqlgraph.NewFieldSpec(explicitskippedmessage.FieldID, field.TypeInt))
	if ps := esmd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, esmd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	esmd.mutation.done = true
	return affected, err
}

// ExplicitSkippedMessageDeleteOne is the builder for deleting a single ExplicitSkippedMessage entity.
type ExplicitSkippedMessageDeleteOne struct {
	esmd *ExplicitSkippedMessageDelete
}

// Where appends a list predicates to the ExplicitSkippedMessageDelete builder.
func (esmdo *ExplicitSkippedMessageDeleteOne) Where(ps ...predicate.ExplicitSkippedMessage) *ExplicitSkippedMessageDeleteOne {
	esmdo.esmd.mutation.Where(ps...)
	return esmdo
}

// Exec executes the deletion query.
func (esmdo *ExplicitSkippedMessageDeleteOne) Exec(ctx context.Context) error {
	n, err := esmdo.esmd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{explicitskippedmessage.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (esmdo *ExplicitSkippedMessageDeleteOne) ExecX(ctx context.Context) {
	if err := esmdo.Exec(ctx); err != nil {
		panic(err)
	}
}
