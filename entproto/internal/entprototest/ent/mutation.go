// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/contrib/entproto/internal/entprototest/ent/blogpost"
	"entgo.io/contrib/entproto/internal/entprototest/ent/category"
	"entgo.io/contrib/entproto/internal/entprototest/ent/dependsonskipped"
	"entgo.io/contrib/entproto/internal/entprototest/ent/duplicatenumbermessage"
	"entgo.io/contrib/entproto/internal/entprototest/ent/enumwithconflictingvalue"
	"entgo.io/contrib/entproto/internal/entprototest/ent/image"
	"entgo.io/contrib/entproto/internal/entprototest/ent/invalidfieldmessage"
	"entgo.io/contrib/entproto/internal/entprototest/ent/messagewithenum"
	"entgo.io/contrib/entproto/internal/entprototest/ent/messagewithfieldone"
	"entgo.io/contrib/entproto/internal/entprototest/ent/messagewithints"
	"entgo.io/contrib/entproto/internal/entprototest/ent/messagewithoptionals"
	"entgo.io/contrib/entproto/internal/entprototest/ent/messagewithpackagename"
	"entgo.io/contrib/entproto/internal/entprototest/ent/messagewithstrings"
	"entgo.io/contrib/entproto/internal/entprototest/ent/nobackref"
	"entgo.io/contrib/entproto/internal/entprototest/ent/portal"
	"entgo.io/contrib/entproto/internal/entprototest/ent/predicate"
	"entgo.io/contrib/entproto/internal/entprototest/ent/schema"
	"entgo.io/contrib/entproto/internal/entprototest/ent/skipedgeexample"
	"entgo.io/contrib/entproto/internal/entprototest/ent/user"
	"entgo.io/contrib/entproto/internal/entprototest/ent/validmessage"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAllMethodsService        = "AllMethodsService"
	TypeBlogPost                 = "BlogPost"
	TypeCategory                 = "Category"
	TypeDependsOnSkipped         = "DependsOnSkipped"
	TypeDuplicateNumberMessage   = "DuplicateNumberMessage"
	TypeEnumWithConflictingValue = "EnumWithConflictingValue"
	TypeExplicitSkippedMessage   = "ExplicitSkippedMessage"
	TypeImage                    = "Image"
	TypeImplicitSkippedMessage   = "ImplicitSkippedMessage"
	TypeInvalidFieldMessage      = "InvalidFieldMessage"
	TypeMessageWithEnum          = "MessageWithEnum"
	TypeMessageWithFieldOne      = "MessageWithFieldOne"
	TypeMessageWithID            = "MessageWithID"
	TypeMessageWithInts          = "MessageWithInts"
	TypeMessageWithOptionals     = "MessageWithOptionals"
	TypeMessageWithPackageName   = "MessageWithPackageName"
	TypeMessageWithStrings       = "MessageWithStrings"
	TypeNoBackref                = "NoBackref"
	TypeOneMethodService         = "OneMethodService"
	TypePortal                   = "Portal"
	TypeSkipEdgeExample          = "SkipEdgeExample"
	TypeTwoMethodService         = "TwoMethodService"
	TypeUser                     = "User"
	TypeValidMessage             = "ValidMessage"
)

// AllMethodsServiceMutation represents an operation that mutates the AllMethodsService nodes in the graph.
type AllMethodsServiceMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*AllMethodsService, error)
	predicates    []predicate.AllMethodsService
}

var _ ent.Mutation = (*AllMethodsServiceMutation)(nil)

// allmethodsserviceOption allows management of the mutation configuration using functional options.
type allmethodsserviceOption func(*AllMethodsServiceMutation)

// newAllMethodsServiceMutation creates new mutation for the AllMethodsService entity.
func newAllMethodsServiceMutation(c config, op Op, opts ...allmethodsserviceOption) *AllMethodsServiceMutation {
	m := &AllMethodsServiceMutation{
		config:        c,
		op:            op,
		typ:           TypeAllMethodsService,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAllMethodsServiceID sets the ID field of the mutation.
func withAllMethodsServiceID(id int) allmethodsserviceOption {
	return func(m *AllMethodsServiceMutation) {
		var (
			err   error
			once  sync.Once
			value *AllMethodsService
		)
		m.oldValue = func(ctx context.Context) (*AllMethodsService, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AllMethodsService.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAllMethodsService sets the old AllMethodsService of the mutation.
func withAllMethodsService(node *AllMethodsService) allmethodsserviceOption {
	return func(m *AllMethodsServiceMutation) {
		m.oldValue = func(context.Context) (*AllMethodsService, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AllMethodsServiceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AllMethodsServiceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AllMethodsServiceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AllMethodsServiceMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AllMethodsService.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// Where appends a list predicates to the AllMethodsServiceMutation builder.
func (m *AllMethodsServiceMutation) Where(ps ...predicate.AllMethodsService) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AllMethodsServiceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AllMethodsServiceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.AllMethodsService, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AllMethodsServiceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AllMethodsServiceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (AllMethodsService).
func (m *AllMethodsServiceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AllMethodsServiceMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AllMethodsServiceMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AllMethodsServiceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown AllMethodsService field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AllMethodsServiceMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown AllMethodsService field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AllMethodsServiceMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AllMethodsServiceMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AllMethodsServiceMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown AllMethodsService numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AllMethodsServiceMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AllMethodsServiceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AllMethodsServiceMutation) ClearField(name string) error {
	return fmt.Errorf("unknown AllMethodsService nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AllMethodsServiceMutation) ResetField(name string) error {
	return fmt.Errorf("unknown AllMethodsService field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AllMethodsServiceMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AllMethodsServiceMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AllMethodsServiceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AllMethodsServiceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AllMethodsServiceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AllMethodsServiceMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AllMethodsServiceMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown AllMethodsService unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AllMethodsServiceMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown AllMethodsService edge %s", name)
}

// BlogPostMutation represents an operation that mutates the BlogPost nodes in the graph.
type BlogPostMutation struct {
	config
	op                Op
	typ               string
	id                *int
	title             *string
	body              *string
	external_id       *int
	addexternal_id    *int
	clearedFields     map[string]struct{}
	author            *int
	clearedauthor     bool
	categories        map[int]struct{}
	removedcategories map[int]struct{}
	clearedcategories bool
	done              bool
	oldValue          func(context.Context) (*BlogPost, error)
	predicates        []predicate.BlogPost
}

var _ ent.Mutation = (*BlogPostMutation)(nil)

// blogpostOption allows management of the mutation configuration using functional options.
type blogpostOption func(*BlogPostMutation)

// newBlogPostMutation creates new mutation for the BlogPost entity.
func newBlogPostMutation(c config, op Op, opts ...blogpostOption) *BlogPostMutation {
	m := &BlogPostMutation{
		config:        c,
		op:            op,
		typ:           TypeBlogPost,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBlogPostID sets the ID field of the mutation.
func withBlogPostID(id int) blogpostOption {
	return func(m *BlogPostMutation) {
		var (
			err   error
			once  sync.Once
			value *BlogPost
		)
		m.oldValue = func(ctx context.Context) (*BlogPost, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().BlogPost.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBlogPost sets the old BlogPost of the mutation.
func withBlogPost(node *BlogPost) blogpostOption {
	return func(m *BlogPostMutation) {
		m.oldValue = func(context.Context) (*BlogPost, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BlogPostMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BlogPostMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BlogPostMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BlogPostMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().BlogPost.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTitle sets the "title" field.
func (m *BlogPostMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *BlogPostMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the BlogPost entity.
// If the BlogPost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlogPostMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *BlogPostMutation) ResetTitle() {
	m.title = nil
}

// SetBody sets the "body" field.
func (m *BlogPostMutation) SetBody(s string) {
	m.body = &s
}

// Body returns the value of the "body" field in the mutation.
func (m *BlogPostMutation) Body() (r string, exists bool) {
	v := m.body
	if v == nil {
		return
	}
	return *v, true
}

// OldBody returns the old "body" field's value of the BlogPost entity.
// If the BlogPost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlogPostMutation) OldBody(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBody is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBody requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBody: %w", err)
	}
	return oldValue.Body, nil
}

// ResetBody resets all changes to the "body" field.
func (m *BlogPostMutation) ResetBody() {
	m.body = nil
}

// SetExternalID sets the "external_id" field.
func (m *BlogPostMutation) SetExternalID(i int) {
	m.external_id = &i
	m.addexternal_id = nil
}

// ExternalID returns the value of the "external_id" field in the mutation.
func (m *BlogPostMutation) ExternalID() (r int, exists bool) {
	v := m.external_id
	if v == nil {
		return
	}
	return *v, true
}

// OldExternalID returns the old "external_id" field's value of the BlogPost entity.
// If the BlogPost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlogPostMutation) OldExternalID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExternalID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExternalID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExternalID: %w", err)
	}
	return oldValue.ExternalID, nil
}

// AddExternalID adds i to the "external_id" field.
func (m *BlogPostMutation) AddExternalID(i int) {
	if m.addexternal_id != nil {
		*m.addexternal_id += i
	} else {
		m.addexternal_id = &i
	}
}

// AddedExternalID returns the value that was added to the "external_id" field in this mutation.
func (m *BlogPostMutation) AddedExternalID() (r int, exists bool) {
	v := m.addexternal_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetExternalID resets all changes to the "external_id" field.
func (m *BlogPostMutation) ResetExternalID() {
	m.external_id = nil
	m.addexternal_id = nil
}

// SetAuthorID sets the "author" edge to the User entity by id.
func (m *BlogPostMutation) SetAuthorID(id int) {
	m.author = &id
}

// ClearAuthor clears the "author" edge to the User entity.
func (m *BlogPostMutation) ClearAuthor() {
	m.clearedauthor = true
}

// AuthorCleared reports if the "author" edge to the User entity was cleared.
func (m *BlogPostMutation) AuthorCleared() bool {
	return m.clearedauthor
}

// AuthorID returns the "author" edge ID in the mutation.
func (m *BlogPostMutation) AuthorID() (id int, exists bool) {
	if m.author != nil {
		return *m.author, true
	}
	return
}

// AuthorIDs returns the "author" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AuthorID instead. It exists only for internal usage by the builders.
func (m *BlogPostMutation) AuthorIDs() (ids []int) {
	if id := m.author; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAuthor resets all changes to the "author" edge.
func (m *BlogPostMutation) ResetAuthor() {
	m.author = nil
	m.clearedauthor = false
}

// AddCategoryIDs adds the "categories" edge to the Category entity by ids.
func (m *BlogPostMutation) AddCategoryIDs(ids ...int) {
	if m.categories == nil {
		m.categories = make(map[int]struct{})
	}
	for i := range ids {
		m.categories[ids[i]] = struct{}{}
	}
}

// ClearCategories clears the "categories" edge to the Category entity.
func (m *BlogPostMutation) ClearCategories() {
	m.clearedcategories = true
}

// CategoriesCleared reports if the "categories" edge to the Category entity was cleared.
func (m *BlogPostMutation) CategoriesCleared() bool {
	return m.clearedcategories
}

// RemoveCategoryIDs removes the "categories" edge to the Category entity by IDs.
func (m *BlogPostMutation) RemoveCategoryIDs(ids ...int) {
	if m.removedcategories == nil {
		m.removedcategories = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.categories, ids[i])
		m.removedcategories[ids[i]] = struct{}{}
	}
}

// RemovedCategories returns the removed IDs of the "categories" edge to the Category entity.
func (m *BlogPostMutation) RemovedCategoriesIDs() (ids []int) {
	for id := range m.removedcategories {
		ids = append(ids, id)
	}
	return
}

// CategoriesIDs returns the "categories" edge IDs in the mutation.
func (m *BlogPostMutation) CategoriesIDs() (ids []int) {
	for id := range m.categories {
		ids = append(ids, id)
	}
	return
}

// ResetCategories resets all changes to the "categories" edge.
func (m *BlogPostMutation) ResetCategories() {
	m.categories = nil
	m.clearedcategories = false
	m.removedcategories = nil
}

// Where appends a list predicates to the BlogPostMutation builder.
func (m *BlogPostMutation) Where(ps ...predicate.BlogPost) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BlogPostMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BlogPostMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.BlogPost, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BlogPostMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BlogPostMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (BlogPost).
func (m *BlogPostMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BlogPostMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.title != nil {
		fields = append(fields, blogpost.FieldTitle)
	}
	if m.body != nil {
		fields = append(fields, blogpost.FieldBody)
	}
	if m.external_id != nil {
		fields = append(fields, blogpost.FieldExternalID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BlogPostMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case blogpost.FieldTitle:
		return m.Title()
	case blogpost.FieldBody:
		return m.Body()
	case blogpost.FieldExternalID:
		return m.ExternalID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BlogPostMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case blogpost.FieldTitle:
		return m.OldTitle(ctx)
	case blogpost.FieldBody:
		return m.OldBody(ctx)
	case blogpost.FieldExternalID:
		return m.OldExternalID(ctx)
	}
	return nil, fmt.Errorf("unknown BlogPost field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BlogPostMutation) SetField(name string, value ent.Value) error {
	switch name {
	case blogpost.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case blogpost.FieldBody:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBody(v)
		return nil
	case blogpost.FieldExternalID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExternalID(v)
		return nil
	}
	return fmt.Errorf("unknown BlogPost field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BlogPostMutation) AddedFields() []string {
	var fields []string
	if m.addexternal_id != nil {
		fields = append(fields, blogpost.FieldExternalID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BlogPostMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case blogpost.FieldExternalID:
		return m.AddedExternalID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BlogPostMutation) AddField(name string, value ent.Value) error {
	switch name {
	case blogpost.FieldExternalID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddExternalID(v)
		return nil
	}
	return fmt.Errorf("unknown BlogPost numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BlogPostMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BlogPostMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BlogPostMutation) ClearField(name string) error {
	return fmt.Errorf("unknown BlogPost nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BlogPostMutation) ResetField(name string) error {
	switch name {
	case blogpost.FieldTitle:
		m.ResetTitle()
		return nil
	case blogpost.FieldBody:
		m.ResetBody()
		return nil
	case blogpost.FieldExternalID:
		m.ResetExternalID()
		return nil
	}
	return fmt.Errorf("unknown BlogPost field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BlogPostMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.author != nil {
		edges = append(edges, blogpost.EdgeAuthor)
	}
	if m.categories != nil {
		edges = append(edges, blogpost.EdgeCategories)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BlogPostMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case blogpost.EdgeAuthor:
		if id := m.author; id != nil {
			return []ent.Value{*id}
		}
	case blogpost.EdgeCategories:
		ids := make([]ent.Value, 0, len(m.categories))
		for id := range m.categories {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BlogPostMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedcategories != nil {
		edges = append(edges, blogpost.EdgeCategories)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BlogPostMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case blogpost.EdgeCategories:
		ids := make([]ent.Value, 0, len(m.removedcategories))
		for id := range m.removedcategories {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BlogPostMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedauthor {
		edges = append(edges, blogpost.EdgeAuthor)
	}
	if m.clearedcategories {
		edges = append(edges, blogpost.EdgeCategories)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BlogPostMutation) EdgeCleared(name string) bool {
	switch name {
	case blogpost.EdgeAuthor:
		return m.clearedauthor
	case blogpost.EdgeCategories:
		return m.clearedcategories
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BlogPostMutation) ClearEdge(name string) error {
	switch name {
	case blogpost.EdgeAuthor:
		m.ClearAuthor()
		return nil
	}
	return fmt.Errorf("unknown BlogPost unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BlogPostMutation) ResetEdge(name string) error {
	switch name {
	case blogpost.EdgeAuthor:
		m.ResetAuthor()
		return nil
	case blogpost.EdgeCategories:
		m.ResetCategories()
		return nil
	}
	return fmt.Errorf("unknown BlogPost edge %s", name)
}

// CategoryMutation represents an operation that mutates the Category nodes in the graph.
type CategoryMutation struct {
	config
	op                Op
	typ               string
	id                *int
	name              *string
	description       *string
	clearedFields     map[string]struct{}
	blog_posts        map[int]struct{}
	removedblog_posts map[int]struct{}
	clearedblog_posts bool
	done              bool
	oldValue          func(context.Context) (*Category, error)
	predicates        []predicate.Category
}

var _ ent.Mutation = (*CategoryMutation)(nil)

// categoryOption allows management of the mutation configuration using functional options.
type categoryOption func(*CategoryMutation)

// newCategoryMutation creates new mutation for the Category entity.
func newCategoryMutation(c config, op Op, opts ...categoryOption) *CategoryMutation {
	m := &CategoryMutation{
		config:        c,
		op:            op,
		typ:           TypeCategory,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCategoryID sets the ID field of the mutation.
func withCategoryID(id int) categoryOption {
	return func(m *CategoryMutation) {
		var (
			err   error
			once  sync.Once
			value *Category
		)
		m.oldValue = func(ctx context.Context) (*Category, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Category.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCategory sets the old Category of the mutation.
func withCategory(node *Category) categoryOption {
	return func(m *CategoryMutation) {
		m.oldValue = func(context.Context) (*Category, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CategoryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CategoryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CategoryMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CategoryMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Category.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *CategoryMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CategoryMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Category entity.
// If the Category object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CategoryMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CategoryMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *CategoryMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *CategoryMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Category entity.
// If the Category object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CategoryMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *CategoryMutation) ResetDescription() {
	m.description = nil
}

// AddBlogPostIDs adds the "blog_posts" edge to the BlogPost entity by ids.
func (m *CategoryMutation) AddBlogPostIDs(ids ...int) {
	if m.blog_posts == nil {
		m.blog_posts = make(map[int]struct{})
	}
	for i := range ids {
		m.blog_posts[ids[i]] = struct{}{}
	}
}

// ClearBlogPosts clears the "blog_posts" edge to the BlogPost entity.
func (m *CategoryMutation) ClearBlogPosts() {
	m.clearedblog_posts = true
}

// BlogPostsCleared reports if the "blog_posts" edge to the BlogPost entity was cleared.
func (m *CategoryMutation) BlogPostsCleared() bool {
	return m.clearedblog_posts
}

// RemoveBlogPostIDs removes the "blog_posts" edge to the BlogPost entity by IDs.
func (m *CategoryMutation) RemoveBlogPostIDs(ids ...int) {
	if m.removedblog_posts == nil {
		m.removedblog_posts = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.blog_posts, ids[i])
		m.removedblog_posts[ids[i]] = struct{}{}
	}
}

// RemovedBlogPosts returns the removed IDs of the "blog_posts" edge to the BlogPost entity.
func (m *CategoryMutation) RemovedBlogPostsIDs() (ids []int) {
	for id := range m.removedblog_posts {
		ids = append(ids, id)
	}
	return
}

// BlogPostsIDs returns the "blog_posts" edge IDs in the mutation.
func (m *CategoryMutation) BlogPostsIDs() (ids []int) {
	for id := range m.blog_posts {
		ids = append(ids, id)
	}
	return
}

// ResetBlogPosts resets all changes to the "blog_posts" edge.
func (m *CategoryMutation) ResetBlogPosts() {
	m.blog_posts = nil
	m.clearedblog_posts = false
	m.removedblog_posts = nil
}

// Where appends a list predicates to the CategoryMutation builder.
func (m *CategoryMutation) Where(ps ...predicate.Category) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CategoryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CategoryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Category, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CategoryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CategoryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Category).
func (m *CategoryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CategoryMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, category.FieldName)
	}
	if m.description != nil {
		fields = append(fields, category.FieldDescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CategoryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case category.FieldName:
		return m.Name()
	case category.FieldDescription:
		return m.Description()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CategoryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case category.FieldName:
		return m.OldName(ctx)
	case category.FieldDescription:
		return m.OldDescription(ctx)
	}
	return nil, fmt.Errorf("unknown Category field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CategoryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case category.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case category.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	}
	return fmt.Errorf("unknown Category field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CategoryMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CategoryMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CategoryMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Category numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CategoryMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CategoryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CategoryMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Category nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CategoryMutation) ResetField(name string) error {
	switch name {
	case category.FieldName:
		m.ResetName()
		return nil
	case category.FieldDescription:
		m.ResetDescription()
		return nil
	}
	return fmt.Errorf("unknown Category field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CategoryMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.blog_posts != nil {
		edges = append(edges, category.EdgeBlogPosts)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CategoryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case category.EdgeBlogPosts:
		ids := make([]ent.Value, 0, len(m.blog_posts))
		for id := range m.blog_posts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CategoryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedblog_posts != nil {
		edges = append(edges, category.EdgeBlogPosts)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CategoryMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case category.EdgeBlogPosts:
		ids := make([]ent.Value, 0, len(m.removedblog_posts))
		for id := range m.removedblog_posts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CategoryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedblog_posts {
		edges = append(edges, category.EdgeBlogPosts)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CategoryMutation) EdgeCleared(name string) bool {
	switch name {
	case category.EdgeBlogPosts:
		return m.clearedblog_posts
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CategoryMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Category unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CategoryMutation) ResetEdge(name string) error {
	switch name {
	case category.EdgeBlogPosts:
		m.ResetBlogPosts()
		return nil
	}
	return fmt.Errorf("unknown Category edge %s", name)
}

// DependsOnSkippedMutation represents an operation that mutates the DependsOnSkipped nodes in the graph.
type DependsOnSkippedMutation struct {
	config
	op             Op
	typ            string
	id             *int
	name           *string
	clearedFields  map[string]struct{}
	skipped        map[int]struct{}
	removedskipped map[int]struct{}
	clearedskipped bool
	done           bool
	oldValue       func(context.Context) (*DependsOnSkipped, error)
	predicates     []predicate.DependsOnSkipped
}

var _ ent.Mutation = (*DependsOnSkippedMutation)(nil)

// dependsonskippedOption allows management of the mutation configuration using functional options.
type dependsonskippedOption func(*DependsOnSkippedMutation)

// newDependsOnSkippedMutation creates new mutation for the DependsOnSkipped entity.
func newDependsOnSkippedMutation(c config, op Op, opts ...dependsonskippedOption) *DependsOnSkippedMutation {
	m := &DependsOnSkippedMutation{
		config:        c,
		op:            op,
		typ:           TypeDependsOnSkipped,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDependsOnSkippedID sets the ID field of the mutation.
func withDependsOnSkippedID(id int) dependsonskippedOption {
	return func(m *DependsOnSkippedMutation) {
		var (
			err   error
			once  sync.Once
			value *DependsOnSkipped
		)
		m.oldValue = func(ctx context.Context) (*DependsOnSkipped, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DependsOnSkipped.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDependsOnSkipped sets the old DependsOnSkipped of the mutation.
func withDependsOnSkipped(node *DependsOnSkipped) dependsonskippedOption {
	return func(m *DependsOnSkippedMutation) {
		m.oldValue = func(context.Context) (*DependsOnSkipped, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DependsOnSkippedMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DependsOnSkippedMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DependsOnSkippedMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DependsOnSkippedMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().DependsOnSkipped.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *DependsOnSkippedMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *DependsOnSkippedMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the DependsOnSkipped entity.
// If the DependsOnSkipped object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DependsOnSkippedMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *DependsOnSkippedMutation) ResetName() {
	m.name = nil
}

// AddSkippedIDs adds the "skipped" edge to the ImplicitSkippedMessage entity by ids.
func (m *DependsOnSkippedMutation) AddSkippedIDs(ids ...int) {
	if m.skipped == nil {
		m.skipped = make(map[int]struct{})
	}
	for i := range ids {
		m.skipped[ids[i]] = struct{}{}
	}
}

// ClearSkipped clears the "skipped" edge to the ImplicitSkippedMessage entity.
func (m *DependsOnSkippedMutation) ClearSkipped() {
	m.clearedskipped = true
}

// SkippedCleared reports if the "skipped" edge to the ImplicitSkippedMessage entity was cleared.
func (m *DependsOnSkippedMutation) SkippedCleared() bool {
	return m.clearedskipped
}

// RemoveSkippedIDs removes the "skipped" edge to the ImplicitSkippedMessage entity by IDs.
func (m *DependsOnSkippedMutation) RemoveSkippedIDs(ids ...int) {
	if m.removedskipped == nil {
		m.removedskipped = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.skipped, ids[i])
		m.removedskipped[ids[i]] = struct{}{}
	}
}

// RemovedSkipped returns the removed IDs of the "skipped" edge to the ImplicitSkippedMessage entity.
func (m *DependsOnSkippedMutation) RemovedSkippedIDs() (ids []int) {
	for id := range m.removedskipped {
		ids = append(ids, id)
	}
	return
}

// SkippedIDs returns the "skipped" edge IDs in the mutation.
func (m *DependsOnSkippedMutation) SkippedIDs() (ids []int) {
	for id := range m.skipped {
		ids = append(ids, id)
	}
	return
}

// ResetSkipped resets all changes to the "skipped" edge.
func (m *DependsOnSkippedMutation) ResetSkipped() {
	m.skipped = nil
	m.clearedskipped = false
	m.removedskipped = nil
}

// Where appends a list predicates to the DependsOnSkippedMutation builder.
func (m *DependsOnSkippedMutation) Where(ps ...predicate.DependsOnSkipped) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DependsOnSkippedMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DependsOnSkippedMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.DependsOnSkipped, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DependsOnSkippedMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DependsOnSkippedMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (DependsOnSkipped).
func (m *DependsOnSkippedMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DependsOnSkippedMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, dependsonskipped.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DependsOnSkippedMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case dependsonskipped.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DependsOnSkippedMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case dependsonskipped.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown DependsOnSkipped field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DependsOnSkippedMutation) SetField(name string, value ent.Value) error {
	switch name {
	case dependsonskipped.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown DependsOnSkipped field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DependsOnSkippedMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DependsOnSkippedMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DependsOnSkippedMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown DependsOnSkipped numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DependsOnSkippedMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DependsOnSkippedMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DependsOnSkippedMutation) ClearField(name string) error {
	return fmt.Errorf("unknown DependsOnSkipped nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DependsOnSkippedMutation) ResetField(name string) error {
	switch name {
	case dependsonskipped.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown DependsOnSkipped field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DependsOnSkippedMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.skipped != nil {
		edges = append(edges, dependsonskipped.EdgeSkipped)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DependsOnSkippedMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case dependsonskipped.EdgeSkipped:
		ids := make([]ent.Value, 0, len(m.skipped))
		for id := range m.skipped {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DependsOnSkippedMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedskipped != nil {
		edges = append(edges, dependsonskipped.EdgeSkipped)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DependsOnSkippedMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case dependsonskipped.EdgeSkipped:
		ids := make([]ent.Value, 0, len(m.removedskipped))
		for id := range m.removedskipped {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DependsOnSkippedMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedskipped {
		edges = append(edges, dependsonskipped.EdgeSkipped)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DependsOnSkippedMutation) EdgeCleared(name string) bool {
	switch name {
	case dependsonskipped.EdgeSkipped:
		return m.clearedskipped
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DependsOnSkippedMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown DependsOnSkipped unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DependsOnSkippedMutation) ResetEdge(name string) error {
	switch name {
	case dependsonskipped.EdgeSkipped:
		m.ResetSkipped()
		return nil
	}
	return fmt.Errorf("unknown DependsOnSkipped edge %s", name)
}

// DuplicateNumberMessageMutation represents an operation that mutates the DuplicateNumberMessage nodes in the graph.
type DuplicateNumberMessageMutation struct {
	config
	op            Op
	typ           string
	id            *int
	hello         *string
	world         *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*DuplicateNumberMessage, error)
	predicates    []predicate.DuplicateNumberMessage
}

var _ ent.Mutation = (*DuplicateNumberMessageMutation)(nil)

// duplicatenumbermessageOption allows management of the mutation configuration using functional options.
type duplicatenumbermessageOption func(*DuplicateNumberMessageMutation)

// newDuplicateNumberMessageMutation creates new mutation for the DuplicateNumberMessage entity.
func newDuplicateNumberMessageMutation(c config, op Op, opts ...duplicatenumbermessageOption) *DuplicateNumberMessageMutation {
	m := &DuplicateNumberMessageMutation{
		config:        c,
		op:            op,
		typ:           TypeDuplicateNumberMessage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDuplicateNumberMessageID sets the ID field of the mutation.
func withDuplicateNumberMessageID(id int) duplicatenumbermessageOption {
	return func(m *DuplicateNumberMessageMutation) {
		var (
			err   error
			once  sync.Once
			value *DuplicateNumberMessage
		)
		m.oldValue = func(ctx context.Context) (*DuplicateNumberMessage, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DuplicateNumberMessage.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDuplicateNumberMessage sets the old DuplicateNumberMessage of the mutation.
func withDuplicateNumberMessage(node *DuplicateNumberMessage) duplicatenumbermessageOption {
	return func(m *DuplicateNumberMessageMutation) {
		m.oldValue = func(context.Context) (*DuplicateNumberMessage, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DuplicateNumberMessageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DuplicateNumberMessageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DuplicateNumberMessageMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DuplicateNumberMessageMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().DuplicateNumberMessage.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetHello sets the "hello" field.
func (m *DuplicateNumberMessageMutation) SetHello(s string) {
	m.hello = &s
}

// Hello returns the value of the "hello" field in the mutation.
func (m *DuplicateNumberMessageMutation) Hello() (r string, exists bool) {
	v := m.hello
	if v == nil {
		return
	}
	return *v, true
}

// OldHello returns the old "hello" field's value of the DuplicateNumberMessage entity.
// If the DuplicateNumberMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DuplicateNumberMessageMutation) OldHello(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHello is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHello requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHello: %w", err)
	}
	return oldValue.Hello, nil
}

// ResetHello resets all changes to the "hello" field.
func (m *DuplicateNumberMessageMutation) ResetHello() {
	m.hello = nil
}

// SetWorld sets the "world" field.
func (m *DuplicateNumberMessageMutation) SetWorld(s string) {
	m.world = &s
}

// World returns the value of the "world" field in the mutation.
func (m *DuplicateNumberMessageMutation) World() (r string, exists bool) {
	v := m.world
	if v == nil {
		return
	}
	return *v, true
}

// OldWorld returns the old "world" field's value of the DuplicateNumberMessage entity.
// If the DuplicateNumberMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DuplicateNumberMessageMutation) OldWorld(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWorld is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWorld requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWorld: %w", err)
	}
	return oldValue.World, nil
}

// ResetWorld resets all changes to the "world" field.
func (m *DuplicateNumberMessageMutation) ResetWorld() {
	m.world = nil
}

// Where appends a list predicates to the DuplicateNumberMessageMutation builder.
func (m *DuplicateNumberMessageMutation) Where(ps ...predicate.DuplicateNumberMessage) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DuplicateNumberMessageMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DuplicateNumberMessageMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.DuplicateNumberMessage, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DuplicateNumberMessageMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DuplicateNumberMessageMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (DuplicateNumberMessage).
func (m *DuplicateNumberMessageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DuplicateNumberMessageMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.hello != nil {
		fields = append(fields, duplicatenumbermessage.FieldHello)
	}
	if m.world != nil {
		fields = append(fields, duplicatenumbermessage.FieldWorld)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DuplicateNumberMessageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case duplicatenumbermessage.FieldHello:
		return m.Hello()
	case duplicatenumbermessage.FieldWorld:
		return m.World()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DuplicateNumberMessageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case duplicatenumbermessage.FieldHello:
		return m.OldHello(ctx)
	case duplicatenumbermessage.FieldWorld:
		return m.OldWorld(ctx)
	}
	return nil, fmt.Errorf("unknown DuplicateNumberMessage field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DuplicateNumberMessageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case duplicatenumbermessage.FieldHello:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHello(v)
		return nil
	case duplicatenumbermessage.FieldWorld:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWorld(v)
		return nil
	}
	return fmt.Errorf("unknown DuplicateNumberMessage field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DuplicateNumberMessageMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DuplicateNumberMessageMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DuplicateNumberMessageMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown DuplicateNumberMessage numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DuplicateNumberMessageMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DuplicateNumberMessageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DuplicateNumberMessageMutation) ClearField(name string) error {
	return fmt.Errorf("unknown DuplicateNumberMessage nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DuplicateNumberMessageMutation) ResetField(name string) error {
	switch name {
	case duplicatenumbermessage.FieldHello:
		m.ResetHello()
		return nil
	case duplicatenumbermessage.FieldWorld:
		m.ResetWorld()
		return nil
	}
	return fmt.Errorf("unknown DuplicateNumberMessage field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DuplicateNumberMessageMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DuplicateNumberMessageMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DuplicateNumberMessageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DuplicateNumberMessageMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DuplicateNumberMessageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DuplicateNumberMessageMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DuplicateNumberMessageMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown DuplicateNumberMessage unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DuplicateNumberMessageMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown DuplicateNumberMessage edge %s", name)
}

// EnumWithConflictingValueMutation represents an operation that mutates the EnumWithConflictingValue nodes in the graph.
type EnumWithConflictingValueMutation struct {
	config
	op            Op
	typ           string
	id            *int
	enum          *enumwithconflictingvalue.Enum
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*EnumWithConflictingValue, error)
	predicates    []predicate.EnumWithConflictingValue
}

var _ ent.Mutation = (*EnumWithConflictingValueMutation)(nil)

// enumwithconflictingvalueOption allows management of the mutation configuration using functional options.
type enumwithconflictingvalueOption func(*EnumWithConflictingValueMutation)

// newEnumWithConflictingValueMutation creates new mutation for the EnumWithConflictingValue entity.
func newEnumWithConflictingValueMutation(c config, op Op, opts ...enumwithconflictingvalueOption) *EnumWithConflictingValueMutation {
	m := &EnumWithConflictingValueMutation{
		config:        c,
		op:            op,
		typ:           TypeEnumWithConflictingValue,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEnumWithConflictingValueID sets the ID field of the mutation.
func withEnumWithConflictingValueID(id int) enumwithconflictingvalueOption {
	return func(m *EnumWithConflictingValueMutation) {
		var (
			err   error
			once  sync.Once
			value *EnumWithConflictingValue
		)
		m.oldValue = func(ctx context.Context) (*EnumWithConflictingValue, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().EnumWithConflictingValue.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEnumWithConflictingValue sets the old EnumWithConflictingValue of the mutation.
func withEnumWithConflictingValue(node *EnumWithConflictingValue) enumwithconflictingvalueOption {
	return func(m *EnumWithConflictingValueMutation) {
		m.oldValue = func(context.Context) (*EnumWithConflictingValue, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EnumWithConflictingValueMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EnumWithConflictingValueMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EnumWithConflictingValueMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EnumWithConflictingValueMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().EnumWithConflictingValue.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEnum sets the "enum" field.
func (m *EnumWithConflictingValueMutation) SetEnum(e enumwithconflictingvalue.Enum) {
	m.enum = &e
}

// Enum returns the value of the "enum" field in the mutation.
func (m *EnumWithConflictingValueMutation) Enum() (r enumwithconflictingvalue.Enum, exists bool) {
	v := m.enum
	if v == nil {
		return
	}
	return *v, true
}

// OldEnum returns the old "enum" field's value of the EnumWithConflictingValue entity.
// If the EnumWithConflictingValue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnumWithConflictingValueMutation) OldEnum(ctx context.Context) (v enumwithconflictingvalue.Enum, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnum is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnum requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnum: %w", err)
	}
	return oldValue.Enum, nil
}

// ResetEnum resets all changes to the "enum" field.
func (m *EnumWithConflictingValueMutation) ResetEnum() {
	m.enum = nil
}

// Where appends a list predicates to the EnumWithConflictingValueMutation builder.
func (m *EnumWithConflictingValueMutation) Where(ps ...predicate.EnumWithConflictingValue) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EnumWithConflictingValueMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EnumWithConflictingValueMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.EnumWithConflictingValue, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EnumWithConflictingValueMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EnumWithConflictingValueMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (EnumWithConflictingValue).
func (m *EnumWithConflictingValueMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EnumWithConflictingValueMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.enum != nil {
		fields = append(fields, enumwithconflictingvalue.FieldEnum)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EnumWithConflictingValueMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case enumwithconflictingvalue.FieldEnum:
		return m.Enum()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EnumWithConflictingValueMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case enumwithconflictingvalue.FieldEnum:
		return m.OldEnum(ctx)
	}
	return nil, fmt.Errorf("unknown EnumWithConflictingValue field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EnumWithConflictingValueMutation) SetField(name string, value ent.Value) error {
	switch name {
	case enumwithconflictingvalue.FieldEnum:
		v, ok := value.(enumwithconflictingvalue.Enum)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnum(v)
		return nil
	}
	return fmt.Errorf("unknown EnumWithConflictingValue field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EnumWithConflictingValueMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EnumWithConflictingValueMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EnumWithConflictingValueMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown EnumWithConflictingValue numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EnumWithConflictingValueMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EnumWithConflictingValueMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EnumWithConflictingValueMutation) ClearField(name string) error {
	return fmt.Errorf("unknown EnumWithConflictingValue nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EnumWithConflictingValueMutation) ResetField(name string) error {
	switch name {
	case enumwithconflictingvalue.FieldEnum:
		m.ResetEnum()
		return nil
	}
	return fmt.Errorf("unknown EnumWithConflictingValue field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EnumWithConflictingValueMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EnumWithConflictingValueMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EnumWithConflictingValueMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EnumWithConflictingValueMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EnumWithConflictingValueMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EnumWithConflictingValueMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EnumWithConflictingValueMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown EnumWithConflictingValue unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EnumWithConflictingValueMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown EnumWithConflictingValue edge %s", name)
}

// ExplicitSkippedMessageMutation represents an operation that mutates the ExplicitSkippedMessage nodes in the graph.
type ExplicitSkippedMessageMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*ExplicitSkippedMessage, error)
	predicates    []predicate.ExplicitSkippedMessage
}

var _ ent.Mutation = (*ExplicitSkippedMessageMutation)(nil)

// explicitskippedmessageOption allows management of the mutation configuration using functional options.
type explicitskippedmessageOption func(*ExplicitSkippedMessageMutation)

// newExplicitSkippedMessageMutation creates new mutation for the ExplicitSkippedMessage entity.
func newExplicitSkippedMessageMutation(c config, op Op, opts ...explicitskippedmessageOption) *ExplicitSkippedMessageMutation {
	m := &ExplicitSkippedMessageMutation{
		config:        c,
		op:            op,
		typ:           TypeExplicitSkippedMessage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withExplicitSkippedMessageID sets the ID field of the mutation.
func withExplicitSkippedMessageID(id int) explicitskippedmessageOption {
	return func(m *ExplicitSkippedMessageMutation) {
		var (
			err   error
			once  sync.Once
			value *ExplicitSkippedMessage
		)
		m.oldValue = func(ctx context.Context) (*ExplicitSkippedMessage, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ExplicitSkippedMessage.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withExplicitSkippedMessage sets the old ExplicitSkippedMessage of the mutation.
func withExplicitSkippedMessage(node *ExplicitSkippedMessage) explicitskippedmessageOption {
	return func(m *ExplicitSkippedMessageMutation) {
		m.oldValue = func(context.Context) (*ExplicitSkippedMessage, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ExplicitSkippedMessageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ExplicitSkippedMessageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ExplicitSkippedMessageMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ExplicitSkippedMessageMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ExplicitSkippedMessage.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// Where appends a list predicates to the ExplicitSkippedMessageMutation builder.
func (m *ExplicitSkippedMessageMutation) Where(ps ...predicate.ExplicitSkippedMessage) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ExplicitSkippedMessageMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ExplicitSkippedMessageMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ExplicitSkippedMessage, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ExplicitSkippedMessageMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ExplicitSkippedMessageMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ExplicitSkippedMessage).
func (m *ExplicitSkippedMessageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ExplicitSkippedMessageMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ExplicitSkippedMessageMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ExplicitSkippedMessageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown ExplicitSkippedMessage field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExplicitSkippedMessageMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ExplicitSkippedMessage field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ExplicitSkippedMessageMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ExplicitSkippedMessageMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExplicitSkippedMessageMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown ExplicitSkippedMessage numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ExplicitSkippedMessageMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ExplicitSkippedMessageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ExplicitSkippedMessageMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ExplicitSkippedMessage nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ExplicitSkippedMessageMutation) ResetField(name string) error {
	return fmt.Errorf("unknown ExplicitSkippedMessage field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ExplicitSkippedMessageMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ExplicitSkippedMessageMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ExplicitSkippedMessageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ExplicitSkippedMessageMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ExplicitSkippedMessageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ExplicitSkippedMessageMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ExplicitSkippedMessageMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ExplicitSkippedMessage unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ExplicitSkippedMessageMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ExplicitSkippedMessage edge %s", name)
}

// ImageMutation represents an operation that mutates the Image nodes in the graph.
type ImageMutation struct {
	config
	op                      Op
	typ                     string
	id                      *uuid.UUID
	url_path                *string
	clearedFields           map[string]struct{}
	user_profile_pic        map[int]struct{}
	removeduser_profile_pic map[int]struct{}
	cleareduser_profile_pic bool
	done                    bool
	oldValue                func(context.Context) (*Image, error)
	predicates              []predicate.Image
}

var _ ent.Mutation = (*ImageMutation)(nil)

// imageOption allows management of the mutation configuration using functional options.
type imageOption func(*ImageMutation)

// newImageMutation creates new mutation for the Image entity.
func newImageMutation(c config, op Op, opts ...imageOption) *ImageMutation {
	m := &ImageMutation{
		config:        c,
		op:            op,
		typ:           TypeImage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withImageID sets the ID field of the mutation.
func withImageID(id uuid.UUID) imageOption {
	return func(m *ImageMutation) {
		var (
			err   error
			once  sync.Once
			value *Image
		)
		m.oldValue = func(ctx context.Context) (*Image, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Image.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withImage sets the old Image of the mutation.
func withImage(node *Image) imageOption {
	return func(m *ImageMutation) {
		m.oldValue = func(context.Context) (*Image, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ImageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ImageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Image entities.
func (m *ImageMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ImageMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ImageMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Image.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetURLPath sets the "url_path" field.
func (m *ImageMutation) SetURLPath(s string) {
	m.url_path = &s
}

// URLPath returns the value of the "url_path" field in the mutation.
func (m *ImageMutation) URLPath() (r string, exists bool) {
	v := m.url_path
	if v == nil {
		return
	}
	return *v, true
}

// OldURLPath returns the old "url_path" field's value of the Image entity.
// If the Image object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ImageMutation) OldURLPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURLPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURLPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURLPath: %w", err)
	}
	return oldValue.URLPath, nil
}

// ResetURLPath resets all changes to the "url_path" field.
func (m *ImageMutation) ResetURLPath() {
	m.url_path = nil
}

// AddUserProfilePicIDs adds the "user_profile_pic" edge to the User entity by ids.
func (m *ImageMutation) AddUserProfilePicIDs(ids ...int) {
	if m.user_profile_pic == nil {
		m.user_profile_pic = make(map[int]struct{})
	}
	for i := range ids {
		m.user_profile_pic[ids[i]] = struct{}{}
	}
}

// ClearUserProfilePic clears the "user_profile_pic" edge to the User entity.
func (m *ImageMutation) ClearUserProfilePic() {
	m.cleareduser_profile_pic = true
}

// UserProfilePicCleared reports if the "user_profile_pic" edge to the User entity was cleared.
func (m *ImageMutation) UserProfilePicCleared() bool {
	return m.cleareduser_profile_pic
}

// RemoveUserProfilePicIDs removes the "user_profile_pic" edge to the User entity by IDs.
func (m *ImageMutation) RemoveUserProfilePicIDs(ids ...int) {
	if m.removeduser_profile_pic == nil {
		m.removeduser_profile_pic = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.user_profile_pic, ids[i])
		m.removeduser_profile_pic[ids[i]] = struct{}{}
	}
}

// RemovedUserProfilePic returns the removed IDs of the "user_profile_pic" edge to the User entity.
func (m *ImageMutation) RemovedUserProfilePicIDs() (ids []int) {
	for id := range m.removeduser_profile_pic {
		ids = append(ids, id)
	}
	return
}

// UserProfilePicIDs returns the "user_profile_pic" edge IDs in the mutation.
func (m *ImageMutation) UserProfilePicIDs() (ids []int) {
	for id := range m.user_profile_pic {
		ids = append(ids, id)
	}
	return
}

// ResetUserProfilePic resets all changes to the "user_profile_pic" edge.
func (m *ImageMutation) ResetUserProfilePic() {
	m.user_profile_pic = nil
	m.cleareduser_profile_pic = false
	m.removeduser_profile_pic = nil
}

// Where appends a list predicates to the ImageMutation builder.
func (m *ImageMutation) Where(ps ...predicate.Image) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ImageMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ImageMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Image, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ImageMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ImageMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Image).
func (m *ImageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ImageMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.url_path != nil {
		fields = append(fields, image.FieldURLPath)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ImageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case image.FieldURLPath:
		return m.URLPath()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ImageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case image.FieldURLPath:
		return m.OldURLPath(ctx)
	}
	return nil, fmt.Errorf("unknown Image field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ImageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case image.FieldURLPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURLPath(v)
		return nil
	}
	return fmt.Errorf("unknown Image field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ImageMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ImageMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ImageMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Image numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ImageMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ImageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ImageMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Image nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ImageMutation) ResetField(name string) error {
	switch name {
	case image.FieldURLPath:
		m.ResetURLPath()
		return nil
	}
	return fmt.Errorf("unknown Image field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ImageMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user_profile_pic != nil {
		edges = append(edges, image.EdgeUserProfilePic)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ImageMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case image.EdgeUserProfilePic:
		ids := make([]ent.Value, 0, len(m.user_profile_pic))
		for id := range m.user_profile_pic {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ImageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeduser_profile_pic != nil {
		edges = append(edges, image.EdgeUserProfilePic)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ImageMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case image.EdgeUserProfilePic:
		ids := make([]ent.Value, 0, len(m.removeduser_profile_pic))
		for id := range m.removeduser_profile_pic {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ImageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser_profile_pic {
		edges = append(edges, image.EdgeUserProfilePic)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ImageMutation) EdgeCleared(name string) bool {
	switch name {
	case image.EdgeUserProfilePic:
		return m.cleareduser_profile_pic
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ImageMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Image unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ImageMutation) ResetEdge(name string) error {
	switch name {
	case image.EdgeUserProfilePic:
		m.ResetUserProfilePic()
		return nil
	}
	return fmt.Errorf("unknown Image edge %s", name)
}

// ImplicitSkippedMessageMutation represents an operation that mutates the ImplicitSkippedMessage nodes in the graph.
type ImplicitSkippedMessageMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*ImplicitSkippedMessage, error)
	predicates    []predicate.ImplicitSkippedMessage
}

var _ ent.Mutation = (*ImplicitSkippedMessageMutation)(nil)

// implicitskippedmessageOption allows management of the mutation configuration using functional options.
type implicitskippedmessageOption func(*ImplicitSkippedMessageMutation)

// newImplicitSkippedMessageMutation creates new mutation for the ImplicitSkippedMessage entity.
func newImplicitSkippedMessageMutation(c config, op Op, opts ...implicitskippedmessageOption) *ImplicitSkippedMessageMutation {
	m := &ImplicitSkippedMessageMutation{
		config:        c,
		op:            op,
		typ:           TypeImplicitSkippedMessage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withImplicitSkippedMessageID sets the ID field of the mutation.
func withImplicitSkippedMessageID(id int) implicitskippedmessageOption {
	return func(m *ImplicitSkippedMessageMutation) {
		var (
			err   error
			once  sync.Once
			value *ImplicitSkippedMessage
		)
		m.oldValue = func(ctx context.Context) (*ImplicitSkippedMessage, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ImplicitSkippedMessage.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withImplicitSkippedMessage sets the old ImplicitSkippedMessage of the mutation.
func withImplicitSkippedMessage(node *ImplicitSkippedMessage) implicitskippedmessageOption {
	return func(m *ImplicitSkippedMessageMutation) {
		m.oldValue = func(context.Context) (*ImplicitSkippedMessage, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ImplicitSkippedMessageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ImplicitSkippedMessageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ImplicitSkippedMessageMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ImplicitSkippedMessageMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ImplicitSkippedMessage.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// Where appends a list predicates to the ImplicitSkippedMessageMutation builder.
func (m *ImplicitSkippedMessageMutation) Where(ps ...predicate.ImplicitSkippedMessage) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ImplicitSkippedMessageMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ImplicitSkippedMessageMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ImplicitSkippedMessage, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ImplicitSkippedMessageMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ImplicitSkippedMessageMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ImplicitSkippedMessage).
func (m *ImplicitSkippedMessageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ImplicitSkippedMessageMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ImplicitSkippedMessageMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ImplicitSkippedMessageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown ImplicitSkippedMessage field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ImplicitSkippedMessageMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ImplicitSkippedMessage field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ImplicitSkippedMessageMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ImplicitSkippedMessageMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ImplicitSkippedMessageMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown ImplicitSkippedMessage numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ImplicitSkippedMessageMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ImplicitSkippedMessageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ImplicitSkippedMessageMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ImplicitSkippedMessage nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ImplicitSkippedMessageMutation) ResetField(name string) error {
	return fmt.Errorf("unknown ImplicitSkippedMessage field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ImplicitSkippedMessageMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ImplicitSkippedMessageMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ImplicitSkippedMessageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ImplicitSkippedMessageMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ImplicitSkippedMessageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ImplicitSkippedMessageMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ImplicitSkippedMessageMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ImplicitSkippedMessage unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ImplicitSkippedMessageMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ImplicitSkippedMessage edge %s", name)
}

// InvalidFieldMessageMutation represents an operation that mutates the InvalidFieldMessage nodes in the graph.
type InvalidFieldMessageMutation struct {
	config
	op            Op
	typ           string
	id            *int
	json          **schema.SomeJSON
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*InvalidFieldMessage, error)
	predicates    []predicate.InvalidFieldMessage
}

var _ ent.Mutation = (*InvalidFieldMessageMutation)(nil)

// invalidfieldmessageOption allows management of the mutation configuration using functional options.
type invalidfieldmessageOption func(*InvalidFieldMessageMutation)

// newInvalidFieldMessageMutation creates new mutation for the InvalidFieldMessage entity.
func newInvalidFieldMessageMutation(c config, op Op, opts ...invalidfieldmessageOption) *InvalidFieldMessageMutation {
	m := &InvalidFieldMessageMutation{
		config:        c,
		op:            op,
		typ:           TypeInvalidFieldMessage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withInvalidFieldMessageID sets the ID field of the mutation.
func withInvalidFieldMessageID(id int) invalidfieldmessageOption {
	return func(m *InvalidFieldMessageMutation) {
		var (
			err   error
			once  sync.Once
			value *InvalidFieldMessage
		)
		m.oldValue = func(ctx context.Context) (*InvalidFieldMessage, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().InvalidFieldMessage.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withInvalidFieldMessage sets the old InvalidFieldMessage of the mutation.
func withInvalidFieldMessage(node *InvalidFieldMessage) invalidfieldmessageOption {
	return func(m *InvalidFieldMessageMutation) {
		m.oldValue = func(context.Context) (*InvalidFieldMessage, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m InvalidFieldMessageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m InvalidFieldMessageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *InvalidFieldMessageMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *InvalidFieldMessageMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().InvalidFieldMessage.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetJSON sets the "json" field.
func (m *InvalidFieldMessageMutation) SetJSON(sj *schema.SomeJSON) {
	m.json = &sj
}

// JSON returns the value of the "json" field in the mutation.
func (m *InvalidFieldMessageMutation) JSON() (r *schema.SomeJSON, exists bool) {
	v := m.json
	if v == nil {
		return
	}
	return *v, true
}

// OldJSON returns the old "json" field's value of the InvalidFieldMessage entity.
// If the InvalidFieldMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InvalidFieldMessageMutation) OldJSON(ctx context.Context) (v *schema.SomeJSON, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldJSON is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldJSON requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJSON: %w", err)
	}
	return oldValue.JSON, nil
}

// ResetJSON resets all changes to the "json" field.
func (m *InvalidFieldMessageMutation) ResetJSON() {
	m.json = nil
}

// Where appends a list predicates to the InvalidFieldMessageMutation builder.
func (m *InvalidFieldMessageMutation) Where(ps ...predicate.InvalidFieldMessage) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the InvalidFieldMessageMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *InvalidFieldMessageMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.InvalidFieldMessage, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *InvalidFieldMessageMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *InvalidFieldMessageMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (InvalidFieldMessage).
func (m *InvalidFieldMessageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *InvalidFieldMessageMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.json != nil {
		fields = append(fields, invalidfieldmessage.FieldJSON)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *InvalidFieldMessageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case invalidfieldmessage.FieldJSON:
		return m.JSON()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *InvalidFieldMessageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case invalidfieldmessage.FieldJSON:
		return m.OldJSON(ctx)
	}
	return nil, fmt.Errorf("unknown InvalidFieldMessage field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InvalidFieldMessageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case invalidfieldmessage.FieldJSON:
		v, ok := value.(*schema.SomeJSON)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJSON(v)
		return nil
	}
	return fmt.Errorf("unknown InvalidFieldMessage field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *InvalidFieldMessageMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *InvalidFieldMessageMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InvalidFieldMessageMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown InvalidFieldMessage numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *InvalidFieldMessageMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *InvalidFieldMessageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *InvalidFieldMessageMutation) ClearField(name string) error {
	return fmt.Errorf("unknown InvalidFieldMessage nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *InvalidFieldMessageMutation) ResetField(name string) error {
	switch name {
	case invalidfieldmessage.FieldJSON:
		m.ResetJSON()
		return nil
	}
	return fmt.Errorf("unknown InvalidFieldMessage field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *InvalidFieldMessageMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *InvalidFieldMessageMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *InvalidFieldMessageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *InvalidFieldMessageMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *InvalidFieldMessageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *InvalidFieldMessageMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *InvalidFieldMessageMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown InvalidFieldMessage unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *InvalidFieldMessageMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown InvalidFieldMessage edge %s", name)
}

// MessageWithEnumMutation represents an operation that mutates the MessageWithEnum nodes in the graph.
type MessageWithEnumMutation struct {
	config
	op                           Op
	typ                          string
	id                           *int
	enum_type                    *messagewithenum.EnumType
	enum_without_default         *messagewithenum.EnumWithoutDefault
	enum_with_special_characters *messagewithenum.EnumWithSpecialCharacters
	clearedFields                map[string]struct{}
	done                         bool
	oldValue                     func(context.Context) (*MessageWithEnum, error)
	predicates                   []predicate.MessageWithEnum
}

var _ ent.Mutation = (*MessageWithEnumMutation)(nil)

// messagewithenumOption allows management of the mutation configuration using functional options.
type messagewithenumOption func(*MessageWithEnumMutation)

// newMessageWithEnumMutation creates new mutation for the MessageWithEnum entity.
func newMessageWithEnumMutation(c config, op Op, opts ...messagewithenumOption) *MessageWithEnumMutation {
	m := &MessageWithEnumMutation{
		config:        c,
		op:            op,
		typ:           TypeMessageWithEnum,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMessageWithEnumID sets the ID field of the mutation.
func withMessageWithEnumID(id int) messagewithenumOption {
	return func(m *MessageWithEnumMutation) {
		var (
			err   error
			once  sync.Once
			value *MessageWithEnum
		)
		m.oldValue = func(ctx context.Context) (*MessageWithEnum, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MessageWithEnum.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMessageWithEnum sets the old MessageWithEnum of the mutation.
func withMessageWithEnum(node *MessageWithEnum) messagewithenumOption {
	return func(m *MessageWithEnumMutation) {
		m.oldValue = func(context.Context) (*MessageWithEnum, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MessageWithEnumMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MessageWithEnumMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MessageWithEnumMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MessageWithEnumMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().MessageWithEnum.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEnumType sets the "enum_type" field.
func (m *MessageWithEnumMutation) SetEnumType(mt messagewithenum.EnumType) {
	m.enum_type = &mt
}

// EnumType returns the value of the "enum_type" field in the mutation.
func (m *MessageWithEnumMutation) EnumType() (r messagewithenum.EnumType, exists bool) {
	v := m.enum_type
	if v == nil {
		return
	}
	return *v, true
}

// OldEnumType returns the old "enum_type" field's value of the MessageWithEnum entity.
// If the MessageWithEnum object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageWithEnumMutation) OldEnumType(ctx context.Context) (v messagewithenum.EnumType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnumType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnumType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnumType: %w", err)
	}
	return oldValue.EnumType, nil
}

// ResetEnumType resets all changes to the "enum_type" field.
func (m *MessageWithEnumMutation) ResetEnumType() {
	m.enum_type = nil
}

// SetEnumWithoutDefault sets the "enum_without_default" field.
func (m *MessageWithEnumMutation) SetEnumWithoutDefault(mwd messagewithenum.EnumWithoutDefault) {
	m.enum_without_default = &mwd
}

// EnumWithoutDefault returns the value of the "enum_without_default" field in the mutation.
func (m *MessageWithEnumMutation) EnumWithoutDefault() (r messagewithenum.EnumWithoutDefault, exists bool) {
	v := m.enum_without_default
	if v == nil {
		return
	}
	return *v, true
}

// OldEnumWithoutDefault returns the old "enum_without_default" field's value of the MessageWithEnum entity.
// If the MessageWithEnum object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageWithEnumMutation) OldEnumWithoutDefault(ctx context.Context) (v messagewithenum.EnumWithoutDefault, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnumWithoutDefault is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnumWithoutDefault requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnumWithoutDefault: %w", err)
	}
	return oldValue.EnumWithoutDefault, nil
}

// ResetEnumWithoutDefault resets all changes to the "enum_without_default" field.
func (m *MessageWithEnumMutation) ResetEnumWithoutDefault() {
	m.enum_without_default = nil
}

// SetEnumWithSpecialCharacters sets the "enum_with_special_characters" field.
func (m *MessageWithEnumMutation) SetEnumWithSpecialCharacters(mwsc messagewithenum.EnumWithSpecialCharacters) {
	m.enum_with_special_characters = &mwsc
}

// EnumWithSpecialCharacters returns the value of the "enum_with_special_characters" field in the mutation.
func (m *MessageWithEnumMutation) EnumWithSpecialCharacters() (r messagewithenum.EnumWithSpecialCharacters, exists bool) {
	v := m.enum_with_special_characters
	if v == nil {
		return
	}
	return *v, true
}

// OldEnumWithSpecialCharacters returns the old "enum_with_special_characters" field's value of the MessageWithEnum entity.
// If the MessageWithEnum object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageWithEnumMutation) OldEnumWithSpecialCharacters(ctx context.Context) (v messagewithenum.EnumWithSpecialCharacters, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnumWithSpecialCharacters is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnumWithSpecialCharacters requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnumWithSpecialCharacters: %w", err)
	}
	return oldValue.EnumWithSpecialCharacters, nil
}

// ResetEnumWithSpecialCharacters resets all changes to the "enum_with_special_characters" field.
func (m *MessageWithEnumMutation) ResetEnumWithSpecialCharacters() {
	m.enum_with_special_characters = nil
}

// Where appends a list predicates to the MessageWithEnumMutation builder.
func (m *MessageWithEnumMutation) Where(ps ...predicate.MessageWithEnum) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MessageWithEnumMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MessageWithEnumMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.MessageWithEnum, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MessageWithEnumMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MessageWithEnumMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (MessageWithEnum).
func (m *MessageWithEnumMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MessageWithEnumMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.enum_type != nil {
		fields = append(fields, messagewithenum.FieldEnumType)
	}
	if m.enum_without_default != nil {
		fields = append(fields, messagewithenum.FieldEnumWithoutDefault)
	}
	if m.enum_with_special_characters != nil {
		fields = append(fields, messagewithenum.FieldEnumWithSpecialCharacters)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MessageWithEnumMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case messagewithenum.FieldEnumType:
		return m.EnumType()
	case messagewithenum.FieldEnumWithoutDefault:
		return m.EnumWithoutDefault()
	case messagewithenum.FieldEnumWithSpecialCharacters:
		return m.EnumWithSpecialCharacters()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MessageWithEnumMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case messagewithenum.FieldEnumType:
		return m.OldEnumType(ctx)
	case messagewithenum.FieldEnumWithoutDefault:
		return m.OldEnumWithoutDefault(ctx)
	case messagewithenum.FieldEnumWithSpecialCharacters:
		return m.OldEnumWithSpecialCharacters(ctx)
	}
	return nil, fmt.Errorf("unknown MessageWithEnum field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessageWithEnumMutation) SetField(name string, value ent.Value) error {
	switch name {
	case messagewithenum.FieldEnumType:
		v, ok := value.(messagewithenum.EnumType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnumType(v)
		return nil
	case messagewithenum.FieldEnumWithoutDefault:
		v, ok := value.(messagewithenum.EnumWithoutDefault)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnumWithoutDefault(v)
		return nil
	case messagewithenum.FieldEnumWithSpecialCharacters:
		v, ok := value.(messagewithenum.EnumWithSpecialCharacters)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnumWithSpecialCharacters(v)
		return nil
	}
	return fmt.Errorf("unknown MessageWithEnum field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MessageWithEnumMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MessageWithEnumMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessageWithEnumMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown MessageWithEnum numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MessageWithEnumMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MessageWithEnumMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MessageWithEnumMutation) ClearField(name string) error {
	return fmt.Errorf("unknown MessageWithEnum nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MessageWithEnumMutation) ResetField(name string) error {
	switch name {
	case messagewithenum.FieldEnumType:
		m.ResetEnumType()
		return nil
	case messagewithenum.FieldEnumWithoutDefault:
		m.ResetEnumWithoutDefault()
		return nil
	case messagewithenum.FieldEnumWithSpecialCharacters:
		m.ResetEnumWithSpecialCharacters()
		return nil
	}
	return fmt.Errorf("unknown MessageWithEnum field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MessageWithEnumMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MessageWithEnumMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MessageWithEnumMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MessageWithEnumMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MessageWithEnumMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MessageWithEnumMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MessageWithEnumMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown MessageWithEnum unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MessageWithEnumMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown MessageWithEnum edge %s", name)
}

// MessageWithFieldOneMutation represents an operation that mutates the MessageWithFieldOne nodes in the graph.
type MessageWithFieldOneMutation struct {
	config
	op            Op
	typ           string
	id            *int
	field_one     *int32
	addfield_one  *int32
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*MessageWithFieldOne, error)
	predicates    []predicate.MessageWithFieldOne
}

var _ ent.Mutation = (*MessageWithFieldOneMutation)(nil)

// messagewithfieldoneOption allows management of the mutation configuration using functional options.
type messagewithfieldoneOption func(*MessageWithFieldOneMutation)

// newMessageWithFieldOneMutation creates new mutation for the MessageWithFieldOne entity.
func newMessageWithFieldOneMutation(c config, op Op, opts ...messagewithfieldoneOption) *MessageWithFieldOneMutation {
	m := &MessageWithFieldOneMutation{
		config:        c,
		op:            op,
		typ:           TypeMessageWithFieldOne,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMessageWithFieldOneID sets the ID field of the mutation.
func withMessageWithFieldOneID(id int) messagewithfieldoneOption {
	return func(m *MessageWithFieldOneMutation) {
		var (
			err   error
			once  sync.Once
			value *MessageWithFieldOne
		)
		m.oldValue = func(ctx context.Context) (*MessageWithFieldOne, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MessageWithFieldOne.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMessageWithFieldOne sets the old MessageWithFieldOne of the mutation.
func withMessageWithFieldOne(node *MessageWithFieldOne) messagewithfieldoneOption {
	return func(m *MessageWithFieldOneMutation) {
		m.oldValue = func(context.Context) (*MessageWithFieldOne, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MessageWithFieldOneMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MessageWithFieldOneMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MessageWithFieldOneMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MessageWithFieldOneMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().MessageWithFieldOne.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFieldOne sets the "field_one" field.
func (m *MessageWithFieldOneMutation) SetFieldOne(i int32) {
	m.field_one = &i
	m.addfield_one = nil
}

// FieldOne returns the value of the "field_one" field in the mutation.
func (m *MessageWithFieldOneMutation) FieldOne() (r int32, exists bool) {
	v := m.field_one
	if v == nil {
		return
	}
	return *v, true
}

// OldFieldOne returns the old "field_one" field's value of the MessageWithFieldOne entity.
// If the MessageWithFieldOne object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageWithFieldOneMutation) OldFieldOne(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFieldOne is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFieldOne requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFieldOne: %w", err)
	}
	return oldValue.FieldOne, nil
}

// AddFieldOne adds i to the "field_one" field.
func (m *MessageWithFieldOneMutation) AddFieldOne(i int32) {
	if m.addfield_one != nil {
		*m.addfield_one += i
	} else {
		m.addfield_one = &i
	}
}

// AddedFieldOne returns the value that was added to the "field_one" field in this mutation.
func (m *MessageWithFieldOneMutation) AddedFieldOne() (r int32, exists bool) {
	v := m.addfield_one
	if v == nil {
		return
	}
	return *v, true
}

// ResetFieldOne resets all changes to the "field_one" field.
func (m *MessageWithFieldOneMutation) ResetFieldOne() {
	m.field_one = nil
	m.addfield_one = nil
}

// Where appends a list predicates to the MessageWithFieldOneMutation builder.
func (m *MessageWithFieldOneMutation) Where(ps ...predicate.MessageWithFieldOne) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MessageWithFieldOneMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MessageWithFieldOneMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.MessageWithFieldOne, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MessageWithFieldOneMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MessageWithFieldOneMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (MessageWithFieldOne).
func (m *MessageWithFieldOneMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MessageWithFieldOneMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.field_one != nil {
		fields = append(fields, messagewithfieldone.FieldFieldOne)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MessageWithFieldOneMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case messagewithfieldone.FieldFieldOne:
		return m.FieldOne()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MessageWithFieldOneMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case messagewithfieldone.FieldFieldOne:
		return m.OldFieldOne(ctx)
	}
	return nil, fmt.Errorf("unknown MessageWithFieldOne field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessageWithFieldOneMutation) SetField(name string, value ent.Value) error {
	switch name {
	case messagewithfieldone.FieldFieldOne:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFieldOne(v)
		return nil
	}
	return fmt.Errorf("unknown MessageWithFieldOne field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MessageWithFieldOneMutation) AddedFields() []string {
	var fields []string
	if m.addfield_one != nil {
		fields = append(fields, messagewithfieldone.FieldFieldOne)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MessageWithFieldOneMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case messagewithfieldone.FieldFieldOne:
		return m.AddedFieldOne()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessageWithFieldOneMutation) AddField(name string, value ent.Value) error {
	switch name {
	case messagewithfieldone.FieldFieldOne:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFieldOne(v)
		return nil
	}
	return fmt.Errorf("unknown MessageWithFieldOne numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MessageWithFieldOneMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MessageWithFieldOneMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MessageWithFieldOneMutation) ClearField(name string) error {
	return fmt.Errorf("unknown MessageWithFieldOne nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MessageWithFieldOneMutation) ResetField(name string) error {
	switch name {
	case messagewithfieldone.FieldFieldOne:
		m.ResetFieldOne()
		return nil
	}
	return fmt.Errorf("unknown MessageWithFieldOne field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MessageWithFieldOneMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MessageWithFieldOneMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MessageWithFieldOneMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MessageWithFieldOneMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MessageWithFieldOneMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MessageWithFieldOneMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MessageWithFieldOneMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown MessageWithFieldOne unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MessageWithFieldOneMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown MessageWithFieldOne edge %s", name)
}

// MessageWithIDMutation represents an operation that mutates the MessageWithID nodes in the graph.
type MessageWithIDMutation struct {
	config
	op            Op
	typ           string
	id            *int32
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*MessageWithID, error)
	predicates    []predicate.MessageWithID
}

var _ ent.Mutation = (*MessageWithIDMutation)(nil)

// messagewithidOption allows management of the mutation configuration using functional options.
type messagewithidOption func(*MessageWithIDMutation)

// newMessageWithIDMutation creates new mutation for the MessageWithID entity.
func newMessageWithIDMutation(c config, op Op, opts ...messagewithidOption) *MessageWithIDMutation {
	m := &MessageWithIDMutation{
		config:        c,
		op:            op,
		typ:           TypeMessageWithID,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMessageWithIDID sets the ID field of the mutation.
func withMessageWithIDID(id int32) messagewithidOption {
	return func(m *MessageWithIDMutation) {
		var (
			err   error
			once  sync.Once
			value *MessageWithID
		)
		m.oldValue = func(ctx context.Context) (*MessageWithID, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MessageWithID.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMessageWithID sets the old MessageWithID of the mutation.
func withMessageWithID(node *MessageWithID) messagewithidOption {
	return func(m *MessageWithIDMutation) {
		m.oldValue = func(context.Context) (*MessageWithID, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MessageWithIDMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MessageWithIDMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of MessageWithID entities.
func (m *MessageWithIDMutation) SetID(id int32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MessageWithIDMutation) ID() (id int32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MessageWithIDMutation) IDs(ctx context.Context) ([]int32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().MessageWithID.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// Where appends a list predicates to the MessageWithIDMutation builder.
func (m *MessageWithIDMutation) Where(ps ...predicate.MessageWithID) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MessageWithIDMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MessageWithIDMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.MessageWithID, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MessageWithIDMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MessageWithIDMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (MessageWithID).
func (m *MessageWithIDMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MessageWithIDMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MessageWithIDMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MessageWithIDMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown MessageWithID field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessageWithIDMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown MessageWithID field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MessageWithIDMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MessageWithIDMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessageWithIDMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown MessageWithID numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MessageWithIDMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MessageWithIDMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MessageWithIDMutation) ClearField(name string) error {
	return fmt.Errorf("unknown MessageWithID nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MessageWithIDMutation) ResetField(name string) error {
	return fmt.Errorf("unknown MessageWithID field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MessageWithIDMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MessageWithIDMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MessageWithIDMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MessageWithIDMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MessageWithIDMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MessageWithIDMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MessageWithIDMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown MessageWithID unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MessageWithIDMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown MessageWithID edge %s", name)
}

// MessageWithIntsMutation represents an operation that mutates the MessageWithInts nodes in the graph.
type MessageWithIntsMutation struct {
	config
	op            Op
	typ           string
	id            *int
	int32s        *[]int32
	appendint32s  []int32
	int64s        *[]int64
	appendint64s  []int64
	uint32s       *[]uint32
	appenduint32s []uint32
	uint64s       *[]uint64
	appenduint64s []uint64
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*MessageWithInts, error)
	predicates    []predicate.MessageWithInts
}

var _ ent.Mutation = (*MessageWithIntsMutation)(nil)

// messagewithintsOption allows management of the mutation configuration using functional options.
type messagewithintsOption func(*MessageWithIntsMutation)

// newMessageWithIntsMutation creates new mutation for the MessageWithInts entity.
func newMessageWithIntsMutation(c config, op Op, opts ...messagewithintsOption) *MessageWithIntsMutation {
	m := &MessageWithIntsMutation{
		config:        c,
		op:            op,
		typ:           TypeMessageWithInts,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMessageWithIntsID sets the ID field of the mutation.
func withMessageWithIntsID(id int) messagewithintsOption {
	return func(m *MessageWithIntsMutation) {
		var (
			err   error
			once  sync.Once
			value *MessageWithInts
		)
		m.oldValue = func(ctx context.Context) (*MessageWithInts, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MessageWithInts.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMessageWithInts sets the old MessageWithInts of the mutation.
func withMessageWithInts(node *MessageWithInts) messagewithintsOption {
	return func(m *MessageWithIntsMutation) {
		m.oldValue = func(context.Context) (*MessageWithInts, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MessageWithIntsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MessageWithIntsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MessageWithIntsMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MessageWithIntsMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().MessageWithInts.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetInt32s sets the "int32s" field.
func (m *MessageWithIntsMutation) SetInt32s(i []int32) {
	m.int32s = &i
	m.appendint32s = nil
}

// Int32s returns the value of the "int32s" field in the mutation.
func (m *MessageWithIntsMutation) Int32s() (r []int32, exists bool) {
	v := m.int32s
	if v == nil {
		return
	}
	return *v, true
}

// OldInt32s returns the old "int32s" field's value of the MessageWithInts entity.
// If the MessageWithInts object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageWithIntsMutation) OldInt32s(ctx context.Context) (v []int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInt32s is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInt32s requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInt32s: %w", err)
	}
	return oldValue.Int32s, nil
}

// AppendInt32s adds i to the "int32s" field.
func (m *MessageWithIntsMutation) AppendInt32s(i []int32) {
	m.appendint32s = append(m.appendint32s, i...)
}

// AppendedInt32s returns the list of values that were appended to the "int32s" field in this mutation.
func (m *MessageWithIntsMutation) AppendedInt32s() ([]int32, bool) {
	if len(m.appendint32s) == 0 {
		return nil, false
	}
	return m.appendint32s, true
}

// ResetInt32s resets all changes to the "int32s" field.
func (m *MessageWithIntsMutation) ResetInt32s() {
	m.int32s = nil
	m.appendint32s = nil
}

// SetInt64s sets the "int64s" field.
func (m *MessageWithIntsMutation) SetInt64s(i []int64) {
	m.int64s = &i
	m.appendint64s = nil
}

// Int64s returns the value of the "int64s" field in the mutation.
func (m *MessageWithIntsMutation) Int64s() (r []int64, exists bool) {
	v := m.int64s
	if v == nil {
		return
	}
	return *v, true
}

// OldInt64s returns the old "int64s" field's value of the MessageWithInts entity.
// If the MessageWithInts object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageWithIntsMutation) OldInt64s(ctx context.Context) (v []int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInt64s is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInt64s requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInt64s: %w", err)
	}
	return oldValue.Int64s, nil
}

// AppendInt64s adds i to the "int64s" field.
func (m *MessageWithIntsMutation) AppendInt64s(i []int64) {
	m.appendint64s = append(m.appendint64s, i...)
}

// AppendedInt64s returns the list of values that were appended to the "int64s" field in this mutation.
func (m *MessageWithIntsMutation) AppendedInt64s() ([]int64, bool) {
	if len(m.appendint64s) == 0 {
		return nil, false
	}
	return m.appendint64s, true
}

// ResetInt64s resets all changes to the "int64s" field.
func (m *MessageWithIntsMutation) ResetInt64s() {
	m.int64s = nil
	m.appendint64s = nil
}

// SetUint32s sets the "uint32s" field.
func (m *MessageWithIntsMutation) SetUint32s(u []uint32) {
	m.uint32s = &u
	m.appenduint32s = nil
}

// Uint32s returns the value of the "uint32s" field in the mutation.
func (m *MessageWithIntsMutation) Uint32s() (r []uint32, exists bool) {
	v := m.uint32s
	if v == nil {
		return
	}
	return *v, true
}

// OldUint32s returns the old "uint32s" field's value of the MessageWithInts entity.
// If the MessageWithInts object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageWithIntsMutation) OldUint32s(ctx context.Context) (v []uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUint32s is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUint32s requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUint32s: %w", err)
	}
	return oldValue.Uint32s, nil
}

// AppendUint32s adds u to the "uint32s" field.
func (m *MessageWithIntsMutation) AppendUint32s(u []uint32) {
	m.appenduint32s = append(m.appenduint32s, u...)
}

// AppendedUint32s returns the list of values that were appended to the "uint32s" field in this mutation.
func (m *MessageWithIntsMutation) AppendedUint32s() ([]uint32, bool) {
	if len(m.appenduint32s) == 0 {
		return nil, false
	}
	return m.appenduint32s, true
}

// ResetUint32s resets all changes to the "uint32s" field.
func (m *MessageWithIntsMutation) ResetUint32s() {
	m.uint32s = nil
	m.appenduint32s = nil
}

// SetUint64s sets the "uint64s" field.
func (m *MessageWithIntsMutation) SetUint64s(u []uint64) {
	m.uint64s = &u
	m.appenduint64s = nil
}

// Uint64s returns the value of the "uint64s" field in the mutation.
func (m *MessageWithIntsMutation) Uint64s() (r []uint64, exists bool) {
	v := m.uint64s
	if v == nil {
		return
	}
	return *v, true
}

// OldUint64s returns the old "uint64s" field's value of the MessageWithInts entity.
// If the MessageWithInts object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageWithIntsMutation) OldUint64s(ctx context.Context) (v []uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUint64s is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUint64s requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUint64s: %w", err)
	}
	return oldValue.Uint64s, nil
}

// AppendUint64s adds u to the "uint64s" field.
func (m *MessageWithIntsMutation) AppendUint64s(u []uint64) {
	m.appenduint64s = append(m.appenduint64s, u...)
}

// AppendedUint64s returns the list of values that were appended to the "uint64s" field in this mutation.
func (m *MessageWithIntsMutation) AppendedUint64s() ([]uint64, bool) {
	if len(m.appenduint64s) == 0 {
		return nil, false
	}
	return m.appenduint64s, true
}

// ResetUint64s resets all changes to the "uint64s" field.
func (m *MessageWithIntsMutation) ResetUint64s() {
	m.uint64s = nil
	m.appenduint64s = nil
}

// Where appends a list predicates to the MessageWithIntsMutation builder.
func (m *MessageWithIntsMutation) Where(ps ...predicate.MessageWithInts) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MessageWithIntsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MessageWithIntsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.MessageWithInts, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MessageWithIntsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MessageWithIntsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (MessageWithInts).
func (m *MessageWithIntsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MessageWithIntsMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.int32s != nil {
		fields = append(fields, messagewithints.FieldInt32s)
	}
	if m.int64s != nil {
		fields = append(fields, messagewithints.FieldInt64s)
	}
	if m.uint32s != nil {
		fields = append(fields, messagewithints.FieldUint32s)
	}
	if m.uint64s != nil {
		fields = append(fields, messagewithints.FieldUint64s)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MessageWithIntsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case messagewithints.FieldInt32s:
		return m.Int32s()
	case messagewithints.FieldInt64s:
		return m.Int64s()
	case messagewithints.FieldUint32s:
		return m.Uint32s()
	case messagewithints.FieldUint64s:
		return m.Uint64s()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MessageWithIntsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case messagewithints.FieldInt32s:
		return m.OldInt32s(ctx)
	case messagewithints.FieldInt64s:
		return m.OldInt64s(ctx)
	case messagewithints.FieldUint32s:
		return m.OldUint32s(ctx)
	case messagewithints.FieldUint64s:
		return m.OldUint64s(ctx)
	}
	return nil, fmt.Errorf("unknown MessageWithInts field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessageWithIntsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case messagewithints.FieldInt32s:
		v, ok := value.([]int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInt32s(v)
		return nil
	case messagewithints.FieldInt64s:
		v, ok := value.([]int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInt64s(v)
		return nil
	case messagewithints.FieldUint32s:
		v, ok := value.([]uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUint32s(v)
		return nil
	case messagewithints.FieldUint64s:
		v, ok := value.([]uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUint64s(v)
		return nil
	}
	return fmt.Errorf("unknown MessageWithInts field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MessageWithIntsMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MessageWithIntsMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessageWithIntsMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown MessageWithInts numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MessageWithIntsMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MessageWithIntsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MessageWithIntsMutation) ClearField(name string) error {
	return fmt.Errorf("unknown MessageWithInts nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MessageWithIntsMutation) ResetField(name string) error {
	switch name {
	case messagewithints.FieldInt32s:
		m.ResetInt32s()
		return nil
	case messagewithints.FieldInt64s:
		m.ResetInt64s()
		return nil
	case messagewithints.FieldUint32s:
		m.ResetUint32s()
		return nil
	case messagewithints.FieldUint64s:
		m.ResetUint64s()
		return nil
	}
	return fmt.Errorf("unknown MessageWithInts field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MessageWithIntsMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MessageWithIntsMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MessageWithIntsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MessageWithIntsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MessageWithIntsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MessageWithIntsMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MessageWithIntsMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown MessageWithInts unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MessageWithIntsMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown MessageWithInts edge %s", name)
}

// MessageWithOptionalsMutation represents an operation that mutates the MessageWithOptionals nodes in the graph.
type MessageWithOptionalsMutation struct {
	config
	op                Op
	typ               string
	id                *int
	str_optional      *string
	int_optional      *int8
	addint_optional   *int8
	uint_optional     *uint8
	adduint_optional  *int8
	float_optional    *float32
	addfloat_optional *float32
	bool_optional     *bool
	bytes_optional    *[]byte
	uuid_optional     *uuid.UUID
	time_optional     *time.Time
	clearedFields     map[string]struct{}
	done              bool
	oldValue          func(context.Context) (*MessageWithOptionals, error)
	predicates        []predicate.MessageWithOptionals
}

var _ ent.Mutation = (*MessageWithOptionalsMutation)(nil)

// messagewithoptionalsOption allows management of the mutation configuration using functional options.
type messagewithoptionalsOption func(*MessageWithOptionalsMutation)

// newMessageWithOptionalsMutation creates new mutation for the MessageWithOptionals entity.
func newMessageWithOptionalsMutation(c config, op Op, opts ...messagewithoptionalsOption) *MessageWithOptionalsMutation {
	m := &MessageWithOptionalsMutation{
		config:        c,
		op:            op,
		typ:           TypeMessageWithOptionals,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMessageWithOptionalsID sets the ID field of the mutation.
func withMessageWithOptionalsID(id int) messagewithoptionalsOption {
	return func(m *MessageWithOptionalsMutation) {
		var (
			err   error
			once  sync.Once
			value *MessageWithOptionals
		)
		m.oldValue = func(ctx context.Context) (*MessageWithOptionals, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MessageWithOptionals.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMessageWithOptionals sets the old MessageWithOptionals of the mutation.
func withMessageWithOptionals(node *MessageWithOptionals) messagewithoptionalsOption {
	return func(m *MessageWithOptionalsMutation) {
		m.oldValue = func(context.Context) (*MessageWithOptionals, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MessageWithOptionalsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MessageWithOptionalsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MessageWithOptionalsMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MessageWithOptionalsMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().MessageWithOptionals.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetStrOptional sets the "str_optional" field.
func (m *MessageWithOptionalsMutation) SetStrOptional(s string) {
	m.str_optional = &s
}

// StrOptional returns the value of the "str_optional" field in the mutation.
func (m *MessageWithOptionalsMutation) StrOptional() (r string, exists bool) {
	v := m.str_optional
	if v == nil {
		return
	}
	return *v, true
}

// OldStrOptional returns the old "str_optional" field's value of the MessageWithOptionals entity.
// If the MessageWithOptionals object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageWithOptionalsMutation) OldStrOptional(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStrOptional is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStrOptional requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStrOptional: %w", err)
	}
	return oldValue.StrOptional, nil
}

// ClearStrOptional clears the value of the "str_optional" field.
func (m *MessageWithOptionalsMutation) ClearStrOptional() {
	m.str_optional = nil
	m.clearedFields[messagewithoptionals.FieldStrOptional] = struct{}{}
}

// StrOptionalCleared returns if the "str_optional" field was cleared in this mutation.
func (m *MessageWithOptionalsMutation) StrOptionalCleared() bool {
	_, ok := m.clearedFields[messagewithoptionals.FieldStrOptional]
	return ok
}

// ResetStrOptional resets all changes to the "str_optional" field.
func (m *MessageWithOptionalsMutation) ResetStrOptional() {
	m.str_optional = nil
	delete(m.clearedFields, messagewithoptionals.FieldStrOptional)
}

// SetIntOptional sets the "int_optional" field.
func (m *MessageWithOptionalsMutation) SetIntOptional(i int8) {
	m.int_optional = &i
	m.addint_optional = nil
}

// IntOptional returns the value of the "int_optional" field in the mutation.
func (m *MessageWithOptionalsMutation) IntOptional() (r int8, exists bool) {
	v := m.int_optional
	if v == nil {
		return
	}
	return *v, true
}

// OldIntOptional returns the old "int_optional" field's value of the MessageWithOptionals entity.
// If the MessageWithOptionals object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageWithOptionalsMutation) OldIntOptional(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIntOptional is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIntOptional requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIntOptional: %w", err)
	}
	return oldValue.IntOptional, nil
}

// AddIntOptional adds i to the "int_optional" field.
func (m *MessageWithOptionalsMutation) AddIntOptional(i int8) {
	if m.addint_optional != nil {
		*m.addint_optional += i
	} else {
		m.addint_optional = &i
	}
}

// AddedIntOptional returns the value that was added to the "int_optional" field in this mutation.
func (m *MessageWithOptionalsMutation) AddedIntOptional() (r int8, exists bool) {
	v := m.addint_optional
	if v == nil {
		return
	}
	return *v, true
}

// ClearIntOptional clears the value of the "int_optional" field.
func (m *MessageWithOptionalsMutation) ClearIntOptional() {
	m.int_optional = nil
	m.addint_optional = nil
	m.clearedFields[messagewithoptionals.FieldIntOptional] = struct{}{}
}

// IntOptionalCleared returns if the "int_optional" field was cleared in this mutation.
func (m *MessageWithOptionalsMutation) IntOptionalCleared() bool {
	_, ok := m.clearedFields[messagewithoptionals.FieldIntOptional]
	return ok
}

// ResetIntOptional resets all changes to the "int_optional" field.
func (m *MessageWithOptionalsMutation) ResetIntOptional() {
	m.int_optional = nil
	m.addint_optional = nil
	delete(m.clearedFields, messagewithoptionals.FieldIntOptional)
}

// SetUintOptional sets the "uint_optional" field.
func (m *MessageWithOptionalsMutation) SetUintOptional(u uint8) {
	m.uint_optional = &u
	m.adduint_optional = nil
}

// UintOptional returns the value of the "uint_optional" field in the mutation.
func (m *MessageWithOptionalsMutation) UintOptional() (r uint8, exists bool) {
	v := m.uint_optional
	if v == nil {
		return
	}
	return *v, true
}

// OldUintOptional returns the old "uint_optional" field's value of the MessageWithOptionals entity.
// If the MessageWithOptionals object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageWithOptionalsMutation) OldUintOptional(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUintOptional is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUintOptional requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUintOptional: %w", err)
	}
	return oldValue.UintOptional, nil
}

// AddUintOptional adds u to the "uint_optional" field.
func (m *MessageWithOptionalsMutation) AddUintOptional(u int8) {
	if m.adduint_optional != nil {
		*m.adduint_optional += u
	} else {
		m.adduint_optional = &u
	}
}

// AddedUintOptional returns the value that was added to the "uint_optional" field in this mutation.
func (m *MessageWithOptionalsMutation) AddedUintOptional() (r int8, exists bool) {
	v := m.adduint_optional
	if v == nil {
		return
	}
	return *v, true
}

// ClearUintOptional clears the value of the "uint_optional" field.
func (m *MessageWithOptionalsMutation) ClearUintOptional() {
	m.uint_optional = nil
	m.adduint_optional = nil
	m.clearedFields[messagewithoptionals.FieldUintOptional] = struct{}{}
}

// UintOptionalCleared returns if the "uint_optional" field was cleared in this mutation.
func (m *MessageWithOptionalsMutation) UintOptionalCleared() bool {
	_, ok := m.clearedFields[messagewithoptionals.FieldUintOptional]
	return ok
}

// ResetUintOptional resets all changes to the "uint_optional" field.
func (m *MessageWithOptionalsMutation) ResetUintOptional() {
	m.uint_optional = nil
	m.adduint_optional = nil
	delete(m.clearedFields, messagewithoptionals.FieldUintOptional)
}

// SetFloatOptional sets the "float_optional" field.
func (m *MessageWithOptionalsMutation) SetFloatOptional(f float32) {
	m.float_optional = &f
	m.addfloat_optional = nil
}

// FloatOptional returns the value of the "float_optional" field in the mutation.
func (m *MessageWithOptionalsMutation) FloatOptional() (r float32, exists bool) {
	v := m.float_optional
	if v == nil {
		return
	}
	return *v, true
}

// OldFloatOptional returns the old "float_optional" field's value of the MessageWithOptionals entity.
// If the MessageWithOptionals object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageWithOptionalsMutation) OldFloatOptional(ctx context.Context) (v float32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFloatOptional is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFloatOptional requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFloatOptional: %w", err)
	}
	return oldValue.FloatOptional, nil
}

// AddFloatOptional adds f to the "float_optional" field.
func (m *MessageWithOptionalsMutation) AddFloatOptional(f float32) {
	if m.addfloat_optional != nil {
		*m.addfloat_optional += f
	} else {
		m.addfloat_optional = &f
	}
}

// AddedFloatOptional returns the value that was added to the "float_optional" field in this mutation.
func (m *MessageWithOptionalsMutation) AddedFloatOptional() (r float32, exists bool) {
	v := m.addfloat_optional
	if v == nil {
		return
	}
	return *v, true
}

// ClearFloatOptional clears the value of the "float_optional" field.
func (m *MessageWithOptionalsMutation) ClearFloatOptional() {
	m.float_optional = nil
	m.addfloat_optional = nil
	m.clearedFields[messagewithoptionals.FieldFloatOptional] = struct{}{}
}

// FloatOptionalCleared returns if the "float_optional" field was cleared in this mutation.
func (m *MessageWithOptionalsMutation) FloatOptionalCleared() bool {
	_, ok := m.clearedFields[messagewithoptionals.FieldFloatOptional]
	return ok
}

// ResetFloatOptional resets all changes to the "float_optional" field.
func (m *MessageWithOptionalsMutation) ResetFloatOptional() {
	m.float_optional = nil
	m.addfloat_optional = nil
	delete(m.clearedFields, messagewithoptionals.FieldFloatOptional)
}

// SetBoolOptional sets the "bool_optional" field.
func (m *MessageWithOptionalsMutation) SetBoolOptional(b bool) {
	m.bool_optional = &b
}

// BoolOptional returns the value of the "bool_optional" field in the mutation.
func (m *MessageWithOptionalsMutation) BoolOptional() (r bool, exists bool) {
	v := m.bool_optional
	if v == nil {
		return
	}
	return *v, true
}

// OldBoolOptional returns the old "bool_optional" field's value of the MessageWithOptionals entity.
// If the MessageWithOptionals object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageWithOptionalsMutation) OldBoolOptional(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBoolOptional is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBoolOptional requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBoolOptional: %w", err)
	}
	return oldValue.BoolOptional, nil
}

// ClearBoolOptional clears the value of the "bool_optional" field.
func (m *MessageWithOptionalsMutation) ClearBoolOptional() {
	m.bool_optional = nil
	m.clearedFields[messagewithoptionals.FieldBoolOptional] = struct{}{}
}

// BoolOptionalCleared returns if the "bool_optional" field was cleared in this mutation.
func (m *MessageWithOptionalsMutation) BoolOptionalCleared() bool {
	_, ok := m.clearedFields[messagewithoptionals.FieldBoolOptional]
	return ok
}

// ResetBoolOptional resets all changes to the "bool_optional" field.
func (m *MessageWithOptionalsMutation) ResetBoolOptional() {
	m.bool_optional = nil
	delete(m.clearedFields, messagewithoptionals.FieldBoolOptional)
}

// SetBytesOptional sets the "bytes_optional" field.
func (m *MessageWithOptionalsMutation) SetBytesOptional(b []byte) {
	m.bytes_optional = &b
}

// BytesOptional returns the value of the "bytes_optional" field in the mutation.
func (m *MessageWithOptionalsMutation) BytesOptional() (r []byte, exists bool) {
	v := m.bytes_optional
	if v == nil {
		return
	}
	return *v, true
}

// OldBytesOptional returns the old "bytes_optional" field's value of the MessageWithOptionals entity.
// If the MessageWithOptionals object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageWithOptionalsMutation) OldBytesOptional(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBytesOptional is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBytesOptional requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBytesOptional: %w", err)
	}
	return oldValue.BytesOptional, nil
}

// ClearBytesOptional clears the value of the "bytes_optional" field.
func (m *MessageWithOptionalsMutation) ClearBytesOptional() {
	m.bytes_optional = nil
	m.clearedFields[messagewithoptionals.FieldBytesOptional] = struct{}{}
}

// BytesOptionalCleared returns if the "bytes_optional" field was cleared in this mutation.
func (m *MessageWithOptionalsMutation) BytesOptionalCleared() bool {
	_, ok := m.clearedFields[messagewithoptionals.FieldBytesOptional]
	return ok
}

// ResetBytesOptional resets all changes to the "bytes_optional" field.
func (m *MessageWithOptionalsMutation) ResetBytesOptional() {
	m.bytes_optional = nil
	delete(m.clearedFields, messagewithoptionals.FieldBytesOptional)
}

// SetUUIDOptional sets the "uuid_optional" field.
func (m *MessageWithOptionalsMutation) SetUUIDOptional(u uuid.UUID) {
	m.uuid_optional = &u
}

// UUIDOptional returns the value of the "uuid_optional" field in the mutation.
func (m *MessageWithOptionalsMutation) UUIDOptional() (r uuid.UUID, exists bool) {
	v := m.uuid_optional
	if v == nil {
		return
	}
	return *v, true
}

// OldUUIDOptional returns the old "uuid_optional" field's value of the MessageWithOptionals entity.
// If the MessageWithOptionals object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageWithOptionalsMutation) OldUUIDOptional(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUUIDOptional is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUUIDOptional requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUUIDOptional: %w", err)
	}
	return oldValue.UUIDOptional, nil
}

// ClearUUIDOptional clears the value of the "uuid_optional" field.
func (m *MessageWithOptionalsMutation) ClearUUIDOptional() {
	m.uuid_optional = nil
	m.clearedFields[messagewithoptionals.FieldUUIDOptional] = struct{}{}
}

// UUIDOptionalCleared returns if the "uuid_optional" field was cleared in this mutation.
func (m *MessageWithOptionalsMutation) UUIDOptionalCleared() bool {
	_, ok := m.clearedFields[messagewithoptionals.FieldUUIDOptional]
	return ok
}

// ResetUUIDOptional resets all changes to the "uuid_optional" field.
func (m *MessageWithOptionalsMutation) ResetUUIDOptional() {
	m.uuid_optional = nil
	delete(m.clearedFields, messagewithoptionals.FieldUUIDOptional)
}

// SetTimeOptional sets the "time_optional" field.
func (m *MessageWithOptionalsMutation) SetTimeOptional(t time.Time) {
	m.time_optional = &t
}

// TimeOptional returns the value of the "time_optional" field in the mutation.
func (m *MessageWithOptionalsMutation) TimeOptional() (r time.Time, exists bool) {
	v := m.time_optional
	if v == nil {
		return
	}
	return *v, true
}

// OldTimeOptional returns the old "time_optional" field's value of the MessageWithOptionals entity.
// If the MessageWithOptionals object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageWithOptionalsMutation) OldTimeOptional(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimeOptional is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimeOptional requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimeOptional: %w", err)
	}
	return oldValue.TimeOptional, nil
}

// ClearTimeOptional clears the value of the "time_optional" field.
func (m *MessageWithOptionalsMutation) ClearTimeOptional() {
	m.time_optional = nil
	m.clearedFields[messagewithoptionals.FieldTimeOptional] = struct{}{}
}

// TimeOptionalCleared returns if the "time_optional" field was cleared in this mutation.
func (m *MessageWithOptionalsMutation) TimeOptionalCleared() bool {
	_, ok := m.clearedFields[messagewithoptionals.FieldTimeOptional]
	return ok
}

// ResetTimeOptional resets all changes to the "time_optional" field.
func (m *MessageWithOptionalsMutation) ResetTimeOptional() {
	m.time_optional = nil
	delete(m.clearedFields, messagewithoptionals.FieldTimeOptional)
}

// Where appends a list predicates to the MessageWithOptionalsMutation builder.
func (m *MessageWithOptionalsMutation) Where(ps ...predicate.MessageWithOptionals) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MessageWithOptionalsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MessageWithOptionalsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.MessageWithOptionals, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MessageWithOptionalsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MessageWithOptionalsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (MessageWithOptionals).
func (m *MessageWithOptionalsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MessageWithOptionalsMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.str_optional != nil {
		fields = append(fields, messagewithoptionals.FieldStrOptional)
	}
	if m.int_optional != nil {
		fields = append(fields, messagewithoptionals.FieldIntOptional)
	}
	if m.uint_optional != nil {
		fields = append(fields, messagewithoptionals.FieldUintOptional)
	}
	if m.float_optional != nil {
		fields = append(fields, messagewithoptionals.FieldFloatOptional)
	}
	if m.bool_optional != nil {
		fields = append(fields, messagewithoptionals.FieldBoolOptional)
	}
	if m.bytes_optional != nil {
		fields = append(fields, messagewithoptionals.FieldBytesOptional)
	}
	if m.uuid_optional != nil {
		fields = append(fields, messagewithoptionals.FieldUUIDOptional)
	}
	if m.time_optional != nil {
		fields = append(fields, messagewithoptionals.FieldTimeOptional)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MessageWithOptionalsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case messagewithoptionals.FieldStrOptional:
		return m.StrOptional()
	case messagewithoptionals.FieldIntOptional:
		return m.IntOptional()
	case messagewithoptionals.FieldUintOptional:
		return m.UintOptional()
	case messagewithoptionals.FieldFloatOptional:
		return m.FloatOptional()
	case messagewithoptionals.FieldBoolOptional:
		return m.BoolOptional()
	case messagewithoptionals.FieldBytesOptional:
		return m.BytesOptional()
	case messagewithoptionals.FieldUUIDOptional:
		return m.UUIDOptional()
	case messagewithoptionals.FieldTimeOptional:
		return m.TimeOptional()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MessageWithOptionalsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case messagewithoptionals.FieldStrOptional:
		return m.OldStrOptional(ctx)
	case messagewithoptionals.FieldIntOptional:
		return m.OldIntOptional(ctx)
	case messagewithoptionals.FieldUintOptional:
		return m.OldUintOptional(ctx)
	case messagewithoptionals.FieldFloatOptional:
		return m.OldFloatOptional(ctx)
	case messagewithoptionals.FieldBoolOptional:
		return m.OldBoolOptional(ctx)
	case messagewithoptionals.FieldBytesOptional:
		return m.OldBytesOptional(ctx)
	case messagewithoptionals.FieldUUIDOptional:
		return m.OldUUIDOptional(ctx)
	case messagewithoptionals.FieldTimeOptional:
		return m.OldTimeOptional(ctx)
	}
	return nil, fmt.Errorf("unknown MessageWithOptionals field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessageWithOptionalsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case messagewithoptionals.FieldStrOptional:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStrOptional(v)
		return nil
	case messagewithoptionals.FieldIntOptional:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIntOptional(v)
		return nil
	case messagewithoptionals.FieldUintOptional:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUintOptional(v)
		return nil
	case messagewithoptionals.FieldFloatOptional:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFloatOptional(v)
		return nil
	case messagewithoptionals.FieldBoolOptional:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBoolOptional(v)
		return nil
	case messagewithoptionals.FieldBytesOptional:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBytesOptional(v)
		return nil
	case messagewithoptionals.FieldUUIDOptional:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUUIDOptional(v)
		return nil
	case messagewithoptionals.FieldTimeOptional:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimeOptional(v)
		return nil
	}
	return fmt.Errorf("unknown MessageWithOptionals field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MessageWithOptionalsMutation) AddedFields() []string {
	var fields []string
	if m.addint_optional != nil {
		fields = append(fields, messagewithoptionals.FieldIntOptional)
	}
	if m.adduint_optional != nil {
		fields = append(fields, messagewithoptionals.FieldUintOptional)
	}
	if m.addfloat_optional != nil {
		fields = append(fields, messagewithoptionals.FieldFloatOptional)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MessageWithOptionalsMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case messagewithoptionals.FieldIntOptional:
		return m.AddedIntOptional()
	case messagewithoptionals.FieldUintOptional:
		return m.AddedUintOptional()
	case messagewithoptionals.FieldFloatOptional:
		return m.AddedFloatOptional()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessageWithOptionalsMutation) AddField(name string, value ent.Value) error {
	switch name {
	case messagewithoptionals.FieldIntOptional:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIntOptional(v)
		return nil
	case messagewithoptionals.FieldUintOptional:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUintOptional(v)
		return nil
	case messagewithoptionals.FieldFloatOptional:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFloatOptional(v)
		return nil
	}
	return fmt.Errorf("unknown MessageWithOptionals numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MessageWithOptionalsMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(messagewithoptionals.FieldStrOptional) {
		fields = append(fields, messagewithoptionals.FieldStrOptional)
	}
	if m.FieldCleared(messagewithoptionals.FieldIntOptional) {
		fields = append(fields, messagewithoptionals.FieldIntOptional)
	}
	if m.FieldCleared(messagewithoptionals.FieldUintOptional) {
		fields = append(fields, messagewithoptionals.FieldUintOptional)
	}
	if m.FieldCleared(messagewithoptionals.FieldFloatOptional) {
		fields = append(fields, messagewithoptionals.FieldFloatOptional)
	}
	if m.FieldCleared(messagewithoptionals.FieldBoolOptional) {
		fields = append(fields, messagewithoptionals.FieldBoolOptional)
	}
	if m.FieldCleared(messagewithoptionals.FieldBytesOptional) {
		fields = append(fields, messagewithoptionals.FieldBytesOptional)
	}
	if m.FieldCleared(messagewithoptionals.FieldUUIDOptional) {
		fields = append(fields, messagewithoptionals.FieldUUIDOptional)
	}
	if m.FieldCleared(messagewithoptionals.FieldTimeOptional) {
		fields = append(fields, messagewithoptionals.FieldTimeOptional)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MessageWithOptionalsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MessageWithOptionalsMutation) ClearField(name string) error {
	switch name {
	case messagewithoptionals.FieldStrOptional:
		m.ClearStrOptional()
		return nil
	case messagewithoptionals.FieldIntOptional:
		m.ClearIntOptional()
		return nil
	case messagewithoptionals.FieldUintOptional:
		m.ClearUintOptional()
		return nil
	case messagewithoptionals.FieldFloatOptional:
		m.ClearFloatOptional()
		return nil
	case messagewithoptionals.FieldBoolOptional:
		m.ClearBoolOptional()
		return nil
	case messagewithoptionals.FieldBytesOptional:
		m.ClearBytesOptional()
		return nil
	case messagewithoptionals.FieldUUIDOptional:
		m.ClearUUIDOptional()
		return nil
	case messagewithoptionals.FieldTimeOptional:
		m.ClearTimeOptional()
		return nil
	}
	return fmt.Errorf("unknown MessageWithOptionals nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MessageWithOptionalsMutation) ResetField(name string) error {
	switch name {
	case messagewithoptionals.FieldStrOptional:
		m.ResetStrOptional()
		return nil
	case messagewithoptionals.FieldIntOptional:
		m.ResetIntOptional()
		return nil
	case messagewithoptionals.FieldUintOptional:
		m.ResetUintOptional()
		return nil
	case messagewithoptionals.FieldFloatOptional:
		m.ResetFloatOptional()
		return nil
	case messagewithoptionals.FieldBoolOptional:
		m.ResetBoolOptional()
		return nil
	case messagewithoptionals.FieldBytesOptional:
		m.ResetBytesOptional()
		return nil
	case messagewithoptionals.FieldUUIDOptional:
		m.ResetUUIDOptional()
		return nil
	case messagewithoptionals.FieldTimeOptional:
		m.ResetTimeOptional()
		return nil
	}
	return fmt.Errorf("unknown MessageWithOptionals field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MessageWithOptionalsMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MessageWithOptionalsMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MessageWithOptionalsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MessageWithOptionalsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MessageWithOptionalsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MessageWithOptionalsMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MessageWithOptionalsMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown MessageWithOptionals unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MessageWithOptionalsMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown MessageWithOptionals edge %s", name)
}

// MessageWithPackageNameMutation represents an operation that mutates the MessageWithPackageName nodes in the graph.
type MessageWithPackageNameMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*MessageWithPackageName, error)
	predicates    []predicate.MessageWithPackageName
}

var _ ent.Mutation = (*MessageWithPackageNameMutation)(nil)

// messagewithpackagenameOption allows management of the mutation configuration using functional options.
type messagewithpackagenameOption func(*MessageWithPackageNameMutation)

// newMessageWithPackageNameMutation creates new mutation for the MessageWithPackageName entity.
func newMessageWithPackageNameMutation(c config, op Op, opts ...messagewithpackagenameOption) *MessageWithPackageNameMutation {
	m := &MessageWithPackageNameMutation{
		config:        c,
		op:            op,
		typ:           TypeMessageWithPackageName,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMessageWithPackageNameID sets the ID field of the mutation.
func withMessageWithPackageNameID(id int) messagewithpackagenameOption {
	return func(m *MessageWithPackageNameMutation) {
		var (
			err   error
			once  sync.Once
			value *MessageWithPackageName
		)
		m.oldValue = func(ctx context.Context) (*MessageWithPackageName, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MessageWithPackageName.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMessageWithPackageName sets the old MessageWithPackageName of the mutation.
func withMessageWithPackageName(node *MessageWithPackageName) messagewithpackagenameOption {
	return func(m *MessageWithPackageNameMutation) {
		m.oldValue = func(context.Context) (*MessageWithPackageName, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MessageWithPackageNameMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MessageWithPackageNameMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MessageWithPackageNameMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MessageWithPackageNameMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().MessageWithPackageName.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *MessageWithPackageNameMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *MessageWithPackageNameMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the MessageWithPackageName entity.
// If the MessageWithPackageName object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageWithPackageNameMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *MessageWithPackageNameMutation) ResetName() {
	m.name = nil
}

// Where appends a list predicates to the MessageWithPackageNameMutation builder.
func (m *MessageWithPackageNameMutation) Where(ps ...predicate.MessageWithPackageName) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MessageWithPackageNameMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MessageWithPackageNameMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.MessageWithPackageName, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MessageWithPackageNameMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MessageWithPackageNameMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (MessageWithPackageName).
func (m *MessageWithPackageNameMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MessageWithPackageNameMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, messagewithpackagename.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MessageWithPackageNameMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case messagewithpackagename.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MessageWithPackageNameMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case messagewithpackagename.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown MessageWithPackageName field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessageWithPackageNameMutation) SetField(name string, value ent.Value) error {
	switch name {
	case messagewithpackagename.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown MessageWithPackageName field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MessageWithPackageNameMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MessageWithPackageNameMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessageWithPackageNameMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown MessageWithPackageName numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MessageWithPackageNameMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MessageWithPackageNameMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MessageWithPackageNameMutation) ClearField(name string) error {
	return fmt.Errorf("unknown MessageWithPackageName nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MessageWithPackageNameMutation) ResetField(name string) error {
	switch name {
	case messagewithpackagename.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown MessageWithPackageName field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MessageWithPackageNameMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MessageWithPackageNameMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MessageWithPackageNameMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MessageWithPackageNameMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MessageWithPackageNameMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MessageWithPackageNameMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MessageWithPackageNameMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown MessageWithPackageName unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MessageWithPackageNameMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown MessageWithPackageName edge %s", name)
}

// MessageWithStringsMutation represents an operation that mutates the MessageWithStrings nodes in the graph.
type MessageWithStringsMutation struct {
	config
	op            Op
	typ           string
	id            *int
	strings       *[]string
	appendstrings []string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*MessageWithStrings, error)
	predicates    []predicate.MessageWithStrings
}

var _ ent.Mutation = (*MessageWithStringsMutation)(nil)

// messagewithstringsOption allows management of the mutation configuration using functional options.
type messagewithstringsOption func(*MessageWithStringsMutation)

// newMessageWithStringsMutation creates new mutation for the MessageWithStrings entity.
func newMessageWithStringsMutation(c config, op Op, opts ...messagewithstringsOption) *MessageWithStringsMutation {
	m := &MessageWithStringsMutation{
		config:        c,
		op:            op,
		typ:           TypeMessageWithStrings,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMessageWithStringsID sets the ID field of the mutation.
func withMessageWithStringsID(id int) messagewithstringsOption {
	return func(m *MessageWithStringsMutation) {
		var (
			err   error
			once  sync.Once
			value *MessageWithStrings
		)
		m.oldValue = func(ctx context.Context) (*MessageWithStrings, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MessageWithStrings.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMessageWithStrings sets the old MessageWithStrings of the mutation.
func withMessageWithStrings(node *MessageWithStrings) messagewithstringsOption {
	return func(m *MessageWithStringsMutation) {
		m.oldValue = func(context.Context) (*MessageWithStrings, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MessageWithStringsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MessageWithStringsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MessageWithStringsMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MessageWithStringsMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().MessageWithStrings.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetStrings sets the "strings" field.
func (m *MessageWithStringsMutation) SetStrings(s []string) {
	m.strings = &s
	m.appendstrings = nil
}

// Strings returns the value of the "strings" field in the mutation.
func (m *MessageWithStringsMutation) Strings() (r []string, exists bool) {
	v := m.strings
	if v == nil {
		return
	}
	return *v, true
}

// OldStrings returns the old "strings" field's value of the MessageWithStrings entity.
// If the MessageWithStrings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageWithStringsMutation) OldStrings(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStrings is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStrings requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStrings: %w", err)
	}
	return oldValue.Strings, nil
}

// AppendStrings adds s to the "strings" field.
func (m *MessageWithStringsMutation) AppendStrings(s []string) {
	m.appendstrings = append(m.appendstrings, s...)
}

// AppendedStrings returns the list of values that were appended to the "strings" field in this mutation.
func (m *MessageWithStringsMutation) AppendedStrings() ([]string, bool) {
	if len(m.appendstrings) == 0 {
		return nil, false
	}
	return m.appendstrings, true
}

// ResetStrings resets all changes to the "strings" field.
func (m *MessageWithStringsMutation) ResetStrings() {
	m.strings = nil
	m.appendstrings = nil
}

// Where appends a list predicates to the MessageWithStringsMutation builder.
func (m *MessageWithStringsMutation) Where(ps ...predicate.MessageWithStrings) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MessageWithStringsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MessageWithStringsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.MessageWithStrings, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MessageWithStringsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MessageWithStringsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (MessageWithStrings).
func (m *MessageWithStringsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MessageWithStringsMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.strings != nil {
		fields = append(fields, messagewithstrings.FieldStrings)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MessageWithStringsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case messagewithstrings.FieldStrings:
		return m.Strings()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MessageWithStringsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case messagewithstrings.FieldStrings:
		return m.OldStrings(ctx)
	}
	return nil, fmt.Errorf("unknown MessageWithStrings field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessageWithStringsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case messagewithstrings.FieldStrings:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStrings(v)
		return nil
	}
	return fmt.Errorf("unknown MessageWithStrings field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MessageWithStringsMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MessageWithStringsMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessageWithStringsMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown MessageWithStrings numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MessageWithStringsMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MessageWithStringsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MessageWithStringsMutation) ClearField(name string) error {
	return fmt.Errorf("unknown MessageWithStrings nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MessageWithStringsMutation) ResetField(name string) error {
	switch name {
	case messagewithstrings.FieldStrings:
		m.ResetStrings()
		return nil
	}
	return fmt.Errorf("unknown MessageWithStrings field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MessageWithStringsMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MessageWithStringsMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MessageWithStringsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MessageWithStringsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MessageWithStringsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MessageWithStringsMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MessageWithStringsMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown MessageWithStrings unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MessageWithStringsMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown MessageWithStrings edge %s", name)
}

// NoBackrefMutation represents an operation that mutates the NoBackref nodes in the graph.
type NoBackrefMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	images        map[uuid.UUID]struct{}
	removedimages map[uuid.UUID]struct{}
	clearedimages bool
	done          bool
	oldValue      func(context.Context) (*NoBackref, error)
	predicates    []predicate.NoBackref
}

var _ ent.Mutation = (*NoBackrefMutation)(nil)

// nobackrefOption allows management of the mutation configuration using functional options.
type nobackrefOption func(*NoBackrefMutation)

// newNoBackrefMutation creates new mutation for the NoBackref entity.
func newNoBackrefMutation(c config, op Op, opts ...nobackrefOption) *NoBackrefMutation {
	m := &NoBackrefMutation{
		config:        c,
		op:            op,
		typ:           TypeNoBackref,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNoBackrefID sets the ID field of the mutation.
func withNoBackrefID(id int) nobackrefOption {
	return func(m *NoBackrefMutation) {
		var (
			err   error
			once  sync.Once
			value *NoBackref
		)
		m.oldValue = func(ctx context.Context) (*NoBackref, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().NoBackref.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNoBackref sets the old NoBackref of the mutation.
func withNoBackref(node *NoBackref) nobackrefOption {
	return func(m *NoBackrefMutation) {
		m.oldValue = func(context.Context) (*NoBackref, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NoBackrefMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NoBackrefMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *NoBackrefMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *NoBackrefMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().NoBackref.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// AddImageIDs adds the "images" edge to the Image entity by ids.
func (m *NoBackrefMutation) AddImageIDs(ids ...uuid.UUID) {
	if m.images == nil {
		m.images = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.images[ids[i]] = struct{}{}
	}
}

// ClearImages clears the "images" edge to the Image entity.
func (m *NoBackrefMutation) ClearImages() {
	m.clearedimages = true
}

// ImagesCleared reports if the "images" edge to the Image entity was cleared.
func (m *NoBackrefMutation) ImagesCleared() bool {
	return m.clearedimages
}

// RemoveImageIDs removes the "images" edge to the Image entity by IDs.
func (m *NoBackrefMutation) RemoveImageIDs(ids ...uuid.UUID) {
	if m.removedimages == nil {
		m.removedimages = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.images, ids[i])
		m.removedimages[ids[i]] = struct{}{}
	}
}

// RemovedImages returns the removed IDs of the "images" edge to the Image entity.
func (m *NoBackrefMutation) RemovedImagesIDs() (ids []uuid.UUID) {
	for id := range m.removedimages {
		ids = append(ids, id)
	}
	return
}

// ImagesIDs returns the "images" edge IDs in the mutation.
func (m *NoBackrefMutation) ImagesIDs() (ids []uuid.UUID) {
	for id := range m.images {
		ids = append(ids, id)
	}
	return
}

// ResetImages resets all changes to the "images" edge.
func (m *NoBackrefMutation) ResetImages() {
	m.images = nil
	m.clearedimages = false
	m.removedimages = nil
}

// Where appends a list predicates to the NoBackrefMutation builder.
func (m *NoBackrefMutation) Where(ps ...predicate.NoBackref) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the NoBackrefMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *NoBackrefMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.NoBackref, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *NoBackrefMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *NoBackrefMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (NoBackref).
func (m *NoBackrefMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *NoBackrefMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *NoBackrefMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *NoBackrefMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown NoBackref field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NoBackrefMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown NoBackref field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *NoBackrefMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *NoBackrefMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NoBackrefMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown NoBackref numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *NoBackrefMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *NoBackrefMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *NoBackrefMutation) ClearField(name string) error {
	return fmt.Errorf("unknown NoBackref nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *NoBackrefMutation) ResetField(name string) error {
	return fmt.Errorf("unknown NoBackref field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *NoBackrefMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.images != nil {
		edges = append(edges, nobackref.EdgeImages)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *NoBackrefMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case nobackref.EdgeImages:
		ids := make([]ent.Value, 0, len(m.images))
		for id := range m.images {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *NoBackrefMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedimages != nil {
		edges = append(edges, nobackref.EdgeImages)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *NoBackrefMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case nobackref.EdgeImages:
		ids := make([]ent.Value, 0, len(m.removedimages))
		for id := range m.removedimages {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *NoBackrefMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedimages {
		edges = append(edges, nobackref.EdgeImages)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *NoBackrefMutation) EdgeCleared(name string) bool {
	switch name {
	case nobackref.EdgeImages:
		return m.clearedimages
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *NoBackrefMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown NoBackref unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *NoBackrefMutation) ResetEdge(name string) error {
	switch name {
	case nobackref.EdgeImages:
		m.ResetImages()
		return nil
	}
	return fmt.Errorf("unknown NoBackref edge %s", name)
}

// OneMethodServiceMutation represents an operation that mutates the OneMethodService nodes in the graph.
type OneMethodServiceMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*OneMethodService, error)
	predicates    []predicate.OneMethodService
}

var _ ent.Mutation = (*OneMethodServiceMutation)(nil)

// onemethodserviceOption allows management of the mutation configuration using functional options.
type onemethodserviceOption func(*OneMethodServiceMutation)

// newOneMethodServiceMutation creates new mutation for the OneMethodService entity.
func newOneMethodServiceMutation(c config, op Op, opts ...onemethodserviceOption) *OneMethodServiceMutation {
	m := &OneMethodServiceMutation{
		config:        c,
		op:            op,
		typ:           TypeOneMethodService,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOneMethodServiceID sets the ID field of the mutation.
func withOneMethodServiceID(id int) onemethodserviceOption {
	return func(m *OneMethodServiceMutation) {
		var (
			err   error
			once  sync.Once
			value *OneMethodService
		)
		m.oldValue = func(ctx context.Context) (*OneMethodService, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().OneMethodService.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOneMethodService sets the old OneMethodService of the mutation.
func withOneMethodService(node *OneMethodService) onemethodserviceOption {
	return func(m *OneMethodServiceMutation) {
		m.oldValue = func(context.Context) (*OneMethodService, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OneMethodServiceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OneMethodServiceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OneMethodServiceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OneMethodServiceMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().OneMethodService.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// Where appends a list predicates to the OneMethodServiceMutation builder.
func (m *OneMethodServiceMutation) Where(ps ...predicate.OneMethodService) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the OneMethodServiceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *OneMethodServiceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.OneMethodService, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *OneMethodServiceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *OneMethodServiceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (OneMethodService).
func (m *OneMethodServiceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OneMethodServiceMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OneMethodServiceMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OneMethodServiceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown OneMethodService field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OneMethodServiceMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown OneMethodService field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OneMethodServiceMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OneMethodServiceMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OneMethodServiceMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown OneMethodService numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OneMethodServiceMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OneMethodServiceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OneMethodServiceMutation) ClearField(name string) error {
	return fmt.Errorf("unknown OneMethodService nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OneMethodServiceMutation) ResetField(name string) error {
	return fmt.Errorf("unknown OneMethodService field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OneMethodServiceMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OneMethodServiceMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OneMethodServiceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OneMethodServiceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OneMethodServiceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OneMethodServiceMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OneMethodServiceMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown OneMethodService unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OneMethodServiceMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown OneMethodService edge %s", name)
}

// PortalMutation represents an operation that mutates the Portal nodes in the graph.
type PortalMutation struct {
	config
	op              Op
	typ             string
	id              *int
	name            *string
	description     *string
	clearedFields   map[string]struct{}
	category        *int
	clearedcategory bool
	done            bool
	oldValue        func(context.Context) (*Portal, error)
	predicates      []predicate.Portal
}

var _ ent.Mutation = (*PortalMutation)(nil)

// portalOption allows management of the mutation configuration using functional options.
type portalOption func(*PortalMutation)

// newPortalMutation creates new mutation for the Portal entity.
func newPortalMutation(c config, op Op, opts ...portalOption) *PortalMutation {
	m := &PortalMutation{
		config:        c,
		op:            op,
		typ:           TypePortal,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPortalID sets the ID field of the mutation.
func withPortalID(id int) portalOption {
	return func(m *PortalMutation) {
		var (
			err   error
			once  sync.Once
			value *Portal
		)
		m.oldValue = func(ctx context.Context) (*Portal, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Portal.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPortal sets the old Portal of the mutation.
func withPortal(node *Portal) portalOption {
	return func(m *PortalMutation) {
		m.oldValue = func(context.Context) (*Portal, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PortalMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PortalMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PortalMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PortalMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Portal.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *PortalMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *PortalMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Portal entity.
// If the Portal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PortalMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *PortalMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *PortalMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *PortalMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Portal entity.
// If the Portal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PortalMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *PortalMutation) ResetDescription() {
	m.description = nil
}

// SetCategoryID sets the "category" edge to the Category entity by id.
func (m *PortalMutation) SetCategoryID(id int) {
	m.category = &id
}

// ClearCategory clears the "category" edge to the Category entity.
func (m *PortalMutation) ClearCategory() {
	m.clearedcategory = true
}

// CategoryCleared reports if the "category" edge to the Category entity was cleared.
func (m *PortalMutation) CategoryCleared() bool {
	return m.clearedcategory
}

// CategoryID returns the "category" edge ID in the mutation.
func (m *PortalMutation) CategoryID() (id int, exists bool) {
	if m.category != nil {
		return *m.category, true
	}
	return
}

// CategoryIDs returns the "category" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CategoryID instead. It exists only for internal usage by the builders.
func (m *PortalMutation) CategoryIDs() (ids []int) {
	if id := m.category; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCategory resets all changes to the "category" edge.
func (m *PortalMutation) ResetCategory() {
	m.category = nil
	m.clearedcategory = false
}

// Where appends a list predicates to the PortalMutation builder.
func (m *PortalMutation) Where(ps ...predicate.Portal) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PortalMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PortalMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Portal, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PortalMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PortalMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Portal).
func (m *PortalMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PortalMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, portal.FieldName)
	}
	if m.description != nil {
		fields = append(fields, portal.FieldDescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PortalMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case portal.FieldName:
		return m.Name()
	case portal.FieldDescription:
		return m.Description()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PortalMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case portal.FieldName:
		return m.OldName(ctx)
	case portal.FieldDescription:
		return m.OldDescription(ctx)
	}
	return nil, fmt.Errorf("unknown Portal field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PortalMutation) SetField(name string, value ent.Value) error {
	switch name {
	case portal.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case portal.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	}
	return fmt.Errorf("unknown Portal field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PortalMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PortalMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PortalMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Portal numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PortalMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PortalMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PortalMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Portal nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PortalMutation) ResetField(name string) error {
	switch name {
	case portal.FieldName:
		m.ResetName()
		return nil
	case portal.FieldDescription:
		m.ResetDescription()
		return nil
	}
	return fmt.Errorf("unknown Portal field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PortalMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.category != nil {
		edges = append(edges, portal.EdgeCategory)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PortalMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case portal.EdgeCategory:
		if id := m.category; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PortalMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PortalMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PortalMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedcategory {
		edges = append(edges, portal.EdgeCategory)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PortalMutation) EdgeCleared(name string) bool {
	switch name {
	case portal.EdgeCategory:
		return m.clearedcategory
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PortalMutation) ClearEdge(name string) error {
	switch name {
	case portal.EdgeCategory:
		m.ClearCategory()
		return nil
	}
	return fmt.Errorf("unknown Portal unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PortalMutation) ResetEdge(name string) error {
	switch name {
	case portal.EdgeCategory:
		m.ResetCategory()
		return nil
	}
	return fmt.Errorf("unknown Portal edge %s", name)
}

// SkipEdgeExampleMutation represents an operation that mutates the SkipEdgeExample nodes in the graph.
type SkipEdgeExampleMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	user          *int
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*SkipEdgeExample, error)
	predicates    []predicate.SkipEdgeExample
}

var _ ent.Mutation = (*SkipEdgeExampleMutation)(nil)

// skipedgeexampleOption allows management of the mutation configuration using functional options.
type skipedgeexampleOption func(*SkipEdgeExampleMutation)

// newSkipEdgeExampleMutation creates new mutation for the SkipEdgeExample entity.
func newSkipEdgeExampleMutation(c config, op Op, opts ...skipedgeexampleOption) *SkipEdgeExampleMutation {
	m := &SkipEdgeExampleMutation{
		config:        c,
		op:            op,
		typ:           TypeSkipEdgeExample,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSkipEdgeExampleID sets the ID field of the mutation.
func withSkipEdgeExampleID(id int) skipedgeexampleOption {
	return func(m *SkipEdgeExampleMutation) {
		var (
			err   error
			once  sync.Once
			value *SkipEdgeExample
		)
		m.oldValue = func(ctx context.Context) (*SkipEdgeExample, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SkipEdgeExample.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSkipEdgeExample sets the old SkipEdgeExample of the mutation.
func withSkipEdgeExample(node *SkipEdgeExample) skipedgeexampleOption {
	return func(m *SkipEdgeExampleMutation) {
		m.oldValue = func(context.Context) (*SkipEdgeExample, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SkipEdgeExampleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SkipEdgeExampleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SkipEdgeExampleMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SkipEdgeExampleMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SkipEdgeExample.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *SkipEdgeExampleMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *SkipEdgeExampleMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *SkipEdgeExampleMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *SkipEdgeExampleMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *SkipEdgeExampleMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *SkipEdgeExampleMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the SkipEdgeExampleMutation builder.
func (m *SkipEdgeExampleMutation) Where(ps ...predicate.SkipEdgeExample) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SkipEdgeExampleMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SkipEdgeExampleMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SkipEdgeExample, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SkipEdgeExampleMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SkipEdgeExampleMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SkipEdgeExample).
func (m *SkipEdgeExampleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SkipEdgeExampleMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SkipEdgeExampleMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SkipEdgeExampleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown SkipEdgeExample field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SkipEdgeExampleMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown SkipEdgeExample field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SkipEdgeExampleMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SkipEdgeExampleMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SkipEdgeExampleMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown SkipEdgeExample numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SkipEdgeExampleMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SkipEdgeExampleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SkipEdgeExampleMutation) ClearField(name string) error {
	return fmt.Errorf("unknown SkipEdgeExample nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SkipEdgeExampleMutation) ResetField(name string) error {
	return fmt.Errorf("unknown SkipEdgeExample field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SkipEdgeExampleMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, skipedgeexample.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SkipEdgeExampleMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case skipedgeexample.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SkipEdgeExampleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SkipEdgeExampleMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SkipEdgeExampleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, skipedgeexample.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SkipEdgeExampleMutation) EdgeCleared(name string) bool {
	switch name {
	case skipedgeexample.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SkipEdgeExampleMutation) ClearEdge(name string) error {
	switch name {
	case skipedgeexample.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown SkipEdgeExample unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SkipEdgeExampleMutation) ResetEdge(name string) error {
	switch name {
	case skipedgeexample.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown SkipEdgeExample edge %s", name)
}

// TwoMethodServiceMutation represents an operation that mutates the TwoMethodService nodes in the graph.
type TwoMethodServiceMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*TwoMethodService, error)
	predicates    []predicate.TwoMethodService
}

var _ ent.Mutation = (*TwoMethodServiceMutation)(nil)

// twomethodserviceOption allows management of the mutation configuration using functional options.
type twomethodserviceOption func(*TwoMethodServiceMutation)

// newTwoMethodServiceMutation creates new mutation for the TwoMethodService entity.
func newTwoMethodServiceMutation(c config, op Op, opts ...twomethodserviceOption) *TwoMethodServiceMutation {
	m := &TwoMethodServiceMutation{
		config:        c,
		op:            op,
		typ:           TypeTwoMethodService,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTwoMethodServiceID sets the ID field of the mutation.
func withTwoMethodServiceID(id int) twomethodserviceOption {
	return func(m *TwoMethodServiceMutation) {
		var (
			err   error
			once  sync.Once
			value *TwoMethodService
		)
		m.oldValue = func(ctx context.Context) (*TwoMethodService, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TwoMethodService.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTwoMethodService sets the old TwoMethodService of the mutation.
func withTwoMethodService(node *TwoMethodService) twomethodserviceOption {
	return func(m *TwoMethodServiceMutation) {
		m.oldValue = func(context.Context) (*TwoMethodService, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TwoMethodServiceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TwoMethodServiceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TwoMethodServiceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TwoMethodServiceMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TwoMethodService.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// Where appends a list predicates to the TwoMethodServiceMutation builder.
func (m *TwoMethodServiceMutation) Where(ps ...predicate.TwoMethodService) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TwoMethodServiceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TwoMethodServiceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.TwoMethodService, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TwoMethodServiceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TwoMethodServiceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (TwoMethodService).
func (m *TwoMethodServiceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TwoMethodServiceMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TwoMethodServiceMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TwoMethodServiceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown TwoMethodService field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TwoMethodServiceMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown TwoMethodService field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TwoMethodServiceMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TwoMethodServiceMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TwoMethodServiceMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown TwoMethodService numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TwoMethodServiceMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TwoMethodServiceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TwoMethodServiceMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TwoMethodService nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TwoMethodServiceMutation) ResetField(name string) error {
	return fmt.Errorf("unknown TwoMethodService field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TwoMethodServiceMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TwoMethodServiceMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TwoMethodServiceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TwoMethodServiceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TwoMethodServiceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TwoMethodServiceMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TwoMethodServiceMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown TwoMethodService unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TwoMethodServiceMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown TwoMethodService edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	user_name          *string
	status             *user.Status
	unnecessary        *string
	clearedFields      map[string]struct{}
	blog_posts         map[int]struct{}
	removedblog_posts  map[int]struct{}
	clearedblog_posts  bool
	profile_pic        *uuid.UUID
	clearedprofile_pic bool
	skip_edge          *int
	clearedskip_edge   bool
	done               bool
	oldValue           func(context.Context) (*User, error)
	predicates         []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserName sets the "user_name" field.
func (m *UserMutation) SetUserName(s string) {
	m.user_name = &s
}

// UserName returns the value of the "user_name" field in the mutation.
func (m *UserMutation) UserName() (r string, exists bool) {
	v := m.user_name
	if v == nil {
		return
	}
	return *v, true
}

// OldUserName returns the old "user_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUserName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserName: %w", err)
	}
	return oldValue.UserName, nil
}

// ResetUserName resets all changes to the "user_name" field.
func (m *UserMutation) ResetUserName() {
	m.user_name = nil
}

// SetStatus sets the "status" field.
func (m *UserMutation) SetStatus(u user.Status) {
	m.status = &u
}

// Status returns the value of the "status" field in the mutation.
func (m *UserMutation) Status() (r user.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldStatus(ctx context.Context) (v user.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *UserMutation) ResetStatus() {
	m.status = nil
}

// SetUnnecessary sets the "unnecessary" field.
func (m *UserMutation) SetUnnecessary(s string) {
	m.unnecessary = &s
}

// Unnecessary returns the value of the "unnecessary" field in the mutation.
func (m *UserMutation) Unnecessary() (r string, exists bool) {
	v := m.unnecessary
	if v == nil {
		return
	}
	return *v, true
}

// OldUnnecessary returns the old "unnecessary" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUnnecessary(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUnnecessary is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUnnecessary requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUnnecessary: %w", err)
	}
	return oldValue.Unnecessary, nil
}

// ClearUnnecessary clears the value of the "unnecessary" field.
func (m *UserMutation) ClearUnnecessary() {
	m.unnecessary = nil
	m.clearedFields[user.FieldUnnecessary] = struct{}{}
}

// UnnecessaryCleared returns if the "unnecessary" field was cleared in this mutation.
func (m *UserMutation) UnnecessaryCleared() bool {
	_, ok := m.clearedFields[user.FieldUnnecessary]
	return ok
}

// ResetUnnecessary resets all changes to the "unnecessary" field.
func (m *UserMutation) ResetUnnecessary() {
	m.unnecessary = nil
	delete(m.clearedFields, user.FieldUnnecessary)
}

// AddBlogPostIDs adds the "blog_posts" edge to the BlogPost entity by ids.
func (m *UserMutation) AddBlogPostIDs(ids ...int) {
	if m.blog_posts == nil {
		m.blog_posts = make(map[int]struct{})
	}
	for i := range ids {
		m.blog_posts[ids[i]] = struct{}{}
	}
}

// ClearBlogPosts clears the "blog_posts" edge to the BlogPost entity.
func (m *UserMutation) ClearBlogPosts() {
	m.clearedblog_posts = true
}

// BlogPostsCleared reports if the "blog_posts" edge to the BlogPost entity was cleared.
func (m *UserMutation) BlogPostsCleared() bool {
	return m.clearedblog_posts
}

// RemoveBlogPostIDs removes the "blog_posts" edge to the BlogPost entity by IDs.
func (m *UserMutation) RemoveBlogPostIDs(ids ...int) {
	if m.removedblog_posts == nil {
		m.removedblog_posts = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.blog_posts, ids[i])
		m.removedblog_posts[ids[i]] = struct{}{}
	}
}

// RemovedBlogPosts returns the removed IDs of the "blog_posts" edge to the BlogPost entity.
func (m *UserMutation) RemovedBlogPostsIDs() (ids []int) {
	for id := range m.removedblog_posts {
		ids = append(ids, id)
	}
	return
}

// BlogPostsIDs returns the "blog_posts" edge IDs in the mutation.
func (m *UserMutation) BlogPostsIDs() (ids []int) {
	for id := range m.blog_posts {
		ids = append(ids, id)
	}
	return
}

// ResetBlogPosts resets all changes to the "blog_posts" edge.
func (m *UserMutation) ResetBlogPosts() {
	m.blog_posts = nil
	m.clearedblog_posts = false
	m.removedblog_posts = nil
}

// SetProfilePicID sets the "profile_pic" edge to the Image entity by id.
func (m *UserMutation) SetProfilePicID(id uuid.UUID) {
	m.profile_pic = &id
}

// ClearProfilePic clears the "profile_pic" edge to the Image entity.
func (m *UserMutation) ClearProfilePic() {
	m.clearedprofile_pic = true
}

// ProfilePicCleared reports if the "profile_pic" edge to the Image entity was cleared.
func (m *UserMutation) ProfilePicCleared() bool {
	return m.clearedprofile_pic
}

// ProfilePicID returns the "profile_pic" edge ID in the mutation.
func (m *UserMutation) ProfilePicID() (id uuid.UUID, exists bool) {
	if m.profile_pic != nil {
		return *m.profile_pic, true
	}
	return
}

// ProfilePicIDs returns the "profile_pic" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProfilePicID instead. It exists only for internal usage by the builders.
func (m *UserMutation) ProfilePicIDs() (ids []uuid.UUID) {
	if id := m.profile_pic; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProfilePic resets all changes to the "profile_pic" edge.
func (m *UserMutation) ResetProfilePic() {
	m.profile_pic = nil
	m.clearedprofile_pic = false
}

// SetSkipEdgeID sets the "skip_edge" edge to the SkipEdgeExample entity by id.
func (m *UserMutation) SetSkipEdgeID(id int) {
	m.skip_edge = &id
}

// ClearSkipEdge clears the "skip_edge" edge to the SkipEdgeExample entity.
func (m *UserMutation) ClearSkipEdge() {
	m.clearedskip_edge = true
}

// SkipEdgeCleared reports if the "skip_edge" edge to the SkipEdgeExample entity was cleared.
func (m *UserMutation) SkipEdgeCleared() bool {
	return m.clearedskip_edge
}

// SkipEdgeID returns the "skip_edge" edge ID in the mutation.
func (m *UserMutation) SkipEdgeID() (id int, exists bool) {
	if m.skip_edge != nil {
		return *m.skip_edge, true
	}
	return
}

// SkipEdgeIDs returns the "skip_edge" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SkipEdgeID instead. It exists only for internal usage by the builders.
func (m *UserMutation) SkipEdgeIDs() (ids []int) {
	if id := m.skip_edge; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSkipEdge resets all changes to the "skip_edge" edge.
func (m *UserMutation) ResetSkipEdge() {
	m.skip_edge = nil
	m.clearedskip_edge = false
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.user_name != nil {
		fields = append(fields, user.FieldUserName)
	}
	if m.status != nil {
		fields = append(fields, user.FieldStatus)
	}
	if m.unnecessary != nil {
		fields = append(fields, user.FieldUnnecessary)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUserName:
		return m.UserName()
	case user.FieldStatus:
		return m.Status()
	case user.FieldUnnecessary:
		return m.Unnecessary()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUserName:
		return m.OldUserName(ctx)
	case user.FieldStatus:
		return m.OldStatus(ctx)
	case user.FieldUnnecessary:
		return m.OldUnnecessary(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUserName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserName(v)
		return nil
	case user.FieldStatus:
		v, ok := value.(user.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case user.FieldUnnecessary:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUnnecessary(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldUnnecessary) {
		fields = append(fields, user.FieldUnnecessary)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldUnnecessary:
		m.ClearUnnecessary()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUserName:
		m.ResetUserName()
		return nil
	case user.FieldStatus:
		m.ResetStatus()
		return nil
	case user.FieldUnnecessary:
		m.ResetUnnecessary()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.blog_posts != nil {
		edges = append(edges, user.EdgeBlogPosts)
	}
	if m.profile_pic != nil {
		edges = append(edges, user.EdgeProfilePic)
	}
	if m.skip_edge != nil {
		edges = append(edges, user.EdgeSkipEdge)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeBlogPosts:
		ids := make([]ent.Value, 0, len(m.blog_posts))
		for id := range m.blog_posts {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeProfilePic:
		if id := m.profile_pic; id != nil {
			return []ent.Value{*id}
		}
	case user.EdgeSkipEdge:
		if id := m.skip_edge; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedblog_posts != nil {
		edges = append(edges, user.EdgeBlogPosts)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeBlogPosts:
		ids := make([]ent.Value, 0, len(m.removedblog_posts))
		for id := range m.removedblog_posts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedblog_posts {
		edges = append(edges, user.EdgeBlogPosts)
	}
	if m.clearedprofile_pic {
		edges = append(edges, user.EdgeProfilePic)
	}
	if m.clearedskip_edge {
		edges = append(edges, user.EdgeSkipEdge)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeBlogPosts:
		return m.clearedblog_posts
	case user.EdgeProfilePic:
		return m.clearedprofile_pic
	case user.EdgeSkipEdge:
		return m.clearedskip_edge
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	case user.EdgeProfilePic:
		m.ClearProfilePic()
		return nil
	case user.EdgeSkipEdge:
		m.ClearSkipEdge()
		return nil
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeBlogPosts:
		m.ResetBlogPosts()
		return nil
	case user.EdgeProfilePic:
		m.ResetProfilePic()
		return nil
	case user.EdgeSkipEdge:
		m.ResetSkipEdge()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}

// ValidMessageMutation represents an operation that mutates the ValidMessage nodes in the graph.
type ValidMessageMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	ts            *time.Time
	uuid          *uuid.UUID
	u8            *uint8
	addu8         *int8
	opti8         *int8
	addopti8      *int8
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*ValidMessage, error)
	predicates    []predicate.ValidMessage
}

var _ ent.Mutation = (*ValidMessageMutation)(nil)

// validmessageOption allows management of the mutation configuration using functional options.
type validmessageOption func(*ValidMessageMutation)

// newValidMessageMutation creates new mutation for the ValidMessage entity.
func newValidMessageMutation(c config, op Op, opts ...validmessageOption) *ValidMessageMutation {
	m := &ValidMessageMutation{
		config:        c,
		op:            op,
		typ:           TypeValidMessage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withValidMessageID sets the ID field of the mutation.
func withValidMessageID(id int) validmessageOption {
	return func(m *ValidMessageMutation) {
		var (
			err   error
			once  sync.Once
			value *ValidMessage
		)
		m.oldValue = func(ctx context.Context) (*ValidMessage, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ValidMessage.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withValidMessage sets the old ValidMessage of the mutation.
func withValidMessage(node *ValidMessage) validmessageOption {
	return func(m *ValidMessageMutation) {
		m.oldValue = func(context.Context) (*ValidMessage, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ValidMessageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ValidMessageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ValidMessageMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ValidMessageMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ValidMessage.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ValidMessageMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ValidMessageMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the ValidMessage entity.
// If the ValidMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ValidMessageMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ValidMessageMutation) ResetName() {
	m.name = nil
}

// SetTs sets the "ts" field.
func (m *ValidMessageMutation) SetTs(t time.Time) {
	m.ts = &t
}

// Ts returns the value of the "ts" field in the mutation.
func (m *ValidMessageMutation) Ts() (r time.Time, exists bool) {
	v := m.ts
	if v == nil {
		return
	}
	return *v, true
}

// OldTs returns the old "ts" field's value of the ValidMessage entity.
// If the ValidMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ValidMessageMutation) OldTs(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTs is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTs requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTs: %w", err)
	}
	return oldValue.Ts, nil
}

// ResetTs resets all changes to the "ts" field.
func (m *ValidMessageMutation) ResetTs() {
	m.ts = nil
}

// SetUUID sets the "uuid" field.
func (m *ValidMessageMutation) SetUUID(u uuid.UUID) {
	m.uuid = &u
}

// UUID returns the value of the "uuid" field in the mutation.
func (m *ValidMessageMutation) UUID() (r uuid.UUID, exists bool) {
	v := m.uuid
	if v == nil {
		return
	}
	return *v, true
}

// OldUUID returns the old "uuid" field's value of the ValidMessage entity.
// If the ValidMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ValidMessageMutation) OldUUID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUUID: %w", err)
	}
	return oldValue.UUID, nil
}

// ResetUUID resets all changes to the "uuid" field.
func (m *ValidMessageMutation) ResetUUID() {
	m.uuid = nil
}

// SetU8 sets the "u8" field.
func (m *ValidMessageMutation) SetU8(u uint8) {
	m.u8 = &u
	m.addu8 = nil
}

// U8 returns the value of the "u8" field in the mutation.
func (m *ValidMessageMutation) U8() (r uint8, exists bool) {
	v := m.u8
	if v == nil {
		return
	}
	return *v, true
}

// OldU8 returns the old "u8" field's value of the ValidMessage entity.
// If the ValidMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ValidMessageMutation) OldU8(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldU8 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldU8 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldU8: %w", err)
	}
	return oldValue.U8, nil
}

// AddU8 adds u to the "u8" field.
func (m *ValidMessageMutation) AddU8(u int8) {
	if m.addu8 != nil {
		*m.addu8 += u
	} else {
		m.addu8 = &u
	}
}

// AddedU8 returns the value that was added to the "u8" field in this mutation.
func (m *ValidMessageMutation) AddedU8() (r int8, exists bool) {
	v := m.addu8
	if v == nil {
		return
	}
	return *v, true
}

// ResetU8 resets all changes to the "u8" field.
func (m *ValidMessageMutation) ResetU8() {
	m.u8 = nil
	m.addu8 = nil
}

// SetOpti8 sets the "opti8" field.
func (m *ValidMessageMutation) SetOpti8(i int8) {
	m.opti8 = &i
	m.addopti8 = nil
}

// Opti8 returns the value of the "opti8" field in the mutation.
func (m *ValidMessageMutation) Opti8() (r int8, exists bool) {
	v := m.opti8
	if v == nil {
		return
	}
	return *v, true
}

// OldOpti8 returns the old "opti8" field's value of the ValidMessage entity.
// If the ValidMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ValidMessageMutation) OldOpti8(ctx context.Context) (v *int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOpti8 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOpti8 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOpti8: %w", err)
	}
	return oldValue.Opti8, nil
}

// AddOpti8 adds i to the "opti8" field.
func (m *ValidMessageMutation) AddOpti8(i int8) {
	if m.addopti8 != nil {
		*m.addopti8 += i
	} else {
		m.addopti8 = &i
	}
}

// AddedOpti8 returns the value that was added to the "opti8" field in this mutation.
func (m *ValidMessageMutation) AddedOpti8() (r int8, exists bool) {
	v := m.addopti8
	if v == nil {
		return
	}
	return *v, true
}

// ClearOpti8 clears the value of the "opti8" field.
func (m *ValidMessageMutation) ClearOpti8() {
	m.opti8 = nil
	m.addopti8 = nil
	m.clearedFields[validmessage.FieldOpti8] = struct{}{}
}

// Opti8Cleared returns if the "opti8" field was cleared in this mutation.
func (m *ValidMessageMutation) Opti8Cleared() bool {
	_, ok := m.clearedFields[validmessage.FieldOpti8]
	return ok
}

// ResetOpti8 resets all changes to the "opti8" field.
func (m *ValidMessageMutation) ResetOpti8() {
	m.opti8 = nil
	m.addopti8 = nil
	delete(m.clearedFields, validmessage.FieldOpti8)
}

// Where appends a list predicates to the ValidMessageMutation builder.
func (m *ValidMessageMutation) Where(ps ...predicate.ValidMessage) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ValidMessageMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ValidMessageMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ValidMessage, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ValidMessageMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ValidMessageMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ValidMessage).
func (m *ValidMessageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ValidMessageMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.name != nil {
		fields = append(fields, validmessage.FieldName)
	}
	if m.ts != nil {
		fields = append(fields, validmessage.FieldTs)
	}
	if m.uuid != nil {
		fields = append(fields, validmessage.FieldUUID)
	}
	if m.u8 != nil {
		fields = append(fields, validmessage.FieldU8)
	}
	if m.opti8 != nil {
		fields = append(fields, validmessage.FieldOpti8)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ValidMessageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case validmessage.FieldName:
		return m.Name()
	case validmessage.FieldTs:
		return m.Ts()
	case validmessage.FieldUUID:
		return m.UUID()
	case validmessage.FieldU8:
		return m.U8()
	case validmessage.FieldOpti8:
		return m.Opti8()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ValidMessageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case validmessage.FieldName:
		return m.OldName(ctx)
	case validmessage.FieldTs:
		return m.OldTs(ctx)
	case validmessage.FieldUUID:
		return m.OldUUID(ctx)
	case validmessage.FieldU8:
		return m.OldU8(ctx)
	case validmessage.FieldOpti8:
		return m.OldOpti8(ctx)
	}
	return nil, fmt.Errorf("unknown ValidMessage field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ValidMessageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case validmessage.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case validmessage.FieldTs:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTs(v)
		return nil
	case validmessage.FieldUUID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUUID(v)
		return nil
	case validmessage.FieldU8:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetU8(v)
		return nil
	case validmessage.FieldOpti8:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOpti8(v)
		return nil
	}
	return fmt.Errorf("unknown ValidMessage field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ValidMessageMutation) AddedFields() []string {
	var fields []string
	if m.addu8 != nil {
		fields = append(fields, validmessage.FieldU8)
	}
	if m.addopti8 != nil {
		fields = append(fields, validmessage.FieldOpti8)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ValidMessageMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case validmessage.FieldU8:
		return m.AddedU8()
	case validmessage.FieldOpti8:
		return m.AddedOpti8()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ValidMessageMutation) AddField(name string, value ent.Value) error {
	switch name {
	case validmessage.FieldU8:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddU8(v)
		return nil
	case validmessage.FieldOpti8:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOpti8(v)
		return nil
	}
	return fmt.Errorf("unknown ValidMessage numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ValidMessageMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(validmessage.FieldOpti8) {
		fields = append(fields, validmessage.FieldOpti8)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ValidMessageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ValidMessageMutation) ClearField(name string) error {
	switch name {
	case validmessage.FieldOpti8:
		m.ClearOpti8()
		return nil
	}
	return fmt.Errorf("unknown ValidMessage nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ValidMessageMutation) ResetField(name string) error {
	switch name {
	case validmessage.FieldName:
		m.ResetName()
		return nil
	case validmessage.FieldTs:
		m.ResetTs()
		return nil
	case validmessage.FieldUUID:
		m.ResetUUID()
		return nil
	case validmessage.FieldU8:
		m.ResetU8()
		return nil
	case validmessage.FieldOpti8:
		m.ResetOpti8()
		return nil
	}
	return fmt.Errorf("unknown ValidMessage field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ValidMessageMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ValidMessageMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ValidMessageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ValidMessageMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ValidMessageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ValidMessageMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ValidMessageMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ValidMessage unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ValidMessageMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ValidMessage edge %s", name)
}
