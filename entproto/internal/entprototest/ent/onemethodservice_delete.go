// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/contrib/entproto/internal/entprototest/ent/onemethodservice"
	"entgo.io/contrib/entproto/internal/entprototest/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OneMethodServiceDelete is the builder for deleting a OneMethodService entity.
type OneMethodServiceDelete struct {
	config
	hooks    []Hook
	mutation *OneMethodServiceMutation
}

// Where appends a list predicates to the OneMethodServiceDelete builder.
func (omsd *OneMethodServiceDelete) Where(ps ...predicate.OneMethodService) *OneMethodServiceDelete {
	omsd.mutation.Where(ps...)
	return omsd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (omsd *OneMethodServiceDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, omsd.sqlExec, omsd.mutation, omsd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (omsd *OneMethodServiceDelete) ExecX(ctx context.Context) int {
	n, err := omsd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (omsd *OneMethodServiceDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(onemethodservice.Table, sqlgraph.NewFieldSpec(onemethodservice.FieldID, field.TypeInt))
	if ps := omsd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, omsd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	omsd.mutation.done = true
	return affected, err
}

// OneMethodServiceDeleteOne is the builder for deleting a single OneMethodService entity.
type OneMethodServiceDeleteOne struct {
	omsd *OneMethodServiceDelete
}

// Where appends a list predicates to the OneMethodServiceDelete builder.
func (omsdo *OneMethodServiceDeleteOne) Where(ps ...predicate.OneMethodService) *OneMethodServiceDeleteOne {
	omsdo.omsd.mutation.Where(ps...)
	return omsdo
}

// Exec executes the deletion query.
func (omsdo *OneMethodServiceDeleteOne) Exec(ctx context.Context) error {
	n, err := omsdo.omsd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{onemethodservice.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (omsdo *OneMethodServiceDeleteOne) ExecX(ctx context.Context) {
	if err := omsdo.Exec(ctx); err != nil {
		panic(err)
	}
}
