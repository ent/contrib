// Code generated by ent, DO NOT EDIT.

package enumwithconflictingvalue

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the enumwithconflictingvalue type in the database.
	Label = "enum_with_conflicting_value"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEnum holds the string denoting the enum field in the database.
	FieldEnum = "enum"
	// Table holds the table name of the enumwithconflictingvalue in the database.
	Table = "enum_with_conflicting_values"
)

// Columns holds all SQL columns for enumwithconflictingvalue fields.
var Columns = []string{
	FieldID,
	FieldEnum,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Enum defines the type for the "enum" enum field.
type Enum string

// Enum values.
const (
	EnumJpeg    Enum = "image/jpeg"
	EnumJpegAlt Enum = "IMAGE_JPEG"
)

func (e Enum) String() string {
	return string(e)
}

// EnumValidator is a validator for the "enum" field enum values. It is called by the builders before save.
func EnumValidator(e Enum) error {
	switch e {
	case EnumJpeg, EnumJpegAlt:
		return nil
	default:
		return fmt.Errorf("enumwithconflictingvalue: invalid enum value for enum field: %q", e)
	}
}

// OrderOption defines the ordering options for the EnumWithConflictingValue queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEnum orders the results by the enum field.
func ByEnum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnum, opts...).ToFunc()
}
