// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/contrib/entproto/internal/todo/ent/attachment"
	"entgo.io/contrib/entproto/internal/todo/ent/group"
	"entgo.io/contrib/entproto/internal/todo/ent/pet"
	"entgo.io/contrib/entproto/internal/todo/ent/predicate"
	"entgo.io/contrib/entproto/internal/todo/ent/schema"
	"entgo.io/contrib/entproto/internal/todo/ent/skipedgeexample"
	"entgo.io/contrib/entproto/internal/todo/ent/user"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetUserName sets the "user_name" field.
func (uu *UserUpdate) SetUserName(s string) *UserUpdate {
	uu.mutation.SetUserName(s)
	return uu
}

// SetNillableUserName sets the "user_name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUserName(s *string) *UserUpdate {
	if s != nil {
		uu.SetUserName(*s)
	}
	return uu
}

// SetPoints sets the "points" field.
func (uu *UserUpdate) SetPoints(u uint) *UserUpdate {
	uu.mutation.ResetPoints()
	uu.mutation.SetPoints(u)
	return uu
}

// SetNillablePoints sets the "points" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePoints(u *uint) *UserUpdate {
	if u != nil {
		uu.SetPoints(*u)
	}
	return uu
}

// AddPoints adds u to the "points" field.
func (uu *UserUpdate) AddPoints(u int) *UserUpdate {
	uu.mutation.AddPoints(u)
	return uu
}

// SetExp sets the "exp" field.
func (uu *UserUpdate) SetExp(u uint64) *UserUpdate {
	uu.mutation.ResetExp()
	uu.mutation.SetExp(u)
	return uu
}

// SetNillableExp sets the "exp" field if the given value is not nil.
func (uu *UserUpdate) SetNillableExp(u *uint64) *UserUpdate {
	if u != nil {
		uu.SetExp(*u)
	}
	return uu
}

// AddExp adds u to the "exp" field.
func (uu *UserUpdate) AddExp(u int64) *UserUpdate {
	uu.mutation.AddExp(u)
	return uu
}

// SetStatus sets the "status" field.
func (uu *UserUpdate) SetStatus(u user.Status) *UserUpdate {
	uu.mutation.SetStatus(u)
	return uu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (uu *UserUpdate) SetNillableStatus(u *user.Status) *UserUpdate {
	if u != nil {
		uu.SetStatus(*u)
	}
	return uu
}

// SetExternalID sets the "external_id" field.
func (uu *UserUpdate) SetExternalID(i int) *UserUpdate {
	uu.mutation.ResetExternalID()
	uu.mutation.SetExternalID(i)
	return uu
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableExternalID(i *int) *UserUpdate {
	if i != nil {
		uu.SetExternalID(*i)
	}
	return uu
}

// AddExternalID adds i to the "external_id" field.
func (uu *UserUpdate) AddExternalID(i int) *UserUpdate {
	uu.mutation.AddExternalID(i)
	return uu
}

// SetCrmID sets the "crm_id" field.
func (uu *UserUpdate) SetCrmID(u uuid.UUID) *UserUpdate {
	uu.mutation.SetCrmID(u)
	return uu
}

// SetNillableCrmID sets the "crm_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCrmID(u *uuid.UUID) *UserUpdate {
	if u != nil {
		uu.SetCrmID(*u)
	}
	return uu
}

// SetBanned sets the "banned" field.
func (uu *UserUpdate) SetBanned(b bool) *UserUpdate {
	uu.mutation.SetBanned(b)
	return uu
}

// SetNillableBanned sets the "banned" field if the given value is not nil.
func (uu *UserUpdate) SetNillableBanned(b *bool) *UserUpdate {
	if b != nil {
		uu.SetBanned(*b)
	}
	return uu
}

// SetCustomPb sets the "custom_pb" field.
func (uu *UserUpdate) SetCustomPb(u uint8) *UserUpdate {
	uu.mutation.ResetCustomPb()
	uu.mutation.SetCustomPb(u)
	return uu
}

// SetNillableCustomPb sets the "custom_pb" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCustomPb(u *uint8) *UserUpdate {
	if u != nil {
		uu.SetCustomPb(*u)
	}
	return uu
}

// AddCustomPb adds u to the "custom_pb" field.
func (uu *UserUpdate) AddCustomPb(u int8) *UserUpdate {
	uu.mutation.AddCustomPb(u)
	return uu
}

// SetOptNum sets the "opt_num" field.
func (uu *UserUpdate) SetOptNum(i int) *UserUpdate {
	uu.mutation.ResetOptNum()
	uu.mutation.SetOptNum(i)
	return uu
}

// SetNillableOptNum sets the "opt_num" field if the given value is not nil.
func (uu *UserUpdate) SetNillableOptNum(i *int) *UserUpdate {
	if i != nil {
		uu.SetOptNum(*i)
	}
	return uu
}

// AddOptNum adds i to the "opt_num" field.
func (uu *UserUpdate) AddOptNum(i int) *UserUpdate {
	uu.mutation.AddOptNum(i)
	return uu
}

// ClearOptNum clears the value of the "opt_num" field.
func (uu *UserUpdate) ClearOptNum() *UserUpdate {
	uu.mutation.ClearOptNum()
	return uu
}

// SetOptStr sets the "opt_str" field.
func (uu *UserUpdate) SetOptStr(s string) *UserUpdate {
	uu.mutation.SetOptStr(s)
	return uu
}

// SetNillableOptStr sets the "opt_str" field if the given value is not nil.
func (uu *UserUpdate) SetNillableOptStr(s *string) *UserUpdate {
	if s != nil {
		uu.SetOptStr(*s)
	}
	return uu
}

// ClearOptStr clears the value of the "opt_str" field.
func (uu *UserUpdate) ClearOptStr() *UserUpdate {
	uu.mutation.ClearOptStr()
	return uu
}

// SetOptBool sets the "opt_bool" field.
func (uu *UserUpdate) SetOptBool(b bool) *UserUpdate {
	uu.mutation.SetOptBool(b)
	return uu
}

// SetNillableOptBool sets the "opt_bool" field if the given value is not nil.
func (uu *UserUpdate) SetNillableOptBool(b *bool) *UserUpdate {
	if b != nil {
		uu.SetOptBool(*b)
	}
	return uu
}

// ClearOptBool clears the value of the "opt_bool" field.
func (uu *UserUpdate) ClearOptBool() *UserUpdate {
	uu.mutation.ClearOptBool()
	return uu
}

// SetBigInt sets the "big_int" field.
func (uu *UserUpdate) SetBigInt(si schema.BigInt) *UserUpdate {
	uu.mutation.SetBigInt(si)
	return uu
}

// SetNillableBigInt sets the "big_int" field if the given value is not nil.
func (uu *UserUpdate) SetNillableBigInt(si *schema.BigInt) *UserUpdate {
	if si != nil {
		uu.SetBigInt(*si)
	}
	return uu
}

// ClearBigInt clears the value of the "big_int" field.
func (uu *UserUpdate) ClearBigInt() *UserUpdate {
	uu.mutation.ClearBigInt()
	return uu
}

// SetBUser1 sets the "b_user_1" field.
func (uu *UserUpdate) SetBUser1(i int) *UserUpdate {
	uu.mutation.ResetBUser1()
	uu.mutation.SetBUser1(i)
	return uu
}

// SetNillableBUser1 sets the "b_user_1" field if the given value is not nil.
func (uu *UserUpdate) SetNillableBUser1(i *int) *UserUpdate {
	if i != nil {
		uu.SetBUser1(*i)
	}
	return uu
}

// AddBUser1 adds i to the "b_user_1" field.
func (uu *UserUpdate) AddBUser1(i int) *UserUpdate {
	uu.mutation.AddBUser1(i)
	return uu
}

// ClearBUser1 clears the value of the "b_user_1" field.
func (uu *UserUpdate) ClearBUser1() *UserUpdate {
	uu.mutation.ClearBUser1()
	return uu
}

// SetHeightInCm sets the "height_in_cm" field.
func (uu *UserUpdate) SetHeightInCm(f float32) *UserUpdate {
	uu.mutation.ResetHeightInCm()
	uu.mutation.SetHeightInCm(f)
	return uu
}

// SetNillableHeightInCm sets the "height_in_cm" field if the given value is not nil.
func (uu *UserUpdate) SetNillableHeightInCm(f *float32) *UserUpdate {
	if f != nil {
		uu.SetHeightInCm(*f)
	}
	return uu
}

// AddHeightInCm adds f to the "height_in_cm" field.
func (uu *UserUpdate) AddHeightInCm(f float32) *UserUpdate {
	uu.mutation.AddHeightInCm(f)
	return uu
}

// SetAccountBalance sets the "account_balance" field.
func (uu *UserUpdate) SetAccountBalance(f float64) *UserUpdate {
	uu.mutation.ResetAccountBalance()
	uu.mutation.SetAccountBalance(f)
	return uu
}

// SetNillableAccountBalance sets the "account_balance" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAccountBalance(f *float64) *UserUpdate {
	if f != nil {
		uu.SetAccountBalance(*f)
	}
	return uu
}

// AddAccountBalance adds f to the "account_balance" field.
func (uu *UserUpdate) AddAccountBalance(f float64) *UserUpdate {
	uu.mutation.AddAccountBalance(f)
	return uu
}

// SetUnnecessary sets the "unnecessary" field.
func (uu *UserUpdate) SetUnnecessary(s string) *UserUpdate {
	uu.mutation.SetUnnecessary(s)
	return uu
}

// SetNillableUnnecessary sets the "unnecessary" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUnnecessary(s *string) *UserUpdate {
	if s != nil {
		uu.SetUnnecessary(*s)
	}
	return uu
}

// ClearUnnecessary clears the value of the "unnecessary" field.
func (uu *UserUpdate) ClearUnnecessary() *UserUpdate {
	uu.mutation.ClearUnnecessary()
	return uu
}

// SetType sets the "type" field.
func (uu *UserUpdate) SetType(s string) *UserUpdate {
	uu.mutation.SetType(s)
	return uu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (uu *UserUpdate) SetNillableType(s *string) *UserUpdate {
	if s != nil {
		uu.SetType(*s)
	}
	return uu
}

// ClearType clears the value of the "type" field.
func (uu *UserUpdate) ClearType() *UserUpdate {
	uu.mutation.ClearType()
	return uu
}

// SetLabels sets the "labels" field.
func (uu *UserUpdate) SetLabels(s []string) *UserUpdate {
	uu.mutation.SetLabels(s)
	return uu
}

// AppendLabels appends s to the "labels" field.
func (uu *UserUpdate) AppendLabels(s []string) *UserUpdate {
	uu.mutation.AppendLabels(s)
	return uu
}

// ClearLabels clears the value of the "labels" field.
func (uu *UserUpdate) ClearLabels() *UserUpdate {
	uu.mutation.ClearLabels()
	return uu
}

// SetInt32s sets the "int32s" field.
func (uu *UserUpdate) SetInt32s(i []int32) *UserUpdate {
	uu.mutation.SetInt32s(i)
	return uu
}

// AppendInt32s appends i to the "int32s" field.
func (uu *UserUpdate) AppendInt32s(i []int32) *UserUpdate {
	uu.mutation.AppendInt32s(i)
	return uu
}

// ClearInt32s clears the value of the "int32s" field.
func (uu *UserUpdate) ClearInt32s() *UserUpdate {
	uu.mutation.ClearInt32s()
	return uu
}

// SetInt64s sets the "int64s" field.
func (uu *UserUpdate) SetInt64s(i []int64) *UserUpdate {
	uu.mutation.SetInt64s(i)
	return uu
}

// AppendInt64s appends i to the "int64s" field.
func (uu *UserUpdate) AppendInt64s(i []int64) *UserUpdate {
	uu.mutation.AppendInt64s(i)
	return uu
}

// ClearInt64s clears the value of the "int64s" field.
func (uu *UserUpdate) ClearInt64s() *UserUpdate {
	uu.mutation.ClearInt64s()
	return uu
}

// SetUint32s sets the "uint32s" field.
func (uu *UserUpdate) SetUint32s(u []uint32) *UserUpdate {
	uu.mutation.SetUint32s(u)
	return uu
}

// AppendUint32s appends u to the "uint32s" field.
func (uu *UserUpdate) AppendUint32s(u []uint32) *UserUpdate {
	uu.mutation.AppendUint32s(u)
	return uu
}

// ClearUint32s clears the value of the "uint32s" field.
func (uu *UserUpdate) ClearUint32s() *UserUpdate {
	uu.mutation.ClearUint32s()
	return uu
}

// SetUint64s sets the "uint64s" field.
func (uu *UserUpdate) SetUint64s(u []uint64) *UserUpdate {
	uu.mutation.SetUint64s(u)
	return uu
}

// AppendUint64s appends u to the "uint64s" field.
func (uu *UserUpdate) AppendUint64s(u []uint64) *UserUpdate {
	uu.mutation.AppendUint64s(u)
	return uu
}

// ClearUint64s clears the value of the "uint64s" field.
func (uu *UserUpdate) ClearUint64s() *UserUpdate {
	uu.mutation.ClearUint64s()
	return uu
}

// SetDeviceType sets the "device_type" field.
func (uu *UserUpdate) SetDeviceType(ut user.DeviceType) *UserUpdate {
	uu.mutation.SetDeviceType(ut)
	return uu
}

// SetNillableDeviceType sets the "device_type" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDeviceType(ut *user.DeviceType) *UserUpdate {
	if ut != nil {
		uu.SetDeviceType(*ut)
	}
	return uu
}

// SetOmitPrefix sets the "omit_prefix" field.
func (uu *UserUpdate) SetOmitPrefix(up user.OmitPrefix) *UserUpdate {
	uu.mutation.SetOmitPrefix(up)
	return uu
}

// SetNillableOmitPrefix sets the "omit_prefix" field if the given value is not nil.
func (uu *UserUpdate) SetNillableOmitPrefix(up *user.OmitPrefix) *UserUpdate {
	if up != nil {
		uu.SetOmitPrefix(*up)
	}
	return uu
}

// SetMimeType sets the "mime_type" field.
func (uu *UserUpdate) SetMimeType(ut user.MimeType) *UserUpdate {
	uu.mutation.SetMimeType(ut)
	return uu
}

// SetNillableMimeType sets the "mime_type" field if the given value is not nil.
func (uu *UserUpdate) SetNillableMimeType(ut *user.MimeType) *UserUpdate {
	if ut != nil {
		uu.SetMimeType(*ut)
	}
	return uu
}

// SetGroupID sets the "group" edge to the Group entity by ID.
func (uu *UserUpdate) SetGroupID(id int) *UserUpdate {
	uu.mutation.SetGroupID(id)
	return uu
}

// SetNillableGroupID sets the "group" edge to the Group entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableGroupID(id *int) *UserUpdate {
	if id != nil {
		uu = uu.SetGroupID(*id)
	}
	return uu
}

// SetGroup sets the "group" edge to the Group entity.
func (uu *UserUpdate) SetGroup(g *Group) *UserUpdate {
	return uu.SetGroupID(g.ID)
}

// SetAttachmentID sets the "attachment" edge to the Attachment entity by ID.
func (uu *UserUpdate) SetAttachmentID(id uuid.UUID) *UserUpdate {
	uu.mutation.SetAttachmentID(id)
	return uu
}

// SetNillableAttachmentID sets the "attachment" edge to the Attachment entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableAttachmentID(id *uuid.UUID) *UserUpdate {
	if id != nil {
		uu = uu.SetAttachmentID(*id)
	}
	return uu
}

// SetAttachment sets the "attachment" edge to the Attachment entity.
func (uu *UserUpdate) SetAttachment(a *Attachment) *UserUpdate {
	return uu.SetAttachmentID(a.ID)
}

// AddReceived1IDs adds the "received_1" edge to the Attachment entity by IDs.
func (uu *UserUpdate) AddReceived1IDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddReceived1IDs(ids...)
	return uu
}

// AddReceived1 adds the "received_1" edges to the Attachment entity.
func (uu *UserUpdate) AddReceived1(a ...*Attachment) *UserUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.AddReceived1IDs(ids...)
}

// SetPetID sets the "pet" edge to the Pet entity by ID.
func (uu *UserUpdate) SetPetID(id int) *UserUpdate {
	uu.mutation.SetPetID(id)
	return uu
}

// SetNillablePetID sets the "pet" edge to the Pet entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillablePetID(id *int) *UserUpdate {
	if id != nil {
		uu = uu.SetPetID(*id)
	}
	return uu
}

// SetPet sets the "pet" edge to the Pet entity.
func (uu *UserUpdate) SetPet(p *Pet) *UserUpdate {
	return uu.SetPetID(p.ID)
}

// SetSkipEdgeID sets the "skip_edge" edge to the SkipEdgeExample entity by ID.
func (uu *UserUpdate) SetSkipEdgeID(id int) *UserUpdate {
	uu.mutation.SetSkipEdgeID(id)
	return uu
}

// SetNillableSkipEdgeID sets the "skip_edge" edge to the SkipEdgeExample entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableSkipEdgeID(id *int) *UserUpdate {
	if id != nil {
		uu = uu.SetSkipEdgeID(*id)
	}
	return uu
}

// SetSkipEdge sets the "skip_edge" edge to the SkipEdgeExample entity.
func (uu *UserUpdate) SetSkipEdge(s *SkipEdgeExample) *UserUpdate {
	return uu.SetSkipEdgeID(s.ID)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearGroup clears the "group" edge to the Group entity.
func (uu *UserUpdate) ClearGroup() *UserUpdate {
	uu.mutation.ClearGroup()
	return uu
}

// ClearAttachment clears the "attachment" edge to the Attachment entity.
func (uu *UserUpdate) ClearAttachment() *UserUpdate {
	uu.mutation.ClearAttachment()
	return uu
}

// ClearReceived1 clears all "received_1" edges to the Attachment entity.
func (uu *UserUpdate) ClearReceived1() *UserUpdate {
	uu.mutation.ClearReceived1()
	return uu
}

// RemoveReceived1IDs removes the "received_1" edge to Attachment entities by IDs.
func (uu *UserUpdate) RemoveReceived1IDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveReceived1IDs(ids...)
	return uu
}

// RemoveReceived1 removes "received_1" edges to Attachment entities.
func (uu *UserUpdate) RemoveReceived1(a ...*Attachment) *UserUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.RemoveReceived1IDs(ids...)
}

// ClearPet clears the "pet" edge to the Pet entity.
func (uu *UserUpdate) ClearPet() *UserUpdate {
	uu.mutation.ClearPet()
	return uu
}

// ClearSkipEdge clears the "skip_edge" edge to the SkipEdgeExample entity.
func (uu *UserUpdate) ClearSkipEdge() *UserUpdate {
	uu.mutation.ClearSkipEdge()
	return uu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.Status(); ok {
		if err := user.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "User.status": %w`, err)}
		}
	}
	if v, ok := uu.mutation.DeviceType(); ok {
		if err := user.DeviceTypeValidator(v); err != nil {
			return &ValidationError{Name: "device_type", err: fmt.Errorf(`ent: validator failed for field "User.device_type": %w`, err)}
		}
	}
	if v, ok := uu.mutation.OmitPrefix(); ok {
		if err := user.OmitPrefixValidator(v); err != nil {
			return &ValidationError{Name: "omit_prefix", err: fmt.Errorf(`ent: validator failed for field "User.omit_prefix": %w`, err)}
		}
	}
	if v, ok := uu.mutation.MimeType(); ok {
		if err := user.MimeTypeValidator(v); err != nil {
			return &ValidationError{Name: "mime_type", err: fmt.Errorf(`ent: validator failed for field "User.mime_type": %w`, err)}
		}
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint32))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.UserName(); ok {
		_spec.SetField(user.FieldUserName, field.TypeString, value)
	}
	if value, ok := uu.mutation.Points(); ok {
		_spec.SetField(user.FieldPoints, field.TypeUint, value)
	}
	if value, ok := uu.mutation.AddedPoints(); ok {
		_spec.AddField(user.FieldPoints, field.TypeUint, value)
	}
	if value, ok := uu.mutation.Exp(); ok {
		_spec.SetField(user.FieldExp, field.TypeUint64, value)
	}
	if value, ok := uu.mutation.AddedExp(); ok {
		_spec.AddField(user.FieldExp, field.TypeUint64, value)
	}
	if value, ok := uu.mutation.Status(); ok {
		_spec.SetField(user.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := uu.mutation.ExternalID(); ok {
		_spec.SetField(user.FieldExternalID, field.TypeInt, value)
	}
	if value, ok := uu.mutation.AddedExternalID(); ok {
		_spec.AddField(user.FieldExternalID, field.TypeInt, value)
	}
	if value, ok := uu.mutation.CrmID(); ok {
		_spec.SetField(user.FieldCrmID, field.TypeUUID, value)
	}
	if value, ok := uu.mutation.Banned(); ok {
		_spec.SetField(user.FieldBanned, field.TypeBool, value)
	}
	if value, ok := uu.mutation.CustomPb(); ok {
		_spec.SetField(user.FieldCustomPb, field.TypeUint8, value)
	}
	if value, ok := uu.mutation.AddedCustomPb(); ok {
		_spec.AddField(user.FieldCustomPb, field.TypeUint8, value)
	}
	if value, ok := uu.mutation.OptNum(); ok {
		_spec.SetField(user.FieldOptNum, field.TypeInt, value)
	}
	if value, ok := uu.mutation.AddedOptNum(); ok {
		_spec.AddField(user.FieldOptNum, field.TypeInt, value)
	}
	if uu.mutation.OptNumCleared() {
		_spec.ClearField(user.FieldOptNum, field.TypeInt)
	}
	if value, ok := uu.mutation.OptStr(); ok {
		_spec.SetField(user.FieldOptStr, field.TypeString, value)
	}
	if uu.mutation.OptStrCleared() {
		_spec.ClearField(user.FieldOptStr, field.TypeString)
	}
	if value, ok := uu.mutation.OptBool(); ok {
		_spec.SetField(user.FieldOptBool, field.TypeBool, value)
	}
	if uu.mutation.OptBoolCleared() {
		_spec.ClearField(user.FieldOptBool, field.TypeBool)
	}
	if value, ok := uu.mutation.BigInt(); ok {
		_spec.SetField(user.FieldBigInt, field.TypeInt, value)
	}
	if uu.mutation.BigIntCleared() {
		_spec.ClearField(user.FieldBigInt, field.TypeInt)
	}
	if value, ok := uu.mutation.BUser1(); ok {
		_spec.SetField(user.FieldBUser1, field.TypeInt, value)
	}
	if value, ok := uu.mutation.AddedBUser1(); ok {
		_spec.AddField(user.FieldBUser1, field.TypeInt, value)
	}
	if uu.mutation.BUser1Cleared() {
		_spec.ClearField(user.FieldBUser1, field.TypeInt)
	}
	if value, ok := uu.mutation.HeightInCm(); ok {
		_spec.SetField(user.FieldHeightInCm, field.TypeFloat32, value)
	}
	if value, ok := uu.mutation.AddedHeightInCm(); ok {
		_spec.AddField(user.FieldHeightInCm, field.TypeFloat32, value)
	}
	if value, ok := uu.mutation.AccountBalance(); ok {
		_spec.SetField(user.FieldAccountBalance, field.TypeFloat64, value)
	}
	if value, ok := uu.mutation.AddedAccountBalance(); ok {
		_spec.AddField(user.FieldAccountBalance, field.TypeFloat64, value)
	}
	if value, ok := uu.mutation.Unnecessary(); ok {
		_spec.SetField(user.FieldUnnecessary, field.TypeString, value)
	}
	if uu.mutation.UnnecessaryCleared() {
		_spec.ClearField(user.FieldUnnecessary, field.TypeString)
	}
	if value, ok := uu.mutation.GetType(); ok {
		_spec.SetField(user.FieldType, field.TypeString, value)
	}
	if uu.mutation.TypeCleared() {
		_spec.ClearField(user.FieldType, field.TypeString)
	}
	if value, ok := uu.mutation.Labels(); ok {
		_spec.SetField(user.FieldLabels, field.TypeJSON, value)
	}
	if value, ok := uu.mutation.AppendedLabels(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, user.FieldLabels, value)
		})
	}
	if uu.mutation.LabelsCleared() {
		_spec.ClearField(user.FieldLabels, field.TypeJSON)
	}
	if value, ok := uu.mutation.Int32s(); ok {
		_spec.SetField(user.FieldInt32s, field.TypeJSON, value)
	}
	if value, ok := uu.mutation.AppendedInt32s(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, user.FieldInt32s, value)
		})
	}
	if uu.mutation.Int32sCleared() {
		_spec.ClearField(user.FieldInt32s, field.TypeJSON)
	}
	if value, ok := uu.mutation.Int64s(); ok {
		_spec.SetField(user.FieldInt64s, field.TypeJSON, value)
	}
	if value, ok := uu.mutation.AppendedInt64s(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, user.FieldInt64s, value)
		})
	}
	if uu.mutation.Int64sCleared() {
		_spec.ClearField(user.FieldInt64s, field.TypeJSON)
	}
	if value, ok := uu.mutation.Uint32s(); ok {
		_spec.SetField(user.FieldUint32s, field.TypeJSON, value)
	}
	if value, ok := uu.mutation.AppendedUint32s(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, user.FieldUint32s, value)
		})
	}
	if uu.mutation.Uint32sCleared() {
		_spec.ClearField(user.FieldUint32s, field.TypeJSON)
	}
	if value, ok := uu.mutation.Uint64s(); ok {
		_spec.SetField(user.FieldUint64s, field.TypeJSON, value)
	}
	if value, ok := uu.mutation.AppendedUint64s(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, user.FieldUint64s, value)
		})
	}
	if uu.mutation.Uint64sCleared() {
		_spec.ClearField(user.FieldUint64s, field.TypeJSON)
	}
	if value, ok := uu.mutation.DeviceType(); ok {
		_spec.SetField(user.FieldDeviceType, field.TypeEnum, value)
	}
	if value, ok := uu.mutation.OmitPrefix(); ok {
		_spec.SetField(user.FieldOmitPrefix, field.TypeEnum, value)
	}
	if value, ok := uu.mutation.MimeType(); ok {
		_spec.SetField(user.FieldMimeType, field.TypeEnum, value)
	}
	if uu.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.GroupTable,
			Columns: []string{user.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.GroupTable,
			Columns: []string{user.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.AttachmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.AttachmentTable,
			Columns: []string{user.AttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.AttachmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.AttachmentTable,
			Columns: []string{user.AttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.Received1Cleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.Received1Table,
			Columns: user.Received1PrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedReceived1IDs(); len(nodes) > 0 && !uu.mutation.Received1Cleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.Received1Table,
			Columns: user.Received1PrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.Received1IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.Received1Table,
			Columns: user.Received1PrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.PetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.PetTable,
			Columns: []string{user.PetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.PetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.PetTable,
			Columns: []string{user.PetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.SkipEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.SkipEdgeTable,
			Columns: []string{user.SkipEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skipedgeexample.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.SkipEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.SkipEdgeTable,
			Columns: []string{user.SkipEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skipedgeexample.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetUserName sets the "user_name" field.
func (uuo *UserUpdateOne) SetUserName(s string) *UserUpdateOne {
	uuo.mutation.SetUserName(s)
	return uuo
}

// SetNillableUserName sets the "user_name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUserName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetUserName(*s)
	}
	return uuo
}

// SetPoints sets the "points" field.
func (uuo *UserUpdateOne) SetPoints(u uint) *UserUpdateOne {
	uuo.mutation.ResetPoints()
	uuo.mutation.SetPoints(u)
	return uuo
}

// SetNillablePoints sets the "points" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePoints(u *uint) *UserUpdateOne {
	if u != nil {
		uuo.SetPoints(*u)
	}
	return uuo
}

// AddPoints adds u to the "points" field.
func (uuo *UserUpdateOne) AddPoints(u int) *UserUpdateOne {
	uuo.mutation.AddPoints(u)
	return uuo
}

// SetExp sets the "exp" field.
func (uuo *UserUpdateOne) SetExp(u uint64) *UserUpdateOne {
	uuo.mutation.ResetExp()
	uuo.mutation.SetExp(u)
	return uuo
}

// SetNillableExp sets the "exp" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableExp(u *uint64) *UserUpdateOne {
	if u != nil {
		uuo.SetExp(*u)
	}
	return uuo
}

// AddExp adds u to the "exp" field.
func (uuo *UserUpdateOne) AddExp(u int64) *UserUpdateOne {
	uuo.mutation.AddExp(u)
	return uuo
}

// SetStatus sets the "status" field.
func (uuo *UserUpdateOne) SetStatus(u user.Status) *UserUpdateOne {
	uuo.mutation.SetStatus(u)
	return uuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableStatus(u *user.Status) *UserUpdateOne {
	if u != nil {
		uuo.SetStatus(*u)
	}
	return uuo
}

// SetExternalID sets the "external_id" field.
func (uuo *UserUpdateOne) SetExternalID(i int) *UserUpdateOne {
	uuo.mutation.ResetExternalID()
	uuo.mutation.SetExternalID(i)
	return uuo
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableExternalID(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetExternalID(*i)
	}
	return uuo
}

// AddExternalID adds i to the "external_id" field.
func (uuo *UserUpdateOne) AddExternalID(i int) *UserUpdateOne {
	uuo.mutation.AddExternalID(i)
	return uuo
}

// SetCrmID sets the "crm_id" field.
func (uuo *UserUpdateOne) SetCrmID(u uuid.UUID) *UserUpdateOne {
	uuo.mutation.SetCrmID(u)
	return uuo
}

// SetNillableCrmID sets the "crm_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCrmID(u *uuid.UUID) *UserUpdateOne {
	if u != nil {
		uuo.SetCrmID(*u)
	}
	return uuo
}

// SetBanned sets the "banned" field.
func (uuo *UserUpdateOne) SetBanned(b bool) *UserUpdateOne {
	uuo.mutation.SetBanned(b)
	return uuo
}

// SetNillableBanned sets the "banned" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableBanned(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetBanned(*b)
	}
	return uuo
}

// SetCustomPb sets the "custom_pb" field.
func (uuo *UserUpdateOne) SetCustomPb(u uint8) *UserUpdateOne {
	uuo.mutation.ResetCustomPb()
	uuo.mutation.SetCustomPb(u)
	return uuo
}

// SetNillableCustomPb sets the "custom_pb" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCustomPb(u *uint8) *UserUpdateOne {
	if u != nil {
		uuo.SetCustomPb(*u)
	}
	return uuo
}

// AddCustomPb adds u to the "custom_pb" field.
func (uuo *UserUpdateOne) AddCustomPb(u int8) *UserUpdateOne {
	uuo.mutation.AddCustomPb(u)
	return uuo
}

// SetOptNum sets the "opt_num" field.
func (uuo *UserUpdateOne) SetOptNum(i int) *UserUpdateOne {
	uuo.mutation.ResetOptNum()
	uuo.mutation.SetOptNum(i)
	return uuo
}

// SetNillableOptNum sets the "opt_num" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableOptNum(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetOptNum(*i)
	}
	return uuo
}

// AddOptNum adds i to the "opt_num" field.
func (uuo *UserUpdateOne) AddOptNum(i int) *UserUpdateOne {
	uuo.mutation.AddOptNum(i)
	return uuo
}

// ClearOptNum clears the value of the "opt_num" field.
func (uuo *UserUpdateOne) ClearOptNum() *UserUpdateOne {
	uuo.mutation.ClearOptNum()
	return uuo
}

// SetOptStr sets the "opt_str" field.
func (uuo *UserUpdateOne) SetOptStr(s string) *UserUpdateOne {
	uuo.mutation.SetOptStr(s)
	return uuo
}

// SetNillableOptStr sets the "opt_str" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableOptStr(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetOptStr(*s)
	}
	return uuo
}

// ClearOptStr clears the value of the "opt_str" field.
func (uuo *UserUpdateOne) ClearOptStr() *UserUpdateOne {
	uuo.mutation.ClearOptStr()
	return uuo
}

// SetOptBool sets the "opt_bool" field.
func (uuo *UserUpdateOne) SetOptBool(b bool) *UserUpdateOne {
	uuo.mutation.SetOptBool(b)
	return uuo
}

// SetNillableOptBool sets the "opt_bool" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableOptBool(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetOptBool(*b)
	}
	return uuo
}

// ClearOptBool clears the value of the "opt_bool" field.
func (uuo *UserUpdateOne) ClearOptBool() *UserUpdateOne {
	uuo.mutation.ClearOptBool()
	return uuo
}

// SetBigInt sets the "big_int" field.
func (uuo *UserUpdateOne) SetBigInt(si schema.BigInt) *UserUpdateOne {
	uuo.mutation.SetBigInt(si)
	return uuo
}

// SetNillableBigInt sets the "big_int" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableBigInt(si *schema.BigInt) *UserUpdateOne {
	if si != nil {
		uuo.SetBigInt(*si)
	}
	return uuo
}

// ClearBigInt clears the value of the "big_int" field.
func (uuo *UserUpdateOne) ClearBigInt() *UserUpdateOne {
	uuo.mutation.ClearBigInt()
	return uuo
}

// SetBUser1 sets the "b_user_1" field.
func (uuo *UserUpdateOne) SetBUser1(i int) *UserUpdateOne {
	uuo.mutation.ResetBUser1()
	uuo.mutation.SetBUser1(i)
	return uuo
}

// SetNillableBUser1 sets the "b_user_1" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableBUser1(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetBUser1(*i)
	}
	return uuo
}

// AddBUser1 adds i to the "b_user_1" field.
func (uuo *UserUpdateOne) AddBUser1(i int) *UserUpdateOne {
	uuo.mutation.AddBUser1(i)
	return uuo
}

// ClearBUser1 clears the value of the "b_user_1" field.
func (uuo *UserUpdateOne) ClearBUser1() *UserUpdateOne {
	uuo.mutation.ClearBUser1()
	return uuo
}

// SetHeightInCm sets the "height_in_cm" field.
func (uuo *UserUpdateOne) SetHeightInCm(f float32) *UserUpdateOne {
	uuo.mutation.ResetHeightInCm()
	uuo.mutation.SetHeightInCm(f)
	return uuo
}

// SetNillableHeightInCm sets the "height_in_cm" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableHeightInCm(f *float32) *UserUpdateOne {
	if f != nil {
		uuo.SetHeightInCm(*f)
	}
	return uuo
}

// AddHeightInCm adds f to the "height_in_cm" field.
func (uuo *UserUpdateOne) AddHeightInCm(f float32) *UserUpdateOne {
	uuo.mutation.AddHeightInCm(f)
	return uuo
}

// SetAccountBalance sets the "account_balance" field.
func (uuo *UserUpdateOne) SetAccountBalance(f float64) *UserUpdateOne {
	uuo.mutation.ResetAccountBalance()
	uuo.mutation.SetAccountBalance(f)
	return uuo
}

// SetNillableAccountBalance sets the "account_balance" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAccountBalance(f *float64) *UserUpdateOne {
	if f != nil {
		uuo.SetAccountBalance(*f)
	}
	return uuo
}

// AddAccountBalance adds f to the "account_balance" field.
func (uuo *UserUpdateOne) AddAccountBalance(f float64) *UserUpdateOne {
	uuo.mutation.AddAccountBalance(f)
	return uuo
}

// SetUnnecessary sets the "unnecessary" field.
func (uuo *UserUpdateOne) SetUnnecessary(s string) *UserUpdateOne {
	uuo.mutation.SetUnnecessary(s)
	return uuo
}

// SetNillableUnnecessary sets the "unnecessary" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUnnecessary(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetUnnecessary(*s)
	}
	return uuo
}

// ClearUnnecessary clears the value of the "unnecessary" field.
func (uuo *UserUpdateOne) ClearUnnecessary() *UserUpdateOne {
	uuo.mutation.ClearUnnecessary()
	return uuo
}

// SetType sets the "type" field.
func (uuo *UserUpdateOne) SetType(s string) *UserUpdateOne {
	uuo.mutation.SetType(s)
	return uuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableType(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetType(*s)
	}
	return uuo
}

// ClearType clears the value of the "type" field.
func (uuo *UserUpdateOne) ClearType() *UserUpdateOne {
	uuo.mutation.ClearType()
	return uuo
}

// SetLabels sets the "labels" field.
func (uuo *UserUpdateOne) SetLabels(s []string) *UserUpdateOne {
	uuo.mutation.SetLabels(s)
	return uuo
}

// AppendLabels appends s to the "labels" field.
func (uuo *UserUpdateOne) AppendLabels(s []string) *UserUpdateOne {
	uuo.mutation.AppendLabels(s)
	return uuo
}

// ClearLabels clears the value of the "labels" field.
func (uuo *UserUpdateOne) ClearLabels() *UserUpdateOne {
	uuo.mutation.ClearLabels()
	return uuo
}

// SetInt32s sets the "int32s" field.
func (uuo *UserUpdateOne) SetInt32s(i []int32) *UserUpdateOne {
	uuo.mutation.SetInt32s(i)
	return uuo
}

// AppendInt32s appends i to the "int32s" field.
func (uuo *UserUpdateOne) AppendInt32s(i []int32) *UserUpdateOne {
	uuo.mutation.AppendInt32s(i)
	return uuo
}

// ClearInt32s clears the value of the "int32s" field.
func (uuo *UserUpdateOne) ClearInt32s() *UserUpdateOne {
	uuo.mutation.ClearInt32s()
	return uuo
}

// SetInt64s sets the "int64s" field.
func (uuo *UserUpdateOne) SetInt64s(i []int64) *UserUpdateOne {
	uuo.mutation.SetInt64s(i)
	return uuo
}

// AppendInt64s appends i to the "int64s" field.
func (uuo *UserUpdateOne) AppendInt64s(i []int64) *UserUpdateOne {
	uuo.mutation.AppendInt64s(i)
	return uuo
}

// ClearInt64s clears the value of the "int64s" field.
func (uuo *UserUpdateOne) ClearInt64s() *UserUpdateOne {
	uuo.mutation.ClearInt64s()
	return uuo
}

// SetUint32s sets the "uint32s" field.
func (uuo *UserUpdateOne) SetUint32s(u []uint32) *UserUpdateOne {
	uuo.mutation.SetUint32s(u)
	return uuo
}

// AppendUint32s appends u to the "uint32s" field.
func (uuo *UserUpdateOne) AppendUint32s(u []uint32) *UserUpdateOne {
	uuo.mutation.AppendUint32s(u)
	return uuo
}

// ClearUint32s clears the value of the "uint32s" field.
func (uuo *UserUpdateOne) ClearUint32s() *UserUpdateOne {
	uuo.mutation.ClearUint32s()
	return uuo
}

// SetUint64s sets the "uint64s" field.
func (uuo *UserUpdateOne) SetUint64s(u []uint64) *UserUpdateOne {
	uuo.mutation.SetUint64s(u)
	return uuo
}

// AppendUint64s appends u to the "uint64s" field.
func (uuo *UserUpdateOne) AppendUint64s(u []uint64) *UserUpdateOne {
	uuo.mutation.AppendUint64s(u)
	return uuo
}

// ClearUint64s clears the value of the "uint64s" field.
func (uuo *UserUpdateOne) ClearUint64s() *UserUpdateOne {
	uuo.mutation.ClearUint64s()
	return uuo
}

// SetDeviceType sets the "device_type" field.
func (uuo *UserUpdateOne) SetDeviceType(ut user.DeviceType) *UserUpdateOne {
	uuo.mutation.SetDeviceType(ut)
	return uuo
}

// SetNillableDeviceType sets the "device_type" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDeviceType(ut *user.DeviceType) *UserUpdateOne {
	if ut != nil {
		uuo.SetDeviceType(*ut)
	}
	return uuo
}

// SetOmitPrefix sets the "omit_prefix" field.
func (uuo *UserUpdateOne) SetOmitPrefix(up user.OmitPrefix) *UserUpdateOne {
	uuo.mutation.SetOmitPrefix(up)
	return uuo
}

// SetNillableOmitPrefix sets the "omit_prefix" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableOmitPrefix(up *user.OmitPrefix) *UserUpdateOne {
	if up != nil {
		uuo.SetOmitPrefix(*up)
	}
	return uuo
}

// SetMimeType sets the "mime_type" field.
func (uuo *UserUpdateOne) SetMimeType(ut user.MimeType) *UserUpdateOne {
	uuo.mutation.SetMimeType(ut)
	return uuo
}

// SetNillableMimeType sets the "mime_type" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableMimeType(ut *user.MimeType) *UserUpdateOne {
	if ut != nil {
		uuo.SetMimeType(*ut)
	}
	return uuo
}

// SetGroupID sets the "group" edge to the Group entity by ID.
func (uuo *UserUpdateOne) SetGroupID(id int) *UserUpdateOne {
	uuo.mutation.SetGroupID(id)
	return uuo
}

// SetNillableGroupID sets the "group" edge to the Group entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableGroupID(id *int) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetGroupID(*id)
	}
	return uuo
}

// SetGroup sets the "group" edge to the Group entity.
func (uuo *UserUpdateOne) SetGroup(g *Group) *UserUpdateOne {
	return uuo.SetGroupID(g.ID)
}

// SetAttachmentID sets the "attachment" edge to the Attachment entity by ID.
func (uuo *UserUpdateOne) SetAttachmentID(id uuid.UUID) *UserUpdateOne {
	uuo.mutation.SetAttachmentID(id)
	return uuo
}

// SetNillableAttachmentID sets the "attachment" edge to the Attachment entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAttachmentID(id *uuid.UUID) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetAttachmentID(*id)
	}
	return uuo
}

// SetAttachment sets the "attachment" edge to the Attachment entity.
func (uuo *UserUpdateOne) SetAttachment(a *Attachment) *UserUpdateOne {
	return uuo.SetAttachmentID(a.ID)
}

// AddReceived1IDs adds the "received_1" edge to the Attachment entity by IDs.
func (uuo *UserUpdateOne) AddReceived1IDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddReceived1IDs(ids...)
	return uuo
}

// AddReceived1 adds the "received_1" edges to the Attachment entity.
func (uuo *UserUpdateOne) AddReceived1(a ...*Attachment) *UserUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.AddReceived1IDs(ids...)
}

// SetPetID sets the "pet" edge to the Pet entity by ID.
func (uuo *UserUpdateOne) SetPetID(id int) *UserUpdateOne {
	uuo.mutation.SetPetID(id)
	return uuo
}

// SetNillablePetID sets the "pet" edge to the Pet entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePetID(id *int) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetPetID(*id)
	}
	return uuo
}

// SetPet sets the "pet" edge to the Pet entity.
func (uuo *UserUpdateOne) SetPet(p *Pet) *UserUpdateOne {
	return uuo.SetPetID(p.ID)
}

// SetSkipEdgeID sets the "skip_edge" edge to the SkipEdgeExample entity by ID.
func (uuo *UserUpdateOne) SetSkipEdgeID(id int) *UserUpdateOne {
	uuo.mutation.SetSkipEdgeID(id)
	return uuo
}

// SetNillableSkipEdgeID sets the "skip_edge" edge to the SkipEdgeExample entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableSkipEdgeID(id *int) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetSkipEdgeID(*id)
	}
	return uuo
}

// SetSkipEdge sets the "skip_edge" edge to the SkipEdgeExample entity.
func (uuo *UserUpdateOne) SetSkipEdge(s *SkipEdgeExample) *UserUpdateOne {
	return uuo.SetSkipEdgeID(s.ID)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearGroup clears the "group" edge to the Group entity.
func (uuo *UserUpdateOne) ClearGroup() *UserUpdateOne {
	uuo.mutation.ClearGroup()
	return uuo
}

// ClearAttachment clears the "attachment" edge to the Attachment entity.
func (uuo *UserUpdateOne) ClearAttachment() *UserUpdateOne {
	uuo.mutation.ClearAttachment()
	return uuo
}

// ClearReceived1 clears all "received_1" edges to the Attachment entity.
func (uuo *UserUpdateOne) ClearReceived1() *UserUpdateOne {
	uuo.mutation.ClearReceived1()
	return uuo
}

// RemoveReceived1IDs removes the "received_1" edge to Attachment entities by IDs.
func (uuo *UserUpdateOne) RemoveReceived1IDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveReceived1IDs(ids...)
	return uuo
}

// RemoveReceived1 removes "received_1" edges to Attachment entities.
func (uuo *UserUpdateOne) RemoveReceived1(a ...*Attachment) *UserUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.RemoveReceived1IDs(ids...)
}

// ClearPet clears the "pet" edge to the Pet entity.
func (uuo *UserUpdateOne) ClearPet() *UserUpdateOne {
	uuo.mutation.ClearPet()
	return uuo
}

// ClearSkipEdge clears the "skip_edge" edge to the SkipEdgeExample entity.
func (uuo *UserUpdateOne) ClearSkipEdge() *UserUpdateOne {
	uuo.mutation.ClearSkipEdge()
	return uuo
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.Status(); ok {
		if err := user.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "User.status": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.DeviceType(); ok {
		if err := user.DeviceTypeValidator(v); err != nil {
			return &ValidationError{Name: "device_type", err: fmt.Errorf(`ent: validator failed for field "User.device_type": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.OmitPrefix(); ok {
		if err := user.OmitPrefixValidator(v); err != nil {
			return &ValidationError{Name: "omit_prefix", err: fmt.Errorf(`ent: validator failed for field "User.omit_prefix": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.MimeType(); ok {
		if err := user.MimeTypeValidator(v); err != nil {
			return &ValidationError{Name: "mime_type", err: fmt.Errorf(`ent: validator failed for field "User.mime_type": %w`, err)}
		}
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint32))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.UserName(); ok {
		_spec.SetField(user.FieldUserName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Points(); ok {
		_spec.SetField(user.FieldPoints, field.TypeUint, value)
	}
	if value, ok := uuo.mutation.AddedPoints(); ok {
		_spec.AddField(user.FieldPoints, field.TypeUint, value)
	}
	if value, ok := uuo.mutation.Exp(); ok {
		_spec.SetField(user.FieldExp, field.TypeUint64, value)
	}
	if value, ok := uuo.mutation.AddedExp(); ok {
		_spec.AddField(user.FieldExp, field.TypeUint64, value)
	}
	if value, ok := uuo.mutation.Status(); ok {
		_spec.SetField(user.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := uuo.mutation.ExternalID(); ok {
		_spec.SetField(user.FieldExternalID, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.AddedExternalID(); ok {
		_spec.AddField(user.FieldExternalID, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.CrmID(); ok {
		_spec.SetField(user.FieldCrmID, field.TypeUUID, value)
	}
	if value, ok := uuo.mutation.Banned(); ok {
		_spec.SetField(user.FieldBanned, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.CustomPb(); ok {
		_spec.SetField(user.FieldCustomPb, field.TypeUint8, value)
	}
	if value, ok := uuo.mutation.AddedCustomPb(); ok {
		_spec.AddField(user.FieldCustomPb, field.TypeUint8, value)
	}
	if value, ok := uuo.mutation.OptNum(); ok {
		_spec.SetField(user.FieldOptNum, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.AddedOptNum(); ok {
		_spec.AddField(user.FieldOptNum, field.TypeInt, value)
	}
	if uuo.mutation.OptNumCleared() {
		_spec.ClearField(user.FieldOptNum, field.TypeInt)
	}
	if value, ok := uuo.mutation.OptStr(); ok {
		_spec.SetField(user.FieldOptStr, field.TypeString, value)
	}
	if uuo.mutation.OptStrCleared() {
		_spec.ClearField(user.FieldOptStr, field.TypeString)
	}
	if value, ok := uuo.mutation.OptBool(); ok {
		_spec.SetField(user.FieldOptBool, field.TypeBool, value)
	}
	if uuo.mutation.OptBoolCleared() {
		_spec.ClearField(user.FieldOptBool, field.TypeBool)
	}
	if value, ok := uuo.mutation.BigInt(); ok {
		_spec.SetField(user.FieldBigInt, field.TypeInt, value)
	}
	if uuo.mutation.BigIntCleared() {
		_spec.ClearField(user.FieldBigInt, field.TypeInt)
	}
	if value, ok := uuo.mutation.BUser1(); ok {
		_spec.SetField(user.FieldBUser1, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.AddedBUser1(); ok {
		_spec.AddField(user.FieldBUser1, field.TypeInt, value)
	}
	if uuo.mutation.BUser1Cleared() {
		_spec.ClearField(user.FieldBUser1, field.TypeInt)
	}
	if value, ok := uuo.mutation.HeightInCm(); ok {
		_spec.SetField(user.FieldHeightInCm, field.TypeFloat32, value)
	}
	if value, ok := uuo.mutation.AddedHeightInCm(); ok {
		_spec.AddField(user.FieldHeightInCm, field.TypeFloat32, value)
	}
	if value, ok := uuo.mutation.AccountBalance(); ok {
		_spec.SetField(user.FieldAccountBalance, field.TypeFloat64, value)
	}
	if value, ok := uuo.mutation.AddedAccountBalance(); ok {
		_spec.AddField(user.FieldAccountBalance, field.TypeFloat64, value)
	}
	if value, ok := uuo.mutation.Unnecessary(); ok {
		_spec.SetField(user.FieldUnnecessary, field.TypeString, value)
	}
	if uuo.mutation.UnnecessaryCleared() {
		_spec.ClearField(user.FieldUnnecessary, field.TypeString)
	}
	if value, ok := uuo.mutation.GetType(); ok {
		_spec.SetField(user.FieldType, field.TypeString, value)
	}
	if uuo.mutation.TypeCleared() {
		_spec.ClearField(user.FieldType, field.TypeString)
	}
	if value, ok := uuo.mutation.Labels(); ok {
		_spec.SetField(user.FieldLabels, field.TypeJSON, value)
	}
	if value, ok := uuo.mutation.AppendedLabels(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, user.FieldLabels, value)
		})
	}
	if uuo.mutation.LabelsCleared() {
		_spec.ClearField(user.FieldLabels, field.TypeJSON)
	}
	if value, ok := uuo.mutation.Int32s(); ok {
		_spec.SetField(user.FieldInt32s, field.TypeJSON, value)
	}
	if value, ok := uuo.mutation.AppendedInt32s(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, user.FieldInt32s, value)
		})
	}
	if uuo.mutation.Int32sCleared() {
		_spec.ClearField(user.FieldInt32s, field.TypeJSON)
	}
	if value, ok := uuo.mutation.Int64s(); ok {
		_spec.SetField(user.FieldInt64s, field.TypeJSON, value)
	}
	if value, ok := uuo.mutation.AppendedInt64s(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, user.FieldInt64s, value)
		})
	}
	if uuo.mutation.Int64sCleared() {
		_spec.ClearField(user.FieldInt64s, field.TypeJSON)
	}
	if value, ok := uuo.mutation.Uint32s(); ok {
		_spec.SetField(user.FieldUint32s, field.TypeJSON, value)
	}
	if value, ok := uuo.mutation.AppendedUint32s(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, user.FieldUint32s, value)
		})
	}
	if uuo.mutation.Uint32sCleared() {
		_spec.ClearField(user.FieldUint32s, field.TypeJSON)
	}
	if value, ok := uuo.mutation.Uint64s(); ok {
		_spec.SetField(user.FieldUint64s, field.TypeJSON, value)
	}
	if value, ok := uuo.mutation.AppendedUint64s(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, user.FieldUint64s, value)
		})
	}
	if uuo.mutation.Uint64sCleared() {
		_spec.ClearField(user.FieldUint64s, field.TypeJSON)
	}
	if value, ok := uuo.mutation.DeviceType(); ok {
		_spec.SetField(user.FieldDeviceType, field.TypeEnum, value)
	}
	if value, ok := uuo.mutation.OmitPrefix(); ok {
		_spec.SetField(user.FieldOmitPrefix, field.TypeEnum, value)
	}
	if value, ok := uuo.mutation.MimeType(); ok {
		_spec.SetField(user.FieldMimeType, field.TypeEnum, value)
	}
	if uuo.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.GroupTable,
			Columns: []string{user.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.GroupTable,
			Columns: []string{user.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.AttachmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.AttachmentTable,
			Columns: []string{user.AttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.AttachmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.AttachmentTable,
			Columns: []string{user.AttachmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.Received1Cleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.Received1Table,
			Columns: user.Received1PrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedReceived1IDs(); len(nodes) > 0 && !uuo.mutation.Received1Cleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.Received1Table,
			Columns: user.Received1PrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.Received1IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.Received1Table,
			Columns: user.Received1PrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.PetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.PetTable,
			Columns: []string{user.PetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.PetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.PetTable,
			Columns: []string{user.PetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.SkipEdgeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.SkipEdgeTable,
			Columns: []string{user.SkipEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skipedgeexample.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.SkipEdgeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.SkipEdgeTable,
			Columns: []string{user.SkipEdgeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skipedgeexample.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
