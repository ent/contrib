// Code generated by entc, DO NOT EDIT.

package user

import (
	"fmt"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserName holds the string denoting the user_name field in the database.
	FieldUserName = "user_name"
	// FieldJoined holds the string denoting the joined field in the database.
	FieldJoined = "joined"
	// FieldPoints holds the string denoting the points field in the database.
	FieldPoints = "points"
	// FieldExp holds the string denoting the exp field in the database.
	FieldExp = "exp"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldExternalID holds the string denoting the external_id field in the database.
	FieldExternalID = "external_id"
	// FieldCrmID holds the string denoting the crm_id field in the database.
	FieldCrmID = "crm_id"
	// FieldBanned holds the string denoting the banned field in the database.
	FieldBanned = "banned"
	// FieldCustomPb holds the string denoting the custom_pb field in the database.
	FieldCustomPb = "custom_pb"
	// FieldOptNum holds the string denoting the opt_num field in the database.
	FieldOptNum = "opt_num"
	// FieldOptStr holds the string denoting the opt_str field in the database.
	FieldOptStr = "opt_str"
	// FieldOptBool holds the string denoting the opt_bool field in the database.
	FieldOptBool = "opt_bool"
	// EdgeGroup holds the string denoting the group edge name in mutations.
	EdgeGroup = "group"
	// EdgeAttachment holds the string denoting the attachment edge name in mutations.
	EdgeAttachment = "attachment"
	// Table holds the table name of the user in the database.
	Table = "users"
	// GroupTable is the table the holds the group relation/edge.
	GroupTable = "users"
	// GroupInverseTable is the table name for the Group entity.
	// It exists in this package in order to avoid circular dependency with the "group" package.
	GroupInverseTable = "groups"
	// GroupColumn is the table column denoting the group relation/edge.
	GroupColumn = "user_group"
	// AttachmentTable is the table the holds the attachment relation/edge.
	AttachmentTable = "attachments"
	// AttachmentInverseTable is the table name for the Attachment entity.
	// It exists in this package in order to avoid circular dependency with the "attachment" package.
	AttachmentInverseTable = "attachments"
	// AttachmentColumn is the table column denoting the attachment relation/edge.
	AttachmentColumn = "user_attachment"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldUserName,
	FieldJoined,
	FieldPoints,
	FieldExp,
	FieldStatus,
	FieldExternalID,
	FieldCrmID,
	FieldBanned,
	FieldCustomPb,
	FieldOptNum,
	FieldOptStr,
	FieldOptBool,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "users"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_group",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultBanned holds the default value on creation for the "banned" field.
	DefaultBanned bool
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusPending Status = "pending"
	StatusActive  Status = "active"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPending, StatusActive:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for status field: %q", s)
	}
}
