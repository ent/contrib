// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	ent "entgo.io/contrib/entproto/internal/todo/ent"
	nilexample "entgo.io/contrib/entproto/internal/todo/ent/nilexample"
	runtime "entgo.io/contrib/entproto/runtime"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// NilExampleService implements NilExampleServiceServer
type NilExampleService struct {
	client *ent.Client
	UnimplementedNilExampleServiceServer
}

// NewNilExampleService returns a new NilExampleService
func NewNilExampleService(client *ent.Client) *NilExampleService {
	return &NilExampleService{
		client: client,
	}
}

// toProtoNilExample transforms the ent type to the pb type
func toProtoNilExample(e *ent.NilExample) (*NilExample, error) {
	v := &NilExample{}
	id := int32(e.ID)
	v.Id = id
	if e.StrNil != nil {
		strnil := wrapperspb.String(*e.StrNil)
		v.StrNil = strnil
	}
	if e.TimeNil != nil {
		timenil := timestamppb.New(*e.TimeNil)
		v.TimeNil = timenil
	}
	return v, nil
}

// Create implements NilExampleServiceServer.Create
func (svc *NilExampleService) Create(ctx context.Context, req *CreateNilExampleRequest) (*NilExample, error) {
	nilexample := req.GetNilExample()
	m := svc.client.NilExample.Create()
	if nilexample.GetStrNil() != nil {
		nilexampleStrNil := nilexample.GetStrNil().GetValue()
		m.SetStrNil(nilexampleStrNil)
	}
	if nilexample.GetTimeNil() != nil {
		nilexampleTimeNil := runtime.ExtractTime(nilexample.GetTimeNil())
		m.SetTimeNil(nilexampleTimeNil)
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoNilExample(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements NilExampleServiceServer.Get
func (svc *NilExampleService) Get(ctx context.Context, req *GetNilExampleRequest) (*NilExample, error) {
	var (
		err error
		get *ent.NilExample
	)
	id := int(req.GetId())
	switch req.GetView() {
	case GetNilExampleRequest_VIEW_UNSPECIFIED, GetNilExampleRequest_BASIC:
		get, err = svc.client.NilExample.Get(ctx, id)
	case GetNilExampleRequest_WITH_EDGE_IDS:
		get, err = svc.client.NilExample.Query().
			Where(nilexample.ID(id)).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoNilExample(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}
	return nil, nil

}

// Update implements NilExampleServiceServer.Update
func (svc *NilExampleService) Update(ctx context.Context, req *UpdateNilExampleRequest) (*NilExample, error) {
	nilexample := req.GetNilExample()
	nilexampleID := int(nilexample.GetId())
	m := svc.client.NilExample.UpdateOneID(nilexampleID)
	if nilexample.GetStrNil() != nil {
		nilexampleStrNil := nilexample.GetStrNil().GetValue()
		m.SetStrNil(nilexampleStrNil)
	}
	if nilexample.GetTimeNil() != nil {
		nilexampleTimeNil := runtime.ExtractTime(nilexample.GetTimeNil())
		m.SetTimeNil(nilexampleTimeNil)
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoNilExample(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements NilExampleServiceServer.Delete
func (svc *NilExampleService) Delete(ctx context.Context, req *DeleteNilExampleRequest) (*emptypb.Empty, error) {
	var err error
	id := int(req.GetId())
	err = svc.client.NilExample.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}
