// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/contrib/entproto/internal/todo/ent/multiwordschema"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MultiWordSchemaCreate is the builder for creating a MultiWordSchema entity.
type MultiWordSchemaCreate struct {
	config
	mutation *MultiWordSchemaMutation
	hooks    []Hook
}

// SetUnit sets the "unit" field.
func (mwsc *MultiWordSchemaCreate) SetUnit(m multiwordschema.Unit) *MultiWordSchemaCreate {
	mwsc.mutation.SetUnit(m)
	return mwsc
}

// SetNillableUnit sets the "unit" field if the given value is not nil.
func (mwsc *MultiWordSchemaCreate) SetNillableUnit(m *multiwordschema.Unit) *MultiWordSchemaCreate {
	if m != nil {
		mwsc.SetUnit(*m)
	}
	return mwsc
}

// Mutation returns the MultiWordSchemaMutation object of the builder.
func (mwsc *MultiWordSchemaCreate) Mutation() *MultiWordSchemaMutation {
	return mwsc.mutation
}

// Save creates the MultiWordSchema in the database.
func (mwsc *MultiWordSchemaCreate) Save(ctx context.Context) (*MultiWordSchema, error) {
	var (
		err  error
		node *MultiWordSchema
	)
	mwsc.defaults()
	if len(mwsc.hooks) == 0 {
		if err = mwsc.check(); err != nil {
			return nil, err
		}
		node, err = mwsc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MultiWordSchemaMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mwsc.check(); err != nil {
				return nil, err
			}
			mwsc.mutation = mutation
			if node, err = mwsc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(mwsc.hooks) - 1; i >= 0; i-- {
			if mwsc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mwsc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, mwsc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*MultiWordSchema)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from MultiWordSchemaMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mwsc *MultiWordSchemaCreate) SaveX(ctx context.Context) *MultiWordSchema {
	v, err := mwsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mwsc *MultiWordSchemaCreate) Exec(ctx context.Context) error {
	_, err := mwsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mwsc *MultiWordSchemaCreate) ExecX(ctx context.Context) {
	if err := mwsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mwsc *MultiWordSchemaCreate) defaults() {
	if _, ok := mwsc.mutation.Unit(); !ok {
		v := multiwordschema.DefaultUnit
		mwsc.mutation.SetUnit(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mwsc *MultiWordSchemaCreate) check() error {
	if _, ok := mwsc.mutation.Unit(); !ok {
		return &ValidationError{Name: "unit", err: errors.New(`ent: missing required field "MultiWordSchema.unit"`)}
	}
	if v, ok := mwsc.mutation.Unit(); ok {
		if err := multiwordschema.UnitValidator(v); err != nil {
			return &ValidationError{Name: "unit", err: fmt.Errorf(`ent: validator failed for field "MultiWordSchema.unit": %w`, err)}
		}
	}
	return nil
}

func (mwsc *MultiWordSchemaCreate) sqlSave(ctx context.Context) (*MultiWordSchema, error) {
	_node, _spec := mwsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mwsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (mwsc *MultiWordSchemaCreate) createSpec() (*MultiWordSchema, *sqlgraph.CreateSpec) {
	var (
		_node = &MultiWordSchema{config: mwsc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: multiwordschema.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: multiwordschema.FieldID,
			},
		}
	)
	if value, ok := mwsc.mutation.Unit(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: multiwordschema.FieldUnit,
		})
		_node.Unit = value
	}
	return _node, _spec
}

// MultiWordSchemaCreateBulk is the builder for creating many MultiWordSchema entities in bulk.
type MultiWordSchemaCreateBulk struct {
	config
	builders []*MultiWordSchemaCreate
}

// Save creates the MultiWordSchema entities in the database.
func (mwscb *MultiWordSchemaCreateBulk) Save(ctx context.Context) ([]*MultiWordSchema, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mwscb.builders))
	nodes := make([]*MultiWordSchema, len(mwscb.builders))
	mutators := make([]Mutator, len(mwscb.builders))
	for i := range mwscb.builders {
		func(i int, root context.Context) {
			builder := mwscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MultiWordSchemaMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mwscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mwscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mwscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mwscb *MultiWordSchemaCreateBulk) SaveX(ctx context.Context) []*MultiWordSchema {
	v, err := mwscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mwscb *MultiWordSchemaCreateBulk) Exec(ctx context.Context) error {
	_, err := mwscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mwscb *MultiWordSchemaCreateBulk) ExecX(ctx context.Context) {
	if err := mwscb.Exec(ctx); err != nil {
		panic(err)
	}
}
