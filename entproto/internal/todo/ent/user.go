// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/contrib/entproto/internal/todo/ent/attachment"
	"entgo.io/contrib/entproto/internal/todo/ent/group"
	"entgo.io/contrib/entproto/internal/todo/ent/user"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserName holds the value of the "user_name" field.
	UserName string `json:"user_name,omitempty"`
	// Joined holds the value of the "joined" field.
	Joined time.Time `json:"joined,omitempty"`
	// Points holds the value of the "points" field.
	Points uint `json:"points,omitempty"`
	// Exp holds the value of the "exp" field.
	Exp uint64 `json:"exp,omitempty"`
	// Status holds the value of the "status" field.
	Status user.Status `json:"status,omitempty"`
	// ExternalID holds the value of the "external_id" field.
	ExternalID int `json:"external_id,omitempty"`
	// CrmID holds the value of the "crm_id" field.
	CrmID uuid.UUID `json:"crm_id,omitempty"`
	// Banned holds the value of the "banned" field.
	Banned bool `json:"banned,omitempty"`
	// CustomPb holds the value of the "custom_pb" field.
	CustomPb uint8 `json:"custom_pb,omitempty"`
	// OptNum holds the value of the "opt_num" field.
	OptNum int `json:"opt_num,omitempty"`
	// OptStr holds the value of the "opt_str" field.
	OptStr string `json:"opt_str,omitempty"`
	// OptBool holds the value of the "opt_bool" field.
	OptBool string `json:"opt_bool,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges      UserEdges `json:"edges"`
	user_group *int
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Group holds the value of the group edge.
	Group *Group `json:"group,omitempty"`
	// Attachment holds the value of the attachment edge.
	Attachment *Attachment `json:"attachment,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// GroupOrErr returns the Group value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) GroupOrErr() (*Group, error) {
	if e.loadedTypes[0] {
		if e.Group == nil {
			// The edge group was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: group.Label}
		}
		return e.Group, nil
	}
	return nil, &NotLoadedError{edge: "group"}
}

// AttachmentOrErr returns the Attachment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) AttachmentOrErr() (*Attachment, error) {
	if e.loadedTypes[1] {
		if e.Attachment == nil {
			// The edge attachment was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: attachment.Label}
		}
		return e.Attachment, nil
	}
	return nil, &NotLoadedError{edge: "attachment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldBanned:
			values[i] = &sql.NullBool{}
		case user.FieldID, user.FieldPoints, user.FieldExp, user.FieldExternalID, user.FieldCustomPb, user.FieldOptNum:
			values[i] = &sql.NullInt64{}
		case user.FieldUserName, user.FieldStatus, user.FieldOptStr, user.FieldOptBool:
			values[i] = &sql.NullString{}
		case user.FieldJoined:
			values[i] = &sql.NullTime{}
		case user.FieldCrmID:
			values[i] = &uuid.UUID{}
		case user.ForeignKeys[0]: // user_group
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type User", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int(value.Int64)
		case user.FieldUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_name", values[i])
			} else if value.Valid {
				u.UserName = value.String
			}
		case user.FieldJoined:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field joined", values[i])
			} else if value.Valid {
				u.Joined = value.Time
			}
		case user.FieldPoints:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field points", values[i])
			} else if value.Valid {
				u.Points = uint(value.Int64)
			}
		case user.FieldExp:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field exp", values[i])
			} else if value.Valid {
				u.Exp = uint64(value.Int64)
			}
		case user.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				u.Status = user.Status(value.String)
			}
		case user.FieldExternalID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field external_id", values[i])
			} else if value.Valid {
				u.ExternalID = int(value.Int64)
			}
		case user.FieldCrmID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field crm_id", values[i])
			} else if value != nil {
				u.CrmID = *value
			}
		case user.FieldBanned:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field banned", values[i])
			} else if value.Valid {
				u.Banned = value.Bool
			}
		case user.FieldCustomPb:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field custom_pb", values[i])
			} else if value.Valid {
				u.CustomPb = uint8(value.Int64)
			}
		case user.FieldOptNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field opt_num", values[i])
			} else if value.Valid {
				u.OptNum = int(value.Int64)
			}
		case user.FieldOptStr:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field opt_str", values[i])
			} else if value.Valid {
				u.OptStr = value.String
			}
		case user.FieldOptBool:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field opt_bool", values[i])
			} else if value.Valid {
				u.OptBool = value.String
			}
		case user.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_group", value)
			} else if value.Valid {
				u.user_group = new(int)
				*u.user_group = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryGroup queries the "group" edge of the User entity.
func (u *User) QueryGroup() *GroupQuery {
	return (&UserClient{config: u.config}).QueryGroup(u)
}

// QueryAttachment queries the "attachment" edge of the User entity.
func (u *User) QueryAttachment() *AttachmentQuery {
	return (&UserClient{config: u.config}).QueryAttachment(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return (&UserClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v", u.ID))
	builder.WriteString(", user_name=")
	builder.WriteString(u.UserName)
	builder.WriteString(", joined=")
	builder.WriteString(u.Joined.Format(time.ANSIC))
	builder.WriteString(", points=")
	builder.WriteString(fmt.Sprintf("%v", u.Points))
	builder.WriteString(", exp=")
	builder.WriteString(fmt.Sprintf("%v", u.Exp))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", u.Status))
	builder.WriteString(", external_id=")
	builder.WriteString(fmt.Sprintf("%v", u.ExternalID))
	builder.WriteString(", crm_id=")
	builder.WriteString(fmt.Sprintf("%v", u.CrmID))
	builder.WriteString(", banned=")
	builder.WriteString(fmt.Sprintf("%v", u.Banned))
	builder.WriteString(", custom_pb=")
	builder.WriteString(fmt.Sprintf("%v", u.CustomPb))
	builder.WriteString(", opt_num=")
	builder.WriteString(fmt.Sprintf("%v", u.OptNum))
	builder.WriteString(", opt_str=")
	builder.WriteString(u.OptStr)
	builder.WriteString(", opt_bool=")
	builder.WriteString(u.OptBool)
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
