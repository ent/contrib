// Code generated by ent, DO NOT EDIT.

package multiwordschema

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the multiwordschema type in the database.
	Label = "multi_word_schema"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUnit holds the string denoting the unit field in the database.
	FieldUnit = "unit"
	// Table holds the table name of the multiwordschema in the database.
	Table = "multi_word_schemas"
)

// Columns holds all SQL columns for multiwordschema fields.
var Columns = []string{
	FieldID,
	FieldUnit,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Unit defines the type for the "unit" enum field.
type Unit string

// UnitM is the default value of the Unit enum.
const DefaultUnit = UnitM

// Unit values.
const (
	UnitM  Unit = "m"
	UnitFt Unit = "ft"
)

func (u Unit) String() string {
	return string(u)
}

// UnitValidator is a validator for the "unit" field enum values. It is called by the builders before save.
func UnitValidator(u Unit) error {
	switch u {
	case UnitM, UnitFt:
		return nil
	default:
		return fmt.Errorf("multiwordschema: invalid enum value for unit field: %q", u)
	}
}

// Order defines the ordering method for the MultiWordSchema queries.
type Order func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUnit orders the results by the unit field.
func ByUnit(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldUnit, opts...).ToFunc()
}
