{{- /*gotype: github.com/bionicstork/contrib/entproto/cmd/protoc-gen-entgrpc.toProtoGenerator */ -}}
{{ define "to_proto_func" }}
    {{ $firstNode := index .Nodes 0 }}
    package {{ $firstNode.File.GoPackageName }}

    // Note: This is a hack for easy putting the service generated code in a different package
    import (
        . "github.com/bionicstork/bionicstork/pkg/common/proto/build/go/entities/backbone"
    )

    {{- range .Nodes }}
        {{ $nodeName := .EntType.Name }}
        // toProto{{ .EntType.Name }} transforms the ent type to the pb type
        func toProto{{ .EntType.Name }}(e *{{ .EntPackage.Ident .EntType.Name | ident }}) (*{{ .EntType.Name }}, error) {
            v := &{{ .EntType.Name }}{}
            {{- range .FieldMap.Fields }}
                {{- $varNameBase := camel .EntField.StructField -}}
                {{/* Adding "_" suffix to avoid a conflict with reserved names (e.g. type) */}}
                {{- $varName := print "_" $varNameBase -}}
                {{- $f := print "e." .EntField.StructField -}}
                {{- if .EntField.Nillable }}
                    if {{ $f }} != nil {
                    {{- $f = print "*" $f -}}
                {{- end }}
                {{- template "field_to_proto" dict "Field" . "VarName" $varName "Ident" $f "NodeName" $nodeName }}
                v.{{ .PbStructField }} = {{ $varName }}
                {{- if .EntField.Nillable }}
                    }
                {{- end }}
            {{- end }}
            {{- range .FieldMap.Edges }}
                {{- $name := .EntEdge.StructField -}}
                {{- $nameSingle := .EntEdge.Type.Name -}}
                {{- if .EntEdge.Unique }}
                    if edg := e.Edges.{{ $name }}; edg != nil {
                        edgeProto, err := toProto{{ $nameSingle }}(edg)
                        if err != nil {
                            return nil, err
                        }
                        v.{{ .PbStructField }} = edgeProto
                    }
                {{- else }}
                    for _, edg := range e.Edges.{{ $name }} {
                        edgeProto, err := toProto{{ $nameSingle }}(edg)
                        if err != nil {
                            return nil, err
                        }
                        v.{{ .PbStructField }} = append(v.{{ .PbStructField }}, edgeProto)
                    }
                {{- end }}
            {{- end }}
            return v, nil
        }
    {{ end }}
{{ end }}

{{ define "field_to_proto" }}
    {{- $id := .Ident -}}
    {{- $conv := newConverter .Field .NodeName -}}
    {{- if $conv.ToProtoConversion }}
        {{- $id = print $conv.ToProtoConversion "(" $id ")" -}}
    {{- end }}
    {{- if $conv.ToEntMarshallerConstructor.GoName }}
        {{ .VarName }}, err := {{ $id }}.MarshalBinary()
        if err != nil {
            return nil, err
        }
    {{- else if and $conv.ToProtoValuer $conv.ToProtoConstructor.GoName }}
        {{ .VarName }}Value, err := {{$id}}.Value()
        if err != nil {
            return nil, err
        }
        {{ .VarName }}Typed, ok := {{ .VarName }}Value.({{ $conv.ToProtoValuer }})
        if !ok {
            return nil, {{ qualify "errors" "New" }}("casting value to {{ $conv.ToProtoValuer }}")
        }
        {{ .VarName}} := {{ ident $conv.ToProtoConstructor }}({{ .VarName}}Typed)
    {{- else if $conv.ToProtoValuer }}
        {{ .VarName }}Value, err := {{ $id }}.Value()
        if err != nil {
            return nil, err
        }
        {{ .VarName }}, ok := {{ .VarName }}Value.({{ $conv.ToProtoValuer }})
        if !ok {
            return nil, {{ qualify "errors" "New" }}("casting value to {{ $conv.ToProtoValuer }}")
        }
    {{- else if $conv.ToProtoConstructor.GoName }}
        {{ .VarName }} := {{ ident $conv.ToProtoConstructor }}({{ $id }})
    {{- else }}
        {{ .VarName }} := {{ $id }}
    {{- end }}
{{- end }}
