{{- /*gotype: entgo.io/contrib/entproto/cmd/protoc-gen-entgrpc.serviceGenerator*/ -}}
{{ define "to_proto_func" }}
    // ToProto{{ .EntType.Name }} transforms the ent type to the pb type
    func ToProto{{ .EntType.Name }}(e *{{ .EntPackage.Ident .EntType.Name | ident }}) (*{{ .EntType.Name }}, error) {
        v := &{{ .EntType.Name }}{}
        {{- range .FieldMap.Fields }}
            {{- $varName := .EntField.BuilderField -}}
            {{- $f := print "e." .EntField.StructField -}}
            {{- if .EntField.Nillable }}
                if {{ $f }} != nil {
                {{- $f = print "*" $f -}}
            {{- end }}
            {{- template "field_to_proto" dict "Field" . "VarName" $varName "Ident" $f }}
            v.{{ .PbStructField }} = {{ $varName }}
            {{- if .EntField.Nillable }}
                }
            {{- end }}
        {{- end }}
        {{- range .FieldMap.Edges }}
            {{- $varName := camel .EntEdge.Type.ID.StructField -}}
            {{- $id := print "edg." .EntEdge.Type.ID.StructField -}}
            {{- $name := .EntEdge.StructField -}}
            {{- if .EntEdge.Unique }}
                if edg := e.Edges.{{ $name }}; edg != nil {
                    {{- template "field_to_proto" dict "Field" . "VarName" $varName "Ident" $id }}
                    v.{{ .PbStructField }} = &{{ .EntEdge.Type.Name }}{
                        {{ .EdgeIDPbStructField }}: {{ $varName }},
                    }
                }
            {{- else }}
                for _, edg := range e.Edges.{{ $name }} {
                    {{- template "field_to_proto" dict "Field" . "VarName" $varName "Ident" $id }}
                    v.{{ .PbStructField }} = append(v.{{ .PbStructField }}, &{{ .EntEdge.Type.Name }}{
                        {{ .EdgeIDPbStructField }}: {{ $varName }},
                    })
                }
            {{- end }}
        {{- end }}
        return v, nil
    }
{{ end }}

{{ define "to_proto_list_func" }}
    // ToProto{{ .EntType.Name }}List transforms a list of ent type to a list of pb type
    func ToProto{{ .EntType.Name }}List(e []*{{ .EntPackage.Ident .EntType.Name | ident }}) ([]*{{ .EntType.Name }}, error) {
        var pbList []*{{ .EntType.Name }}
        for _, entEntity := range e {
            pbEntity, err := ToProto{{ .EntType.Name }}(entEntity)
            if err != nil {
                return nil, {{ statusErrf "Internal" "internal error: %s" "err" }}
            }
            pbList = append(pbList, pbEntity)
        }
        return pbList, nil
    }
{{ end }}

{{ define "field_to_proto" }}
    {{- $id := .Ident -}}
    {{- $conv := newConverter .Field -}}
    {{- if $conv.ToProtoConversion }}
        {{- $id = print $conv.ToProtoConversion "(" $id ")" -}}
    {{- end }}
    {{- if $conv.ToEntMarshallerConstructor.GoName }}
        {{ .VarName }}, err := {{ $id }}.MarshalBinary()
        if err != nil {
            return nil, err
        }
    {{- else if and $conv.ToProtoValuer $conv.ToProtoConstructor.GoName }}
        {{ .VarName }}Value, err := {{$id}}.Value()
        if err != nil {
            return nil, err
        }
        {{ .VarName }}Typed, ok := {{ .VarName }}Value.({{ $conv.ToProtoValuer }})
        if !ok {
            return nil, {{ qualify "errors" "New" }}("casting value to {{ $conv.ToProtoValuer }}")
        }
        {{ .VarName}} := {{ ident $conv.ToProtoConstructor }}({{ .VarName}}Typed)
    {{- else if $conv.ToProtoValuer }}
        {{ .VarName }}Value, err := {{ $id }}.Value()
        if err != nil {
            return nil, err
        }
        {{ .VarName }}, ok := {{ .VarName }}Value.({{ $conv.ToProtoValuer }})
        if !ok {
            return nil, {{ qualify "errors" "New" }}("casting value to {{ $conv.ToProtoValuer }}")
        }
    {{- else if $conv.ToProtoConstructor.GoName }}
        {{ .VarName }} := {{ ident $conv.ToProtoConstructor }}({{ $id }})
    {{- else }}
        {{ .VarName }} := {{ $id }}
    {{- end }}
{{- end }}
