{{- /*gotype: entgo.io/contrib/entproto/cmd/protoc-gen-entgrpc.methodInput*/ -}}
{{ define "method_get" }}
    {{ $importPath := .G.File.GoImportPath }}
    {{- $idField := .G.FieldMap.ID -}}
    {{- $varName := $idField.EntField.Name -}}
    {{- $inputName := .Method.Input.GoIdent.GoName -}}
    var (
        err error
        get *{{ .G.EntPackage.Ident .G.EntType.Name | ident }}
    )
    {{- template "field_to_ent" dict "Field" $idField "VarName" $idField.EntField.Name "Ident" (print "req.Get" $idField.PbStructField "()") }}
    switch req.GetView() {
        case {{ $importPath.Ident ( print $inputName "_VIEW_UNSPECIFIED" ) | ident }}:
            fallthrough
        case {{ $importPath.Ident ( print $inputName "_BASIC" ) | ident }}:
            get, err = svc.client.{{ .G.EntType.Name }}.Get(ctx, {{ $varName }})
        case {{ $importPath.Ident ( print $inputName "_WITH_EDGE_IDS" ) | ident }}:
            get, err = svc.client.{{ .G.EntType.Name }}.Query().
            Where({{ qualify (print (unquote .G.EntPackage.String) "/" .G.EntType.Package) "ID" }}({{ $varName }})).
            {{ range .G.FieldMap.Edges }}
                {{- $et := .EntEdge.Type -}}
                With{{ .EntEdge.StructField }}(func(query *ent.{{ $et.Name }}Query) {
                    query.Select({{  qualify (print (unquote $.G.EntPackage.String) "/" $et.Package ) $et.ID.Constant  }})
                }).
            {{ end }}
            Only(ctx)
        default:
            return nil, {{ statusErr "InvalidArgument" "invalid argument: unknown view"}}
    }
    switch {
        case err == nil:
            return toProto{{ .G.EntType.Name }}(get)
        case {{ .G.EntPackage.Ident "IsNotFound" | ident }}(err):
            return nil, {{ statusErrf "NotFound" "not found: %s" "err" }}
        default:
            return nil, {{ statusErrf "Internal" "internal error: %s" "err" }}
    }
{{ end }}
