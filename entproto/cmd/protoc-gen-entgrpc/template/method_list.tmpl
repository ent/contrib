{{- /*gotype: entgo.io/contrib/entproto/cmd/protoc-gen-entgrpc.methodInput*/ -}}
{{ define "method_list" }}
    {{ $importPath := .G.File.GoImportPath }}
    {{- $inputName := .Method.Input.GoIdent.GoName -}}
    var (
        err error
        entList []*ent.{{ .G.EntType.Name }}
        pageSize int
    )
    pageSize = int(req.GetPageSize())
    switch {
    case pageSize < 0:
        return nil, {{ statusErrf "InvalidArgument" "page size cannot be less than zero" }}
    case pageSize == 0 || pageSize > entproto.MaxPageSize:
        pageSize = {{ qualify "entgo.io/contrib/entproto" "MaxPageSize" }}
    }
    listQuery := svc.client.{{ .G.EntType.Name }}.Query().
        Order(ent.Desc({{ qualify (print (unquote .G.EntPackage.String) "/" .G.EntType.Package) "FieldID" }})).
        Limit(pageSize + 1)
    if req.GetPageToken() != "" {
        bytes, err := {{ qualify "encoding/base64" "StdEncoding.DecodeString" }}(req.PageToken)
        if err != nil {
            return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
        }
        {{- if .G.EntType.ID.Type.Type.Integer }}
            token, err := {{ qualify "strconv" "ParseInt" }}(string(bytes), 10, 32)
            if err != nil {
                return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
            }

            {{- template "field_to_ent" dict "Field" .G.FieldMap.ID "VarName" "pageToken" "Ident" "token" }}
        {{- else if .G.EntType.ID.IsUUID }}
            pageToken, err := {{ qualify "github.com/google/uuid" "ParseBytes" }}(bytes)
            if err != nil {
                return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
            }
        {{- else if .G.EntType.ID.IsString }}
            pageToken := string(bytes)
        {{- end }}
        listQuery = listQuery.
            Where({{ qualify (print (unquote .G.EntPackage.String) "/" .G.EntType.Package) "IDLTE" }}(pageToken))
    }
    switch req.GetView() {
    case {{ $importPath.Ident ( print $inputName "_VIEW_UNSPECIFIED" ) | ident }}:
        fallthrough
    case {{ $importPath.Ident ( print $inputName "_BASIC" ) | ident }}:
        entList, err = listQuery.All(ctx)
    case {{ $importPath.Ident ( print $inputName "_WITH_EDGE_IDS" ) | ident }}:
        entList, err = listQuery.
            {{ range .G.FieldMap.Edges }}
                {{- $et := .EntEdge.Type -}}
                With{{ .EntEdge.StructField }}(func(query *ent.{{ $et.Name }}Query) {
                    query.Select({{  qualify (print (unquote $.G.EntPackage.String) "/" $et.Package ) $et.ID.Constant  }})
                }).
            {{ end }}
            All(ctx)
    }
    switch {
    case err == nil:
        var nextPageToken string
        if len(entList) == pageSize + 1 {
		nextPageToken = {{ qualify "encoding/base64" "StdEncoding.EncodeToString" }}(
		    []byte({{ qualify "fmt" "Sprintf" }}("%v", entList[len(entList)-1].ID)))
		entList = entList[:len(entList)-1]
        }
        protoList, err := toProto{{ .G.EntType.Name }}List(entList)
        if err != nil {
            return nil, {{ statusErrf "Internal" "internal error: %s" "err" }}
        }
        return &{{ $importPath.Ident ( print "List" .G.EntType.Name "Response" ) | ident }}{
            {{ .G.EntType.Name }}List: protoList,
            NextPageToken: nextPageToken,
        }, nil
    default:
        return nil, {{ statusErrf "Internal" "internal error: %s" "err" }}
    }
{{ end }}
