{{- /*gotype: entgo.io/contrib/entproto/cmd/protoc-gen-entgrpc.methodInput*/ -}}
{{ define "method_list" }}
    {{- $inputName := .Method.Input.GoIdent.GoName -}}
    type token struct {
        Id {{ idType }}
    }
    var (
        err error
        entList []*ent.{{ .G.EntType.Name }}
        pageSize int
    )
    pageSize = int(req.GetPageSize())
    switch {
    case pageSize < 0:
        return nil, {{ statusErrf "InvalidArgument" "page size cannot be less than zero" }}
    case pageSize == 0 || pageSize > entproto.MaxPageSize:
        pageSize = {{ qualify "entgo.io/contrib/entproto" "MaxPageSize" }}
    }
    listQuery := svc.client.{{ .G.EntType.Name }}.Query().
        Order(ent.Desc({{ qualify (print (unquote .G.EntPackage.String) "/" .G.EntType.Package) "FieldID" }})).
        Limit(pageSize + 1)
    if req.GetPageToken() != nil {
        buf := {{ qualify "bytes" "Buffer" }}{}
        buf.WriteString(req.GetPageToken().GetValue())
        var pageToken token
        err = {{ qualify "encoding/gob" "NewDecoder" }}(&buf).Decode(&pageToken)
        if err != nil {
            return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
        }
        listQuery = listQuery.
            Where({{ qualify (print (unquote .G.EntPackage.String) "/" .G.EntType.Package) "IDLTE" }}(pageToken.Id))
    }
    switch req.GetView() {
    case {{ $inputName }}_VIEW_UNSPECIFIED, {{ $inputName }}_BASIC:
        entList, err = listQuery.All(ctx)
    case {{ $inputName }}_WITH_EDGE_IDS:
        entList, err = listQuery.
            {{ range .G.FieldMap.Edges }}
                {{- $et := .EntEdge.Type -}}
                With{{ .EntEdge.StructField }}(func(query *ent.{{ $et.Name }}Query) {
                    query.Select({{  qualify (print (unquote $.G.EntPackage.String) "/" $et.Package ) $et.ID.Constant  }})
                }).
            {{ end }}
            All(ctx)
    }
    switch {
    case err == nil:
        var nextPageToken *{{ qualify "google.golang.org/protobuf/types/known/wrapperspb" "StringValue" }}
        if len(entList) == pageSize + 1 {
			buf := {{ qualify "bytes" "Buffer" }}{}
			var pageToken token
			pageToken.Id = entList[len(entList)-1].ID
			err = {{ qualify "encoding/gob" "NewEncoder" }}(&buf).Encode(&pageToken)
			if err != nil {
				return nil, status.Errorf(codes.Internal, "internal error: %s", err)
			}
			nextPageToken = {{ qualify "google.golang.org/protobuf/types/known/wrapperspb" "String" }}(buf.String())
			entList = entList[:len(entList)-1]
        }
        var pbList []*{{ .G.EntType.Name }}
        for _, entEntity := range entList {
            pbEntity, err := toProto{{ .G.EntType.Name }}(entEntity)
            if err != nil {
                return nil, {{ statusErrf "Internal" "internal error: %s" "err" }}
            }
            pbList = append(pbList, pbEntity)
        }
        return &List{{ .G.EntType.Name }}Response{
            {{ .G.EntType.Name }}List: pbList,
            NextPageToken: nextPageToken,
        }, nil
    default:
        return nil, {{ statusErrf "Internal" "internal error: %s" "err" }}
    }
{{ end }}