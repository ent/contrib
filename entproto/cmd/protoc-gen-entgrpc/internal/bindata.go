// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/enums.tmpl
// template/method_delete.tmpl
// template/method_get.tmpl
// template/method_mutate.tmpl
// template/service.tmpl
// template/to_ent.tmpl
// template/to_proto.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateEnumsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\x4f\x6b\xdc\x30\x10\xc5\xef\xfe\x14\x83\xe8\xc1\x86\x22\x4a\x7b\x6b\xe9\xad\x9b\x25\x90\x96\x85\xa6\xa7\x50\x82\x76\x3d\x4e\x45\x6c\x49\x95\xc7\x2e\x41\x9d\xef\x5e\x24\x7b\xd7\xf6\xfe\x29\xdb\xea\x64\x34\xf3\xde\x6f\xf4\xc6\x21\x40\x89\x95\x36\x08\x02\x4d\xd7\xb4\x02\x98\x33\x00\x80\x10\xe0\x95\xb7\x96\xe0\xfd\x47\x90\xb3\x4b\xaf\xcc\x13\x82\xbc\xd1\x58\x97\x9f\x95\x93\xab\xa8\xda\xd7\xf7\xc2\x68\x75\xff\xe2\x30\x89\x37\xdb\xd4\xfc\x09\xdb\x9d\xd7\x8e\xac\x97\x6b\xa4\xd5\xbe\xe3\x8c\xf2\x8b\x6a\x92\xd2\x79\x6d\x68\x98\x42\xae\x0c\xc5\x76\x99\x6a\xe2\x51\x4c\x8c\xe8\x96\x6e\x8f\x9c\xdc\x36\x32\x6e\x4b\x34\xe9\x0d\x83\xcd\x8d\xae\x51\xae\xed\x6d\xe3\xac\xa7\x8d\xa2\x1f\x72\x68\x98\xb8\x70\x3a\x11\xdd\xed\x54\x9b\x26\x6a\x8d\x7a\xc6\x73\x13\x9d\x6a\x16\x70\x34\x74\xe0\x8c\x6e\x72\xb3\xfd\x4a\xbe\xdb\x51\x0a\x67\x6e\x50\x75\x66\x07\x64\x37\xde\x92\x3d\x7a\x88\x5c\xdb\x11\x07\x39\x46\x92\x3e\xb8\x4e\x3c\x60\x2e\x66\xb5\x79\x0e\xcc\x10\x0e\x9c\x78\x74\x05\xfd\x6b\xb0\xcf\x71\xc8\x8b\xac\xc7\x5e\xd5\x1d\x3e\x84\x00\x3f\x3b\x55\xeb\xea\x05\x44\x4b\x5e\x9b\xa7\x56\x80\xb8\xb7\xdf\x9c\x43\x1f\xff\x9b\x7c\xb8\xcd\xb1\x28\xbe\x7f\x88\xa6\x4b\x56\x3c\x1e\xa9\xf3\xe6\x64\x3f\xbf\xc7\x61\x99\xf3\xbe\x58\x88\x38\xfb\x37\xf9\x9b\x49\xce\xd9\x71\xa4\x2b\x43\x17\x1f\xb9\xc8\x73\x99\x59\xf1\x97\xa4\xff\x2b\x4f\xa3\x1a\x7c\xd0\x86\xde\xbd\xcd\xf1\x8a\xa8\xce\xa1\x99\xf3\x4b\xfb\xb8\xb3\xbf\xc6\x7d\xf4\xc5\x15\x61\x0a\x91\x2d\xeb\x21\x00\x9a\x92\x39\x1b\x3e\x80\xf9\x4f\x00\x00\x00\xff\xff\xeb\x69\x69\x55\x25\x04\x00\x00")

func templateEnumsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateEnumsTmpl,
		"template/enums.tmpl",
	)
}

func templateEnumsTmpl() (*asset, error) {
	bytes, err := templateEnumsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/enums.tmpl", size: 1061, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateMethod_deleteTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\x4d\x6f\xdb\x30\x0c\xbd\xf7\x57\x10\xc4\x36\x24\x45\x23\xdf\x03\xe4\x96\xb4\xf0\x61\x5d\x81\x0d\xbb\x06\x8a\x4c\xbb\x42\x15\xca\x95\xe9\xb4\x81\xa6\xff\x3e\x48\xce\xc7\x86\x6d\xc0\x08\x04\x78\x31\x1f\xdf\x23\x29\xc6\xb8\x80\xea\xb6\xf3\x72\xec\x69\x09\xc4\xd2\x79\x65\x7d\x65\x3c\x4b\xb0\xbb\x8a\x58\xfa\xe0\xc5\x57\x66\xdf\x54\x05\x99\x45\x47\xbc\xc8\xc4\xd0\x1b\xb5\x27\x79\xf6\x4d\xcd\xfd\x28\xb7\x15\x2c\x52\xba\x89\x11\x1a\x6a\x2d\x13\xe0\x94\xdc\x36\xe4\x48\x08\x21\xa5\x1b\x00\x80\xec\xf8\xc1\x36\xf7\x96\x5c\x03\xcb\x15\xa8\x07\x55\xf0\x67\xdd\xab\x7a\x5d\x34\x2e\xb4\x83\x0e\x8f\x7a\x4f\x99\x76\x2e\x51\x1b\x96\x09\x94\xcc\x99\x7e\xd0\x01\x28\x94\x9f\x0f\x17\x01\xa1\x7d\xef\xb4\x10\x60\x9b\x4b\xb6\xe2\xb7\xc4\x82\xd0\x58\x23\x80\x45\x06\xaf\xcd\xe0\xf7\xc9\x0e\xff\x65\x86\x75\x53\xca\x67\x7d\xb0\x2c\x80\x81\x5e\xd5\x03\xc9\x2f\xfc\xa7\xdd\x57\x09\xa3\x91\x93\xe0\x6c\x8e\xf3\xf3\xdc\xb9\xbb\x15\x0c\x07\xa3\x8c\xb3\xc4\xa2\x62\xcc\xb3\x6f\x58\xbe\x1d\x7b\x9a\x0c\x52\x52\xeb\xb2\xad\x2f\x4c\xf5\x7a\x16\xe3\x75\x05\x29\xcd\xd5\xe6\x9d\xcc\xcc\xc8\xfb\xbc\x08\x0e\x6f\x56\xcc\x33\xc4\xf2\x27\x87\xd1\x03\x4d\x36\x2b\x60\xeb\x96\x97\x44\x8e\x40\x32\x06\x86\x4f\x31\xc2\xeb\xa8\x9d\x6d\x8f\x80\x9d\xf7\x9d\x23\xd5\x79\xa7\xb9\x53\x3e\x74\xd3\x13\xef\xc6\xb6\xca\xf7\x30\x54\x2f\xec\xdf\xb8\xa2\x7d\x2f\xc7\x7e\x87\x80\x9b\x8c\xf2\x4b\xc6\x74\x97\x2d\x7e\xb7\xbe\x0c\xf4\xa4\xcd\x8b\xee\x48\x95\x75\x01\xd6\xc3\xa3\x97\x7b\x3f\x72\x83\xf0\x03\x6c\xf9\x98\xd2\x8c\x42\x98\xff\xb5\x47\xb6\xee\x2e\x8b\x0d\xa2\x65\x1c\x36\x21\xb4\x80\x57\x05\x64\x2f\xd0\x66\xbc\x84\x8f\x03\x02\x52\x08\x78\xda\x71\x8e\x86\x5a\x3d\x3a\xf9\x6f\xe5\x9a\x85\x02\x6b\x87\x80\xf6\x04\xa7\x2b\xfa\x53\xbe\x5c\x37\x71\x03\x29\xfd\x0c\x00\x00\xff\xff\x12\x7a\xff\x3d\x38\x03\x00\x00")

func templateMethod_deleteTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateMethod_deleteTmpl,
		"template/method_delete.tmpl",
	)
}

func templateMethod_deleteTmpl() (*asset, error) {
	bytes, err := templateMethod_deleteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/method_delete.tmpl", size: 824, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateMethod_getTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x4d\x6f\xf2\x46\x10\xbe\xe7\x57\x8c\x56\x54\xb2\xd1\xcb\x72\x47\xca\x21\x0d\x0e\xf5\x21\x29\x15\x69\x72\x44\x1b\x7b\x6c\x56\x31\xbb\x66\x3d\x86\x22\xd7\xff\xbd\xda\xf5\x07\x36\x21\x6a\xfb\x5a\x02\x86\xf1\x7c\x3c\xf3\xec\x33\x5b\x55\x33\x98\x4f\x53\x4d\xe7\x1c\x17\x80\x8a\x52\xcd\xa5\x9e\x47\x5a\x91\x91\x1f\x73\x54\x94\x1b\x4d\x7a\x1e\xed\xe3\xb9\xb3\xa2\x59\x8a\x6a\x66\x03\x4d\x1e\xf1\x3d\xd2\x4e\xc7\xa1\xca\x4b\x9a\xce\x61\x56\xd7\x77\x55\x05\x31\x26\x52\x21\xb0\xe6\xe5\x36\x45\x62\x50\xd7\x77\x00\x00\xb6\xdd\x44\xc6\x4f\x12\xb3\x18\x16\xf7\xc0\x57\xdc\xd9\xcf\x22\xe7\xe1\xd2\x15\xe8\xc3\x8e\xc2\xbc\x88\x3d\xda\xb0\x2e\x85\x07\x8a\x1a\xc3\xbd\x19\x85\x4b\x0b\xa2\x4b\xe0\xcf\xae\x37\x77\xc8\xf8\x4a\x87\x31\x2a\xfb\x3b\x4a\x3b\x0a\x03\x9e\xb3\xec\x83\xc6\xd8\x8f\x36\xbd\x27\x45\x82\x69\x55\x59\x90\x81\xa2\xb5\x88\x3e\x45\x8a\xdc\x95\x6a\x7d\xaf\xe7\x1c\x1b\x28\x7f\x83\x74\xfe\xb6\xb4\xdf\xe3\x22\xdc\xe7\x99\x20\x04\x96\x58\xe0\x5b\xd2\x5b\x54\xc4\x20\x96\x11\x01\x73\xc3\xb0\x0b\x25\xec\xad\x19\x9a\x7d\x37\x32\x73\xed\x19\x78\xb9\x91\x8a\x80\x19\x3c\xf0\x95\x25\xb8\x8f\x5f\x7f\x6c\xc8\x94\x11\xb5\x05\x3d\x9f\xf9\x1d\xaa\xe2\x24\x29\xda\x41\x9b\xf3\x26\xf1\xe4\xf9\x50\xf5\xf3\x46\xa2\x40\xa8\xaa\x21\x95\x75\xbd\x7d\x0b\x83\xf7\xed\x9f\x2f\x9b\x75\xf0\x18\x3e\x85\xc1\xf2\xc7\xd7\x90\x5f\x1f\x36\xe1\xe3\xa2\xaf\xd3\x72\xf7\xc3\x51\x7a\x0f\xc5\x31\xe2\x51\x26\xed\x01\xf4\x64\x5e\x88\xab\x6b\x8b\xc5\x8b\xe8\xaf\xa6\x70\x77\xea\x75\xed\xff\x0b\xb0\xf7\xf0\xf5\xb7\x6d\xb0\x5c\x05\xdb\x70\xb9\xf9\xf9\xee\x7f\x94\x68\xce\x9e\xcf\x47\x05\xde\x77\x68\xd0\xab\x2a\x38\x94\x22\x93\xc9\xb9\xe3\xdb\x2b\xd5\xa1\xd4\x84\x57\x9a\xd8\x90\x91\x2a\xf5\x81\xcd\xd9\xb0\x45\xfb\xda\x07\x16\x2e\xed\x0a\x78\x57\x03\x5e\x35\xad\x2a\x30\x42\xa5\x38\xda\x8a\x20\x4e\xb1\xe8\x0e\x70\x1c\x3d\x83\x09\x92\x53\x7b\xa0\xc8\xc6\x71\xdb\xb5\x97\xf7\x68\x1e\x49\x3b\x3b\x7e\x17\x38\x94\x48\x5d\x7b\x49\xa9\x22\xef\x60\x89\x80\x69\xcb\xd4\x04\xa9\xa3\xc8\x31\x34\x14\xca\xf0\x71\x59\x7c\x83\x19\x46\x64\xe7\xfb\x96\xb1\xc9\xf7\x94\xd9\x5e\xad\x1f\x7c\xf7\x2f\x5c\xf2\x47\xad\x0a\x12\x8a\x60\x24\x85\xee\xa9\xbf\x72\x87\x2a\xbe\xe6\xe9\x77\x95\x9d\xad\xb4\x2e\xf9\x31\x26\xa2\xcc\x68\x2c\x17\x83\x54\x1a\x05\x4a\x66\x4e\x83\x05\x09\x2a\x8b\xc0\x18\x60\xa1\x3a\x8a\x4c\xc6\x0f\x26\x2d\xf7\x6e\xef\x98\x6c\x3c\x20\x5a\xd7\x02\x4a\xf5\xa9\xf4\x49\xc1\x51\xe2\x89\xb5\x00\x46\xfb\x76\xb5\x61\x4e\x97\xf7\xb6\xdb\x4d\x14\xa4\xd7\xf6\x9e\xbd\x29\x56\x2f\x45\xfa\xba\x16\xb7\xee\x27\x16\x16\x2f\x9a\x9e\x74\xa9\x62\x36\xb8\x9c\x3c\x34\xc6\xff\x6f\xc3\x27\xc0\x2e\x15\x98\xd2\x04\x89\xb5\x17\xf0\x4b\xc1\x80\xa1\x31\x6c\xc8\xf6\xff\xe2\x35\xb1\xc4\x12\x1a\x25\x32\xc7\x68\x63\x36\xb7\xef\x8d\xfa\xcd\xf7\xb0\x98\x92\xd9\x5d\x7f\xe2\xff\x04\x00\x00\xff\xff\x37\x9b\x35\xaa\xc3\x06\x00\x00")

func templateMethod_getTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateMethod_getTmpl,
		"template/method_get.tmpl",
	)
}

func templateMethod_getTmpl() (*asset, error) {
	bytes, err := templateMethod_getTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/method_get.tmpl", size: 1731, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateMethod_mutateTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x4d\x6f\xe3\x36\x10\xbd\xef\xaf\x98\x12\x2d\x60\x2f\x12\xfa\x6e\x20\x87\x60\xe3\x06\x3a\x6c\x37\x40\xba\x7b\x35\x18\x69\xa4\x10\x2b\x51\x32\x39\x4a\x37\x50\xf5\xdf\x8b\x21\x6d\x59\x5f\x5e\xc7\x6d\x23\x20\xb1\x24\xce\x3c\xbe\x37\xf3\x48\xb1\x69\xae\x61\xf5\x31\x2b\xe9\xb5\xc2\x35\xa0\xa1\xac\x94\xba\x5c\xc5\xa5\x21\xab\x9f\x56\x68\xa8\xb2\x25\x95\xab\xb8\x48\x56\xfe\x2e\xbe\xce\xd0\x5c\x73\xa0\xad\x62\x59\x20\x3d\x97\x49\x64\xaa\x9a\x3e\xae\xe0\xba\x6d\x3f\x34\x0d\x24\x98\x6a\x83\x20\xc2\xe0\xb6\xa8\x49\x11\x0a\x68\xdb\x0f\x00\x00\xfe\x1f\x4f\xfb\xab\x4e\x7e\xd7\x98\x27\xb0\xbe\x01\x79\x2f\xfd\xfd\x67\x55\xc9\xe8\xce\x03\x75\x61\x2f\xca\xfe\xa1\x0a\xe4\xb0\x43\x8a\xdc\x18\x0a\x37\x7e\x64\x10\xae\x99\xcc\x21\x41\x7e\xf6\x1c\xa4\x67\x28\xef\xcb\x28\x41\xc3\xbf\xd3\xb4\x40\x76\x9c\x37\x17\x69\x71\xf7\x4d\x59\x8e\x8a\x55\x81\x39\x73\xdf\x18\xfa\xf3\xb5\xc2\x31\x9b\x2e\xb6\x6d\x39\xdc\xe2\x4e\xde\x23\x35\xcd\x24\xa5\x6d\x17\xcb\x6e\x02\x9d\x02\xee\xc6\x0c\xc4\x27\x8b\xfd\x2a\xf2\x55\x30\xa8\x7b\x89\x65\x9c\x6b\x96\x35\x0b\x2c\x43\x62\x0f\x1f\x73\x87\x7d\x98\x71\x91\x83\xaa\x45\x65\xb5\xa1\x4e\x81\xd8\x8a\x13\xd5\x5f\x76\x82\x7b\x8d\x65\x9c\x11\x00\x4b\xef\x61\x3c\x3c\x3d\x92\xad\xe3\x00\x04\x62\xb1\x04\x31\x01\x22\x2c\xaa\x5c\x11\x82\x48\x39\x6a\x4b\xe5\x16\x0d\x09\x48\x74\x4c\x20\x7c\xe6\x11\x11\xc4\xb7\xa0\x41\x1c\xd5\x08\xdf\x6f\x1f\x73\x79\xe1\xbe\x56\x89\x22\xfc\x62\x30\xba\x5b\x70\x2f\x0f\xa0\x6d\xdb\xab\xa5\xe9\x80\xf9\xd1\x2a\x93\xe1\xc0\xcc\xfe\xc6\x4d\xca\xed\xbe\xeb\x2a\x2a\x78\x65\x3c\xe5\xbe\xe8\xca\x24\xb0\xe0\xbe\xf7\x8d\x28\x02\x05\x01\x4b\x38\xd6\xfc\x98\x36\xa9\x3b\xa3\x32\x58\x69\x41\x46\x2e\xba\x0b\x75\x19\x4d\x36\xce\xd2\x29\x98\x92\xf6\xc9\xbd\xb1\x37\x5b\xc3\x7b\x03\x7e\x66\x8a\xb7\x18\xe3\xac\x21\x7a\x7c\x8f\x73\x7d\xa9\x48\x97\x46\xe5\x63\xe2\x7c\xe9\xd4\x2f\x41\xdf\x7a\xf8\xe5\x06\x8c\xce\xa1\x99\xc0\xf5\x3a\x78\xb1\xf5\xe4\x05\x9e\xf3\xbe\x93\x8f\x61\xf9\x77\xfc\xfb\x92\xdb\x76\xd6\x66\xff\x4a\xfb\x54\xd0\x48\xe7\x8c\x79\xcf\x7a\x79\x93\x64\x38\xb1\xf2\x9e\x12\x8f\xc9\xaf\x46\xef\x6a\xfc\x8f\x26\xf2\x48\xff\x97\x87\xf6\xef\x19\x33\xba\x9b\x8c\xce\x1b\xec\xdd\x5b\xef\x15\x0e\x3b\x7f\x62\x8b\x81\x13\x5b\x36\x5f\x69\x69\x61\x7b\x05\x9a\xd0\x6f\x67\xa1\x5d\x83\x6f\xce\xe1\x63\x33\xd4\xcd\xdf\x9a\xd1\x3a\x98\x74\xa9\xf7\x71\x9b\xe7\x3b\x9f\xde\x6f\x8d\x60\x62\x67\xca\x7f\x02\xe7\x5d\x1a\x10\x9a\x70\x9b\x24\x4d\x03\x4e\x9b\xac\xce\x95\x3d\xdd\x0d\xf7\xd3\xa5\xf8\xd6\x65\x64\xd1\x5d\x01\x5a\x7f\x56\x28\xe4\xa3\x7a\xc1\x45\x4c\x3f\x02\x96\xfb\x4b\x53\xfc\xdc\x6b\x44\xac\x1c\xfa\xe0\x1b\xbf\x55\xad\x07\x33\xfa\xa3\x57\x87\x45\xe5\x03\x3f\xcf\x1f\x24\x2c\xba\x21\x5b\x3e\x4f\x58\x3b\xbf\x03\x06\x96\x54\x5b\xc3\x83\x57\xec\x1f\x47\x8a\x6a\xb7\xb1\x36\x05\x11\x19\x42\x6b\x54\x2e\x40\xe8\xfd\x2d\x63\x95\x76\x0d\xbf\x39\x01\x02\xad\x15\xe3\x42\x0f\x9f\xf6\xe0\x7b\xfe\x46\xe7\x43\xbd\x4d\x03\xbb\x5a\xe5\x3a\x7d\x05\xd1\x1d\x3e\xd1\xd0\x2a\xd1\x2a\xc7\x98\x56\x6e\x97\xf3\x5f\x66\x55\xf5\x2c\x40\x44\x2e\xec\x31\x9f\x4a\xe3\xc8\x2a\x6d\x68\xc3\x74\x98\xc4\x02\xad\x5d\xae\xe7\x26\x9f\x53\x76\x9b\x5b\x54\xc9\xeb\xe6\x87\x76\xc4\x4a\x54\x78\x06\xf4\x2f\x7a\xf2\x7a\xea\x0e\x8c\x43\xd1\x1f\x54\xfc\x5d\x65\x28\xbd\xe5\x98\xd9\x84\xd3\xdf\xa0\xfd\xd8\xa5\xdc\x22\xf3\xa2\x72\x9d\xdc\xda\xac\x2e\xbc\x9d\x85\x0e\x6f\x40\xed\x5f\xcd\xf3\x4b\x30\x55\x75\x4e\x17\xcc\x73\xbe\xbb\x7b\x78\x7f\xae\x0f\xce\xfe\x27\x00\x00\xff\xff\x81\x35\xc3\x24\x32\x0c\x00\x00")

func templateMethod_mutateTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateMethod_mutateTmpl,
		"template/method_mutate.tmpl",
	)
}

func templateMethod_mutateTmpl() (*asset, error) {
	bytes, err := templateMethod_mutateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/method_mutate.tmpl", size: 3122, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateServiceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\x4d\x6f\xdb\x3c\x0c\xc7\xef\xfe\x14\x84\x11\x3c\x70\x82\x44\xbe\x07\x78\x4e\x49\x1b\xe4\xd0\x64\xc0\xda\x73\xa0\x4a\x8c\x27\xcc\x96\x1c\x99\x4e\x1b\x78\xfe\xee\x83\x24\xe7\xc5\xab\xb3\x76\x27\x4b\xe4\x8f\xe4\x9f\x14\xdd\x34\x33\x48\x27\x99\xa1\x53\x89\x73\x40\x4d\x99\x61\xca\xa4\xc2\x68\xb2\xea\x35\x45\x4d\xa5\x35\x64\x52\x51\xc8\xd4\x9f\xc4\x2c\x43\x3d\x73\xa0\x2d\x05\xab\xd0\x1e\x95\xc0\x15\x6a\xb4\x9c\x8c\x9d\xa4\x30\x6b\xdb\x28\x4d\x61\x61\x24\x42\x16\xec\x28\xe1\xf5\x04\x03\xe1\xb0\xdc\xc2\x66\xfb\x0c\x0f\xcb\xf5\x33\x8b\x4a\x2e\x7e\xf2\x0c\xa1\x69\x80\x3d\xaa\x1c\xd9\xca\x7c\x0b\xa6\x0d\x2f\x10\xda\x36\x72\x89\x9d\xf7\x7b\x28\xcb\x56\xa6\xf3\x80\x2a\xca\x1c\x0b\xd4\x54\x0d\x03\xce\x80\x36\x72\x6d\xde\xc9\x50\x91\xad\x05\x41\x13\x01\x00\x88\x5c\xa1\x26\x98\x38\xf4\x41\x53\x27\x83\xad\xa5\xb3\xc6\x0b\xef\x8d\xe1\x17\x28\x6f\x68\x5b\x1f\xf4\xa2\x2f\x2a\x50\xfe\x4d\x45\x68\x64\x83\x6f\xc3\x4a\x2c\x52\x6d\x75\x05\x1c\x34\xbe\x0d\xab\x8d\xf6\xb5\x16\x77\x33\x24\xff\x2a\x7f\x1c\xd0\x8f\x52\xc2\x34\x82\x20\xf8\x6f\x90\x09\xc8\x75\x68\xf3\xee\x3b\xf5\xf6\xd6\x35\xdb\x34\x40\x58\x94\x39\x27\x84\x18\x75\x5d\x54\x31\x30\xff\x9e\x3d\x0f\x99\x9d\xdf\x91\x9d\x6b\xee\x86\xb0\x5c\x67\x78\xad\xfc\x84\xf4\xc3\xc8\xea\x3c\x75\xb7\xc1\x23\x25\x1f\x15\xe6\x12\xe6\xff\xc3\x88\xf9\xe3\x13\x2f\xd9\x7a\xe9\xb7\xf1\x42\x1d\xb9\xf5\xa2\x1d\xd5\x45\xb8\xf1\x84\x83\xf7\xf4\xf0\xc2\x17\x3a\x47\x9c\x3b\xee\x21\x4a\x97\x35\x5d\x88\xb5\xbb\xb1\x95\xf1\x73\xbe\xe5\x7d\x40\xb7\xbb\xf7\x76\x76\x74\x6f\x5d\x58\x2f\xca\xa7\xf2\xaf\x9f\x54\x47\xe1\xdf\x6d\x20\x72\xdc\x2f\x95\x08\x7a\x77\x96\x43\xcd\x73\xb5\x3f\x41\xec\xfe\x6f\x7c\xa7\x18\xe2\xc5\xf9\xd4\xb6\x53\xb0\x78\xf0\x19\xc3\x5e\xf4\xfb\xf1\x59\x93\x1b\xef\xb6\xa6\xbe\x7b\x0a\x68\xad\xb1\x63\xb8\xae\x84\x1b\x92\xda\x03\x1e\x7a\xd3\x8c\x57\xe8\x0b\x5e\xb0\x80\xde\xac\x42\x80\x77\x99\xe3\x92\x70\x01\x36\xbe\x0d\x71\x99\x31\xaf\x70\x28\xfd\x12\x73\x24\xfc\x52\x05\xd9\xa1\x9f\x17\x31\x16\x92\x3f\x0b\x2d\x2c\x72\xc2\x78\xfc\xd1\xf3\x52\xca\xe0\xf9\x82\x86\xa2\x26\xfe\x89\x06\x2d\xcf\xa6\xd6\xfd\x11\xdd\xfd\x77\x00\x00\x00\xff\xff\x9d\x23\xa1\xb1\xbd\x05\x00\x00")

func templateServiceTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateServiceTmpl,
		"template/service.tmpl",
	)
}

func templateServiceTmpl() (*asset, error) {
	bytes, err := templateServiceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/service.tmpl", size: 1469, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateTo_entTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x94\x4f\x6f\xd3\x40\x10\xc5\xef\xfd\x14\x83\x05\x28\xad\xc8\xfa\x1e\x94\x03\x54\xa5\xea\x01\x2e\xfc\xb9\x56\xcb\x7a\x1c\x46\x72\x66\xa2\xd9\x89\x51\xb5\xda\xef\x8e\x76\x53\x05\xa7\xd0\x9a\x03\x87\xfa\x34\xde\x99\xf7\x9e\xe6\xe7\x3f\x29\x2d\xa1\xbd\xd8\x88\xdd\xed\x70\x05\xc8\xb6\x11\x47\xd2\x06\x61\x53\xfa\xde\x22\xdb\x4e\xc5\xa4\x0d\xdb\xae\xad\x55\x58\x6e\x90\x97\x65\x50\x77\xc1\x45\xd4\x91\x02\x5e\x23\xa3\x7a\x13\xbd\x68\x61\x99\xf3\x59\x4a\xd0\x61\x4f\x8c\xd0\xf4\x84\x43\x77\x6b\x72\x8b\x6c\x0d\xe4\x7c\x06\x00\x50\x52\x5f\x52\x07\xab\x35\xb8\x9b\x0e\xd9\xaa\xea\xd8\x09\xc2\x63\xe9\x31\xfe\xbc\x14\x1e\x51\x0d\x15\xdc\x87\xe2\x74\x32\x48\xfd\x61\xd6\x7d\x91\x2b\xb6\x8f\xd2\x51\x4f\xa8\xc7\x91\x69\xd2\x1a\x76\x4a\x6c\xb5\x7e\x4a\x53\xe6\x91\x9f\x8c\xf1\x1a\x7f\xf8\x61\x40\xbd\x14\x8e\xa6\xfb\x60\xa2\xee\x5a\x3e\xf9\x2d\xc2\x24\x79\xf4\x0a\x29\x81\xfb\xe6\xf5\xbe\x55\x6e\xa9\x6e\x3b\x67\x37\xb1\xa1\x1e\x50\xb5\xd0\x58\xbc\x3e\xb5\x3b\x77\x5f\x79\x7b\x50\xbf\x27\xf6\x7a\xb7\x28\x01\x65\xc1\x9c\xcf\xdf\x56\xd5\x8b\x35\x30\x0d\x90\x8e\x6e\xe5\x52\xb4\xbd\x72\x69\xbc\x29\x82\x68\xde\xf6\xf1\x4a\xb5\x87\xe6\x86\x47\x3f\x50\xf7\x4e\x37\xfb\x6d\x7d\x5e\x0d\x1d\x4e\xc0\xdf\x1f\xad\xe0\x55\x6c\xa0\x41\xd5\x66\xba\xec\x04\xde\x10\xf1\x01\xb1\xcf\xc1\x33\xcf\xe1\x7a\x80\x6a\xb5\xfe\x2b\xad\x3f\xad\x20\xe7\xf4\x6f\xb4\x8a\x76\x82\x08\x9e\x15\xa3\xff\x01\xe7\x94\xca\xe2\xf7\xcb\x30\x13\x3c\xa2\x46\x12\x9e\x0d\x7c\x4c\xf5\x68\xd2\xac\x61\x15\x9d\x7c\x77\xf5\xe7\x71\x2c\x7f\x05\x00\x00\xff\xff\xda\x56\x49\xac\x9e\x04\x00\x00")

func templateTo_entTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateTo_entTmpl,
		"template/to_ent.tmpl",
	)
}

func templateTo_entTmpl() (*asset, error) {
	bytes, err := templateTo_entTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/to_ent.tmpl", size: 1182, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateTo_protoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\x51\x6f\xda\x30\x10\x7e\xe7\x57\x5c\xad\x6a\x02\x04\xce\x3b\x13\x2f\x6b\xbb\xaa\x0f\xad\x2a\xad\xeb\x2b\x32\xc9\x25\xb5\x1a\xec\xd4\x31\x54\x28\xf3\x7f\x9f\x6c\x27\x90\x84\xa4\x05\xad\xd5\x36\x9e\x12\x73\xf7\xdd\xdd\xf7\x7d\xb6\x53\x14\x53\x08\xc6\x89\xd4\xdb\x0c\x67\x80\x42\x27\x92\x72\x19\x84\x52\x68\xc5\x97\x01\x0a\x9d\x29\xa9\x65\x10\xae\xa2\xc0\x3d\x85\xd3\x04\xc5\xd4\x06\xaa\x2c\xa4\x39\xaa\x0d\x0f\xf1\x1a\x05\x2a\xa6\xa5\x1a\x07\x30\x35\x66\x50\x14\x10\x61\xcc\x05\x02\xd1\x72\xe1\xf2\x16\xf1\x5a\x84\x04\x8c\x19\x00\x00\x04\x01\x68\x79\x6f\xd7\x8b\x02\xe8\x95\xd0\x0f\xdb\x0c\xe9\x1d\x5b\x21\x18\x03\x5a\x31\x91\xc7\x52\xad\x72\xd0\x4f\x68\xbb\x02\xdb\x1f\x68\xe9\xde\xb3\xa5\x7b\x75\x40\x16\xf5\x0d\xa8\x21\xc2\xb8\x5c\xbe\x67\xe1\x33\x4b\x90\xde\x44\x16\xaf\x19\xf8\x0b\xb8\x5b\x35\x66\x04\xc3\x71\x07\xce\x04\x50\x29\xa9\x46\x50\xb8\xaa\xf6\xb7\x81\xd9\x1c\xbe\x74\xc4\x16\x66\x17\x63\xd9\x55\x4c\x24\x08\xf4\x3b\xc7\x34\xba\x65\x99\x7f\xc8\x2b\x22\xea\x91\xe7\x1b\xa6\x1c\xc6\x6c\x0e\x21\x5b\x61\xea\xa0\x5d\x3c\xfd\xa1\xd5\x3a\xf4\xcf\x8e\xe1\x83\x5c\x1e\xd9\xb4\x4c\x71\xa1\x81\x20\x25\x27\xe4\xf2\xb8\x16\x7c\xc7\xd3\x94\x2d\x53\x6c\x37\x68\x7f\x3c\x86\xa2\x70\xa5\x8c\x81\xb3\x39\x08\x9e\xd6\x08\x69\xb7\xb3\xeb\x66\x4c\xdc\x7b\x57\x69\x14\x51\x17\x13\x1a\x57\x59\xca\x34\x02\x89\x6d\x53\x8b\xca\x44\x04\x22\x1e\x6a\x20\xae\x55\x02\x14\xc8\xa3\xa7\x8c\xec\xc9\x23\x4e\x60\x52\xb6\xd9\x80\xde\x50\x2b\xd7\xfd\xb2\x4e\x88\x31\x30\x77\x53\x55\xf9\x7f\x42\xd0\xbb\x03\xf6\x2c\xb5\x3d\x72\x15\x25\x78\x82\x45\x6c\x38\x75\x16\xbc\xb9\x3c\xd5\x29\x51\x52\x7a\xe5\x34\x10\x51\x36\xb1\xcb\x3c\xd2\x64\x2e\xf6\xa7\xe0\x2f\xeb\x3e\x87\x61\x94\x58\x60\xf4\x24\x58\xc5\x7c\x31\x63\xbe\xba\xff\x7a\x7d\xf7\xc9\xe6\x69\x98\xa8\x6a\x09\xf6\x47\xc0\x9e\xbf\xea\x1c\xe8\x4c\xf7\x5d\x82\x9b\xee\xe6\xb2\xed\xc5\x59\xcb\x8a\x93\x4e\x8c\xa3\x8c\x97\xe6\x9d\x0c\xc7\x52\xc1\x62\x52\xb1\xec\x8d\xd7\xc1\xf5\xbf\xc3\x2f\xcb\x32\x14\xd1\xb0\xb1\x3c\xf9\x2b\xac\x8f\x3e\x64\xbf\x2b\xd4\x6b\x25\x60\x33\xb1\x36\x1e\x78\x94\xa2\xa8\xa2\xea\x57\x67\x9b\xde\x12\xa4\xb6\x89\xcb\xcb\x6c\x5a\xff\x27\x94\xc2\x5d\x4d\x02\x5f\x2f\xa4\xd8\xa0\xd2\xa8\xca\xa3\xa5\x11\xc8\x63\x1f\x4b\x1f\xfc\xed\xe9\x83\x73\x2e\x45\x7b\x80\xfa\x61\xde\x97\x42\x86\x5e\x54\x32\x22\x8d\x2a\xb5\xe1\x5b\x45\xaf\x84\xbe\x65\x2a\x7f\x62\x69\x8a\xea\x42\x8a\xdc\x49\x22\x15\xbd\x96\xed\x73\xd8\x2a\xf7\xb8\x57\xc7\xde\xc5\x76\xc2\xdd\x5d\x44\x4b\xa0\x6f\x5c\x30\xb5\x1d\xee\x75\xb2\xc7\x89\x52\xdd\x47\x46\xa9\x83\xe0\xa9\x03\x1c\x34\x35\xdd\x6d\x21\x1e\x03\x13\x51\x73\xee\x47\x96\xae\x51\x1d\x70\x71\xf4\x04\x2e\xbf\x36\xc6\x39\x8f\x8c\xa1\x6e\xf5\x43\x9a\x3f\xac\x68\x77\x48\x34\x01\xf9\x5c\xf2\xd6\x6e\x86\x0e\x2d\x99\x1d\x33\x1a\xd3\x68\xe8\x4c\x3e\xbf\xd1\x49\x51\xc0\xcb\x9a\xa5\x3c\xde\x02\x71\xdf\x4b\x39\x01\x72\x87\xaf\xd6\xba\x43\x12\xb2\x5c\x73\x91\xc0\xc6\x22\xdb\x6f\xb9\xde\x92\x64\xf4\xf6\x40\xc6\x94\x63\xf8\xaf\xb6\x3e\x1d\x6c\xd5\x46\x96\x63\x61\x74\xa0\x6f\x77\x13\x47\x6a\x57\x59\xf0\x33\xd5\xfb\x7f\x85\xeb\xa5\xf9\x94\xed\x72\x8a\xd8\x5e\x8d\x96\xc6\xef\x21\xd7\x6e\xa3\xda\x99\x55\x7b\xfc\x1d\x00\x00\xff\xff\x68\xe4\x2e\xe0\x26\x0d\x00\x00")

func templateTo_protoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateTo_protoTmpl,
		"template/to_proto.tmpl",
	)
}

func templateTo_protoTmpl() (*asset, error) {
	bytes, err := templateTo_protoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/to_proto.tmpl", size: 3366, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/enums.tmpl":         templateEnumsTmpl,
	"template/method_delete.tmpl": templateMethod_deleteTmpl,
	"template/method_get.tmpl":    templateMethod_getTmpl,
	"template/method_mutate.tmpl": templateMethod_mutateTmpl,
	"template/service.tmpl":       templateServiceTmpl,
	"template/to_ent.tmpl":        templateTo_entTmpl,
	"template/to_proto.tmpl":      templateTo_protoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"enums.tmpl":         &bintree{templateEnumsTmpl, map[string]*bintree{}},
		"method_delete.tmpl": &bintree{templateMethod_deleteTmpl, map[string]*bintree{}},
		"method_get.tmpl":    &bintree{templateMethod_getTmpl, map[string]*bintree{}},
		"method_mutate.tmpl": &bintree{templateMethod_mutateTmpl, map[string]*bintree{}},
		"service.tmpl":       &bintree{templateServiceTmpl, map[string]*bintree{}},
		"to_ent.tmpl":        &bintree{templateTo_entTmpl, map[string]*bintree{}},
		"to_proto.tmpl":      &bintree{templateTo_protoTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
