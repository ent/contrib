// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/enums.tmpl
// template/service.tmpl
// template/to_ent.tmpl
// template/to_proto.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateEnumsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\x4f\x6b\xdc\x30\x10\xc5\xef\xfe\x14\x83\xe8\xc1\x86\x22\x4a\x7b\x6b\xe9\xad\x9b\x25\x90\x96\x85\xa6\xa7\x50\x82\x76\x3d\x4e\x45\x6c\x49\x95\xc7\x2e\x41\x9d\xef\x5e\x24\x7b\xd7\xf6\xfe\x29\xdb\xea\x64\x34\xf3\xde\x6f\xf4\xc6\x21\x40\x89\x95\x36\x08\x02\x4d\xd7\xb4\x02\x98\x33\x00\x80\x10\xe0\x95\xb7\x96\xe0\xfd\x47\x90\xb3\x4b\xaf\xcc\x13\x82\xbc\xd1\x58\x97\x9f\x95\x93\xab\xa8\xda\xd7\xf7\xc2\x68\x75\xff\xe2\x30\x89\x37\xdb\xd4\xfc\x09\xdb\x9d\xd7\x8e\xac\x97\x6b\xa4\xd5\xbe\xe3\x8c\xf2\x8b\x6a\x92\xd2\x79\x6d\x68\x98\x42\xae\x0c\xc5\x76\x99\x6a\xe2\x51\x4c\x8c\xe8\x96\x6e\x8f\x9c\xdc\x36\x32\x6e\x4b\x34\xe9\x0d\x83\xcd\x8d\xae\x51\xae\xed\x6d\xe3\xac\xa7\x8d\xa2\x1f\x72\x68\x98\xb8\x70\x3a\x11\xdd\xed\x54\x9b\x26\x6a\x8d\x7a\xc6\x73\x13\x9d\x6a\x16\x70\x34\x74\xe0\x8c\x6e\x72\xb3\xfd\x4a\xbe\xdb\x51\x0a\x67\x6e\x50\x75\x66\x07\x64\x37\xde\x92\x3d\x7a\x88\x5c\xdb\x11\x07\x39\x46\x92\x3e\xb8\x4e\x3c\x60\x2e\x66\xb5\x79\x0e\xcc\x10\x0e\x9c\x78\x74\x05\xfd\x6b\xb0\xcf\x71\xc8\x8b\xac\xc7\x5e\xd5\x1d\x3e\x84\x00\x3f\x3b\x55\xeb\xea\x05\x44\x4b\x5e\x9b\xa7\x56\x80\xb8\xb7\xdf\x9c\x43\x1f\xff\x9b\x7c\xb8\xcd\xb1\x28\xbe\x7f\x88\xa6\x4b\x56\x3c\x1e\xa9\xf3\xe6\x64\x3f\xbf\xc7\x61\x99\xf3\xbe\x58\x88\x38\xfb\x37\xf9\x9b\x49\xce\xd9\x71\xa4\x2b\x43\x17\x1f\xb9\xc8\x73\x99\x59\xf1\x97\xa4\xff\x2b\x4f\xa3\x1a\x7c\xd0\x86\xde\xbd\xcd\xf1\x8a\xa8\xce\xa1\x99\xf3\x4b\xfb\xb8\xb3\xbf\xc6\x7d\xf4\xc5\x15\x61\x0a\x91\x2d\xeb\x21\x00\x9a\x92\x39\x1b\x3e\x80\xf9\x4f\x00\x00\x00\xff\xff\xeb\x69\x69\x55\x25\x04\x00\x00")

func templateEnumsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateEnumsTmpl,
		"template/enums.tmpl",
	)
}

func templateEnumsTmpl() (*asset, error) {
	bytes, err := templateEnumsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/enums.tmpl", size: 1061, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateServiceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x5b\x4f\xe3\xb8\x17\x7f\xe7\x53\x9c\xbf\xc5\x7f\x94\x22\x48\xdf\x91\x78\x60\x69\x61\xf3\x30\xc0\xaa\xc0\x3c\x56\x26\x39\x0d\xd6\xa4\x4e\xea\x38\x85\xaa\x9b\xef\xbe\x3a\x76\xda\xdc\x43\x87\x61\x76\x27\xd2\x68\x12\xfb\xf8\xf8\x5c\x7e\xe7\x56\xb6\xdb\x33\x18\x9f\x84\xb1\xde\x24\x78\x0e\x28\x75\x18\xbb\x22\x1e\xfb\xb1\xd4\x4a\x3c\x8f\x51\xea\x44\xc5\x3a\x1e\xfb\xcb\x60\x6c\xde\xfc\xb3\x10\xe5\x19\x11\xaa\xc4\x77\x53\x54\x6b\xe1\xe3\x0d\x4a\x54\x5c\xc7\xea\x64\x0c\x67\x79\x7e\x44\x5c\x8f\xe1\xfc\x02\x5c\xf3\x39\x1e\xc3\x55\x1c\x20\x84\x96\x0c\x03\x78\xde\x40\x07\x37\x98\xdc\xc1\xed\xdd\x03\x4c\x27\xde\x83\x7b\x94\x70\xff\x3b\x0f\x11\xb6\x5b\x70\xaf\x45\x84\xee\x4d\x7c\x6f\x97\x6e\xf9\x12\x21\xcf\x8f\x88\x31\xed\xce\xac\x14\xee\x4d\x5c\xec\x80\x58\x26\x11\x2e\x51\xea\xb4\x9b\x80\x16\x50\x1d\x91\xd6\x3d\x1c\x52\xad\x32\x5f\xc3\xf6\x08\x00\xc0\x8f\x04\x4a\x0d\x27\x44\x3a\x95\xba\x10\xc3\xf5\x02\x5a\x65\x57\x66\x97\xc1\xdf\x20\xcc\x42\x9e\x9b\x43\x8f\x72\x2f\x05\x06\x43\x52\x58\x45\x6e\xf1\xb5\x5b\x12\x85\x3a\x53\x32\x05\x0e\x12\x5f\xbb\xa5\x3d\x5a\x64\xd2\xef\xe5\xe0\xfc\xa8\xf8\x23\x4b\xda\x16\xc5\x5a\xc3\x0a\x04\x5f\x3a\x69\x2c\x49\x69\xb4\xf3\xe2\xff\x53\xb3\x9e\x93\xb2\xdb\x2d\x68\x5c\x26\x11\xd7\x08\x0c\x65\xb6\x4c\x19\xb8\xc6\x9f\xb5\x1d\x1d\xcf\x0d\x46\xe6\xa4\x5c\x85\x42\x71\x19\x62\x79\xf3\x57\xd4\x2f\x71\x90\xee\xac\x6e\xa0\x27\x82\x6b\x81\x51\x40\x08\x3c\x76\xcd\xeb\x57\x9e\xb8\xde\xc4\xa0\x71\x4f\xb5\xe6\xca\x08\x4d\x54\xc5\x09\x32\x8f\x7d\x31\x3b\x35\xf2\xa5\xb9\x68\x77\x62\xa7\x71\x8d\x44\xc8\x24\xd3\x7b\x0a\x8f\xbe\xdc\x9b\xd8\xd8\xb9\x4a\x6f\x0e\x14\xd8\xed\xc3\xec\x71\x1f\x5c\x6a\x87\x0c\x27\xe3\x7c\x27\x5d\xfb\xc6\x6d\x1d\x07\x47\xf5\x9b\x1c\x5f\xbf\xd1\xca\x2a\xe3\x91\x58\x6c\x80\x51\xb4\xe3\x9b\x66\xc0\xae\x76\x6f\x79\x7e\x0a\x0a\x57\x86\xa3\x85\x45\x5d\x1d\xc3\xd5\xa9\xec\xde\x65\xba\xbe\x7d\x0a\xa8\x54\xac\x46\x50\x22\x82\xa8\x17\x80\xab\x9a\x2d\xd9\x0d\x9a\xfb\xf6\x54\xf4\xac\xb9\x02\xa7\xb6\x42\x0f\x2a\x65\x99\xb6\x76\x42\xd4\x85\xf2\x2d\x7c\x9b\xa5\x87\x4d\x82\xd6\xa5\x8d\x20\xdd\x3d\xa3\xda\x57\x0d\x87\x0b\xc2\xc3\x5c\xc7\x73\x13\x25\x81\xf0\x35\x30\x83\x11\x56\x02\x8d\x3d\x59\x2c\xb1\x3e\x24\x31\x23\x0c\x03\x27\x51\x82\x82\x4e\xe1\xca\x35\x8a\xef\xe9\xef\x9f\x67\x26\xe5\x14\x0c\x9d\x11\x1b\x35\x85\x4c\x5f\x85\xf6\x5f\xa0\x38\xfb\x24\xf0\xd5\xa9\x9a\x77\x1f\x78\x3c\x35\x59\xad\x02\xc7\x3c\x9f\x3f\x79\xd3\x6f\xf3\xc7\xdb\xd9\xfd\xf4\xca\xbb\xf6\xa6\x93\xd3\x36\xc9\x1f\x97\x33\xef\xea\xbc\xc5\xaf\x30\xb0\x71\x28\x5c\x40\xba\xf6\x5d\x1b\xd3\xee\xce\xe2\xa5\x79\xf3\x9c\x44\x23\x84\x59\xfe\xbb\x18\xcb\xf3\xd1\x81\x72\x7e\xf3\x1e\xfe\x9c\x4f\x27\x37\xd3\xb9\x37\x99\xfd\xb4\x30\x7f\x65\xa8\x36\xce\xc8\xed\xe4\x43\xcf\xb7\x17\x54\xe8\x54\xa2\xa1\xf0\x90\x93\xc9\x55\x16\x6b\xac\x43\x6a\xa6\x95\x90\xe1\x08\xd8\x98\x55\x2e\x2b\x76\x47\xc0\xbc\x09\x41\xd9\x69\x68\x3e\x70\xfd\x3e\x9f\x55\xf2\xd4\x34\x08\x31\x6d\xfa\xbe\x7d\xf0\x0c\x8e\x51\x9b\x44\x33\x95\x9a\xce\xb8\x24\xcc\x3e\x21\xf5\x2a\x2c\xf4\x4b\x51\x08\xcc\xa1\x2a\xea\xf2\xdc\xa1\x64\xe2\xac\xc8\x6a\x70\xb2\xb3\x2a\xea\x9d\x3d\x8d\x39\xbb\x30\xd7\x7c\x0c\x07\x77\x86\x11\xfa\x9a\xcc\xf1\x01\xf3\xa2\xde\x19\x16\x46\xe6\xcb\x9b\xb8\x57\xb1\x4c\x35\x97\x1a\x3a\x01\x55\x7d\xf2\x61\xa3\xa3\x0c\x86\x2c\x7c\x27\xa3\x0d\x81\xb8\x7d\x47\x80\x0b\x9e\x45\xba\x1b\x98\x45\x65\x94\x22\x32\xe8\x4f\x35\xd7\x59\x3a\x55\x0a\x98\x27\xd7\x3c\x12\xc1\xa5\x0a\xb3\xa5\x49\x04\x4c\xd8\x15\xe0\xc5\xd2\x39\x64\xf2\xbb\x8c\x5f\x25\xac\x05\xbe\xb2\x86\x70\x9d\x89\xa0\x27\xf4\x4d\x64\x5c\x90\x14\x83\x52\xea\xf8\x9e\xca\x6b\x57\xd8\x38\x21\xea\x81\x78\xed\x68\x22\xbc\xf4\x36\xd6\xd7\x71\x26\x83\x6a\x23\xe1\xa0\x52\xa3\x1f\x33\xd5\x02\x58\xc9\x89\xc9\x58\xc3\x82\xde\xcf\xe1\xff\x29\x03\x86\x4a\x99\x5a\xf1\x39\x6e\x59\x90\x5f\x34\x2a\xc9\x23\xe3\x10\xfb\x6a\x4b\x4c\xe3\xc2\x7e\x5f\x54\x99\x4b\x11\x55\x8b\x1d\x46\x29\x76\x55\xbc\x09\x46\xa8\xb1\xb3\xe8\x75\x97\xb8\xdf\xb4\x1e\x1d\x96\x82\xad\xb6\x77\x12\xbd\x49\x33\x31\xba\xd3\x37\xf4\xdb\x71\xf6\x29\xf0\xfe\x52\xed\x70\xc2\x38\x0e\x23\x74\xc3\x38\xe2\x32\x74\x63\x15\xda\x61\xe6\x39\x5b\x8c\x69\x06\x48\xc7\x26\xf2\xc6\xb8\x4c\xf4\x26\x79\x66\xc0\xa6\xf4\x46\x1e\xda\xe6\x75\xb7\xd6\x44\xf9\xef\x83\xa1\x23\x87\xfd\xca\x50\xe8\x8d\x84\x0a\xda\x63\x05\x4e\x13\xf1\x57\x0a\xb9\x46\x36\x6a\xef\x3c\x26\x81\xdd\x69\xb0\x36\xf5\x4d\xe1\xea\x89\x2b\xaa\x71\x3e\x5f\x62\xd4\x04\x57\xb3\xd4\x91\x3b\x8a\x23\x79\x4e\xa7\x0a\x54\x77\xa6\xb8\x56\xc7\xd7\x11\xa8\x85\xd8\x5d\x95\x62\x49\xfc\xdf\x83\xbe\x3d\xdf\xbe\xca\x98\xaa\x83\x69\x73\x2c\xb1\x5a\x17\x31\xba\x53\x8d\xcd\xfb\xa2\x7a\xd4\x59\xfc\x8b\x89\x88\xf8\x35\x18\xbd\x17\xf1\xc0\x7a\x18\x7e\x3c\x1b\xed\x94\xdb\xe5\x1f\x12\xec\xa3\xd6\xb5\xd0\xe9\x4c\x2c\x2d\x83\xb7\xcb\x7d\x57\xe7\x65\x5e\x3a\x5b\x2f\x63\xc4\xf4\xbb\x48\xbc\xe5\x32\xd3\xfc\x39\x32\xfe\xe1\x32\x00\xa7\x85\x9a\x02\xd2\x30\x82\xd2\x3d\xe5\xb1\x5e\x17\x11\x77\x62\x1a\x2b\x70\xbd\xd4\x9b\x58\xdb\x35\x2e\xed\xf1\x87\x58\x00\x65\x07\xcb\xa3\xa7\xaf\x39\x08\x5c\x06\x5d\x70\x08\xac\x0e\x81\xd6\xc1\x90\x2a\xd5\x28\xaf\xbe\x4b\xb4\x88\x29\x09\x0d\xf4\x69\x62\x61\x07\x08\xf2\x2e\xfc\xcf\x14\x85\x9e\xe6\x74\xb8\xe7\x3b\x14\xd2\xee\x07\xb0\x4c\xcf\xd2\x9d\x99\x34\x54\x6a\xd7\x68\xbb\xdf\x9b\x95\x3e\x6a\xa0\x5e\x75\x7b\x8c\xd1\x1b\x2b\x07\x46\x50\xef\xec\x52\x0a\x6f\xa6\x8e\x47\x29\x56\x59\x67\x0e\x84\x1f\x87\xaa\xe1\xf8\xd9\x48\x2d\xd6\x89\xb7\x37\x69\x37\x43\x43\x30\xfe\xd7\xa0\xd4\x31\xc0\xbd\x93\x0b\x61\xb8\x00\xd1\xb3\x88\x15\xcc\x4f\x41\x68\x34\x59\xd8\xba\xb8\x56\x5a\x8b\x9a\xda\xb0\x19\xd5\xd4\x81\xc9\xb0\xe6\xd3\xd2\xa9\x3d\x6a\x0c\xb3\xa9\x3a\x92\x91\xa0\xef\x38\x6b\x90\xdf\xaf\x75\x97\x75\xd9\x65\x10\x50\xb7\x25\x64\x98\x45\x5c\xf5\xfb\x2e\x3d\x28\x11\xfc\x5c\xd8\x2a\x4c\xed\xaf\x27\xe7\x17\x04\x26\xbe\xc6\xcf\xee\xc0\x4d\x6f\xbd\xbf\x63\x68\xce\x54\x98\x76\xab\x48\xcd\x98\x52\xc3\x29\x1d\x3e\x7f\xb4\xeb\xb7\x70\xe5\xb2\x42\xbd\xa1\xa9\x60\x3f\x78\xec\xff\xa2\x82\x52\x8f\x03\xc1\x23\xf4\xf5\x38\x5d\x45\xf4\x2f\x54\x3c\x79\x61\x34\x2e\xd8\x6c\x68\x7e\xdc\x50\x5c\x48\x3d\x25\x31\xd9\x87\x67\x86\xcb\x48\x21\x0f\x36\xd3\x37\x91\x6a\xd2\x94\xdb\x6f\x40\xb3\x30\x3c\x3d\x0c\xcf\x35\x2d\x11\x7f\x76\xbc\x39\xe4\x77\x91\xdf\x72\xd8\x29\xe3\x2a\x3f\x2a\xbf\xff\x09\x00\x00\xff\xff\x3f\x6c\xe6\xf0\x4f\x1b\x00\x00")

func templateServiceTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateServiceTmpl,
		"template/service.tmpl",
	)
}

func templateServiceTmpl() (*asset, error) {
	bytes, err := templateServiceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/service.tmpl", size: 6991, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateTo_entTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x93\x4f\x6f\x13\x31\x10\xc5\xef\xf9\x14\xc3\x0a\x50\x5a\x11\xef\x3d\x28\x07\xa8\x4a\xd5\x03\x5c\xf8\x73\xad\x8c\x77\x36\x8c\xb4\x99\x89\xc6\x93\x45\x95\xe5\xef\x8e\xec\x40\x48\xda\x2a\xcb\x81\x43\x7d\x9a\xf5\xcc\x7b\x4f\xfe\x79\x9d\xd2\x02\xda\xcb\xb5\xd8\xfd\x16\x97\x80\x6c\x6b\x71\x24\x6d\x10\x36\xa5\xef\x2d\xb2\x6d\x55\x4c\xda\xb0\xe9\xda\x5a\x85\xc5\x1a\x79\x51\x06\x75\x1b\x5c\x44\x1d\x29\xe0\x0d\x32\xaa\x37\xd1\xcb\x16\x16\x39\xcf\x52\x82\x0e\x7b\x62\x84\xa6\x27\x1c\xba\x3b\x93\x3b\x64\x6b\x20\xe7\x19\x00\x40\x49\x7d\x49\x1d\x2c\x57\xe0\x6e\x3b\x64\xab\xaa\x43\x27\x08\x8f\xa5\xc7\xf8\xf3\x4a\x78\x44\x35\x54\x70\x1f\x8a\xd3\xc9\x20\xf5\xfb\x59\xf7\x45\xae\xd9\x3e\x4a\x47\x3d\xa1\x1e\x46\x8e\x93\x56\xb0\x55\x62\xab\xf5\x39\x4d\x99\x47\x3e\x1b\xe3\x35\xfe\xf0\xc3\x80\x7a\x25\x1c\x4d\x77\xc1\x44\xdd\x8d\x7c\xf2\x1b\x3c\x89\x1e\xbd\x42\x4a\xe0\xbe\x79\xad\xbd\x9c\xcb\x27\xd5\xe3\x4e\xf9\x1d\xd9\x50\x0f\xa8\x5a\x70\xcc\x5f\x9f\xda\x5d\xb8\xaf\xbc\xd9\xab\xdf\x13\x7b\xbd\x9f\x97\x80\x72\xc2\x9c\x2f\xde\x56\xd5\x8b\x15\x30\x0d\x90\x0e\x6e\x65\x29\xda\x4e\xb9\x34\xde\x14\x41\x34\x6f\xbb\x78\xad\xda\x43\x73\xcb\xa3\x1f\xa8\x7b\xa7\xeb\xdd\xa6\x5e\x58\x43\xfb\x1d\xf0\xbf\xb7\x96\xf0\x2a\x36\xd0\xa0\xea\xe1\x36\xcb\x3a\xa2\x37\x44\x7c\x80\xec\x73\xf0\xcc\x93\xbc\x1e\xb0\x5a\xae\x9e\xc4\xf5\xd8\x0b\x72\x4e\xff\x86\xab\x68\x8f\x18\xc1\xb3\x82\xf4\x5f\xe8\x9c\x62\x99\xff\xfd\x1d\x26\x92\x47\xd4\x48\xc2\xd3\x89\x4f\xcb\xce\x44\x4d\x3b\x56\xd5\xa3\xc7\xf7\xa7\xce\x79\xf6\x2b\x00\x00\xff\xff\xb7\xcd\xb1\x85\xa4\x04\x00\x00")

func templateTo_entTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateTo_entTmpl,
		"template/to_ent.tmpl",
	)
}

func templateTo_entTmpl() (*asset, error) {
	bytes, err := templateTo_entTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/to_ent.tmpl", size: 1188, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateTo_protoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\x4d\x4f\xeb\x3a\x10\xdd\xf7\x57\x0c\x16\x7a\x6a\xab\xd6\xd9\xf7\xa9\x9b\x07\x3c\xc4\x02\x84\x74\xb9\x6c\x2b\x93\x4c\x82\x45\x6a\x07\xc7\x2d\xaa\x72\xfd\xdf\xaf\xc6\x49\xc8\x47\x53\x68\xa5\xfb\x99\x95\xe3\xcc\x9c\x99\x39\x67\xc6\x4e\x51\xcc\x21\x98\x26\xda\xee\x32\x5c\x00\x2a\x9b\x68\x2e\x75\x10\x6a\x65\x8d\x7c\x0a\x50\xd9\xcc\x68\xab\x83\x70\x1d\x05\x7e\x15\xce\x13\x54\x73\x32\x34\x59\xc8\x73\x34\x5b\x19\xe2\x35\x2a\x34\xc2\x6a\x33\x0d\x60\xee\xdc\xa8\x28\x20\xc2\x58\x2a\x04\x66\xf5\xca\xfb\xad\xe2\x8d\x0a\x19\x38\x37\x02\x00\x08\x02\xb0\xfa\x9e\xf6\x8b\x02\xf8\x95\xb2\x0f\xbb\x0c\xf9\x9d\x58\x23\x38\x07\xd6\x08\x95\xc7\xda\xac\x73\xb0\xcf\x48\x59\x01\xe5\x07\x56\xfb\xf7\xec\xc9\xbf\x7a\x20\x42\xfd\x00\x6a\x8c\x30\xad\xb6\xef\x45\xf8\x22\x12\xe4\x37\x11\xe1\x75\x0d\xbf\x81\xf4\xbb\xce\x4d\x60\x3c\x1d\xc0\x99\x01\x1a\xa3\xcd\x04\x0a\x1f\x95\x9e\x2d\x2c\x96\xf0\xcf\x80\x6d\xe1\xde\x6d\x8a\x02\x8c\x50\x09\x02\xff\x5f\x62\x1a\xdd\x8a\xac\x5c\xe4\x35\x0f\x8d\xe1\x1c\xce\xb7\xc2\x78\x88\xc5\x12\x42\xb1\xc6\xd4\x23\x7b\x7b\xfe\xc5\x9a\x4d\x58\xae\x3d\xc1\x7b\xbe\x32\x22\xb7\xcc\x48\x65\x81\x21\x67\x47\xfb\x82\xc5\x75\x96\x0a\x8b\xc0\x62\x32\x59\xd5\x82\x31\x88\x64\x68\x81\x79\x47\x06\x1c\xd8\x63\x99\x1f\x6b\x32\x65\x9e\x4c\xe6\xc3\xf7\x90\xb7\x9c\xa8\xb9\x7f\x6a\x47\x77\x0e\x96\x14\xf2\xdd\xdf\xb9\x51\x9b\x2b\x54\x1d\x98\x01\xf6\xae\xa2\x04\x4f\x20\x8f\xcc\xb9\xd7\xe6\xe6\xf2\x54\x0e\xa3\xa4\x62\xf1\x34\x10\x55\x25\xf1\xee\xf9\x09\xfd\x32\x6e\x4c\xbf\x2a\xf9\xba\xc1\x7e\x79\xf4\xc8\x18\x30\x4a\x08\x17\x4b\x0e\x88\xdd\x32\x96\x73\xff\xfa\x6f\x67\x4b\x50\x32\x6d\x35\xe8\xaf\xd1\xb9\xa3\x77\x9d\x11\x34\x93\xd1\xb0\x57\x8f\xc7\xa0\x7b\x95\xa4\x2f\xee\xe6\xb2\xdf\x36\x8b\x5e\xd7\xcc\x06\x31\xf6\x13\xdb\x63\x1b\xd3\x7c\x90\xdf\x58\x1b\x58\xcd\x6a\x8e\xcb\xae\x1b\x60\xfa\x8f\x61\x57\x64\x19\xaa\x68\xdc\xd9\x9e\xfd\x16\xce\x27\x47\x90\xbe\x37\xd6\xbd\x1d\x83\x76\x63\x14\x6c\x67\xd4\xc1\xa3\x12\xa3\xb1\x6a\xdf\x26\x7d\x72\x2b\x90\xd6\xf8\x56\xe7\xfb\xbc\xfd\x25\xd4\xca\x9f\xd6\x0a\xdf\x2e\xb4\xda\xa2\xb1\x68\xaa\x43\xa5\x63\x28\xe3\xd2\x96\x3f\x94\x17\x4a\x69\x9c\x4b\xad\x3a\x93\x5b\x47\xab\xcf\x8a\x43\x3e\x6c\x5c\x6a\xca\x26\xac\x13\x86\xea\x3a\x10\xf6\x4a\xd9\x5b\x61\xf2\x67\x91\xa6\x68\x2e\xb4\xca\xbd\x24\xda\xf0\x6b\xed\x65\xe8\xa6\x01\xfc\xb1\x91\x87\x6e\x28\x2a\x92\x54\xf3\x8d\xc4\x2b\xa4\xff\xa4\x12\x66\x37\x6e\x84\xa2\xc3\xc4\x98\xe1\x03\xa3\x92\x42\xc9\xd4\x03\x8e\xba\xa2\xfa\xec\x69\x84\x64\x0c\x42\x45\xdd\xca\x1f\x45\xba\x41\xb3\xc7\xc6\xf1\x25\x78\x80\x56\x1d\xe7\x32\x72\x8e\xfb\xdd\x1f\x92\xfd\x7e\x44\x9a\x91\x68\x06\xfa\xa5\x22\xae\x9f\x0c\x1f\x13\x9b\x03\x45\x3a\xd7\x49\xe8\x4c\xbf\x7c\x90\x49\x51\xc0\xeb\x46\xa4\x32\xde\x01\xf3\xbf\x11\x39\x03\x76\x87\x6f\xd4\xbe\x63\x16\x8a\xdc\x4a\x95\xc0\x96\x90\xe9\x17\xe7\x60\x48\x36\xf9\xb8\x20\xe7\xaa\x32\xca\x9f\x99\x43\x42\x50\xd4\x8e\x97\x67\x61\xb2\x27\xf0\x50\x12\xc7\x8b\x57\x37\xe1\xcf\x94\xef\xef\x55\xee\x20\xcf\x27\x0d\xcc\x29\x72\x97\x72\xf4\x54\xfe\x14\xba\x75\x25\xb5\x4f\xae\x7a\xed\xdc\xe8\x7b\x00\x00\x00\xff\xff\x43\x89\x12\xa4\x41\x0c\x00\x00")

func templateTo_protoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateTo_protoTmpl,
		"template/to_proto.tmpl",
	)
}

func templateTo_protoTmpl() (*asset, error) {
	bytes, err := templateTo_protoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/to_proto.tmpl", size: 3137, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/enums.tmpl":    templateEnumsTmpl,
	"template/service.tmpl":  templateServiceTmpl,
	"template/to_ent.tmpl":   templateTo_entTmpl,
	"template/to_proto.tmpl": templateTo_protoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"enums.tmpl":    &bintree{templateEnumsTmpl, map[string]*bintree{}},
		"service.tmpl":  &bintree{templateServiceTmpl, map[string]*bintree{}},
		"to_ent.tmpl":   &bintree{templateTo_entTmpl, map[string]*bintree{}},
		"to_proto.tmpl": &bintree{templateTo_protoTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
