// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/enums.tmpl
// template/service.tmpl
// template/to_proto.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateEnumsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\x4f\x6b\xdc\x30\x10\xc5\xef\xfe\x14\x83\xe8\xc1\x86\x22\x4a\x7b\x6b\xe9\xad\x9b\x25\x90\x96\x85\xa6\xa7\x50\x82\x76\x3d\x4e\x45\x6c\x49\x95\xc7\x2e\x41\x9d\xef\x5e\x24\x7b\xd7\xf6\xfe\x29\xdb\xea\x64\x34\xf3\xde\x6f\xf4\xc6\x21\x40\x89\x95\x36\x08\x02\x4d\xd7\xb4\x02\x98\x33\x00\x80\x10\xe0\x95\xb7\x96\xe0\xfd\x47\x90\xb3\x4b\xaf\xcc\x13\x82\xbc\xd1\x58\x97\x9f\x95\x93\xab\xa8\xda\xd7\xf7\xc2\x68\x75\xff\xe2\x30\x89\x37\xdb\xd4\xfc\x09\xdb\x9d\xd7\x8e\xac\x97\x6b\xa4\xd5\xbe\xe3\x8c\xf2\x8b\x6a\x92\xd2\x79\x6d\x68\x98\x42\xae\x0c\xc5\x76\x99\x6a\xe2\x51\x4c\x8c\xe8\x96\x6e\x8f\x9c\xdc\x36\x32\x6e\x4b\x34\xe9\x0d\x83\xcd\x8d\xae\x51\xae\xed\x6d\xe3\xac\xa7\x8d\xa2\x1f\x72\x68\x98\xb8\x70\x3a\x11\xdd\xed\x54\x9b\x26\x6a\x8d\x7a\xc6\x73\x13\x9d\x6a\x16\x70\x34\x74\xe0\x8c\x6e\x72\xb3\xfd\x4a\xbe\xdb\x51\x0a\x67\x6e\x50\x75\x66\x07\x64\x37\xde\x92\x3d\x7a\x88\x5c\xdb\x11\x07\x39\x46\x92\x3e\xb8\x4e\x3c\x60\x2e\x66\xb5\x79\x0e\xcc\x10\x0e\x9c\x78\x74\x05\xfd\x6b\xb0\xcf\x71\xc8\x8b\xac\xc7\x5e\xd5\x1d\x3e\x84\x00\x3f\x3b\x55\xeb\xea\x05\x44\x4b\x5e\x9b\xa7\x56\x80\xb8\xb7\xdf\x9c\x43\x1f\xff\x9b\x7c\xb8\xcd\xb1\x28\xbe\x7f\x88\xa6\x4b\x56\x3c\x1e\xa9\xf3\xe6\x64\x3f\xbf\xc7\x61\x99\xf3\xbe\x58\x88\x38\xfb\x37\xf9\x9b\x49\xce\xd9\x71\xa4\x2b\x43\x17\x1f\xb9\xc8\x73\x99\x59\xf1\x97\xa4\xff\x2b\x4f\xa3\x1a\x7c\xd0\x86\xde\xbd\xcd\xf1\x8a\xa8\xce\xa1\x99\xf3\x4b\xfb\xb8\xb3\xbf\xc6\x7d\xf4\xc5\x15\x61\x0a\x91\x2d\xeb\x21\x00\x9a\x92\x39\x1b\x3e\x80\xf9\x4f\x00\x00\x00\xff\xff\xeb\x69\x69\x55\x25\x04\x00\x00")

func templateEnumsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateEnumsTmpl,
		"template/enums.tmpl",
	)
}

func templateEnumsTmpl() (*asset, error) {
	bytes, err := templateEnumsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/enums.tmpl", size: 1061, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateServiceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\x41\x6b\xe3\x30\x14\x84\xef\xfe\x15\x83\x0f\xcb\x6e\x58\x4b\xf7\x5c\x93\x6c\xc8\x25\x59\x68\x7a\x0e\x8e\xfc\x6a\x44\x6d\xc9\xc8\xcf\x0d\x41\xd5\x7f\x2f\x92\x42\x4b\xa9\x53\xe8\xc9\x66\x66\xf4\xfc\xcd\xb3\xbc\xaf\x20\x17\xad\xe5\xeb\x40\x4b\x90\xe1\xd6\x0a\x6d\xa5\xb2\x86\x9d\x3e\x4b\x32\x3c\x38\xcb\x56\xaa\xbe\x91\xe9\x4d\x55\x2d\x99\x2a\x06\xdd\xa0\xc4\x48\xee\x45\x2b\xda\x92\x21\x57\xb3\x75\x0b\x89\x2a\x84\x42\x4a\xac\x6c\x43\x68\xb3\x4e\x0d\xce\x57\xcc\x1c\xc7\xfa\x80\xfd\xe1\x88\xcd\x7a\x77\x14\xc5\x50\xab\xe7\xba\x25\x78\x0f\xf1\x4f\x77\x24\xb6\xf6\x7f\x96\xf6\x75\x4f\x08\xa1\x88\x83\xa3\xfb\x90\x3f\x2b\xb6\xf6\xe6\x40\xf7\x43\x47\x3d\x19\x1e\xe7\x03\x51\x20\x57\xc4\x9a\x77\x26\x8c\xec\x26\xc5\xf0\x05\x00\xa8\x4e\x93\x61\x2c\x62\x74\x63\xf8\x86\x21\x76\x4d\x54\xcb\x55\x72\x4b\xbc\x42\x27\x21\x84\x74\xe8\xd1\xbc\x53\x50\xf3\x1d\x45\x2e\xb2\xa7\xcb\x3c\x89\x23\x9e\x9c\x19\x51\xc3\xd0\x65\x9e\xb6\x78\x9a\x8c\xba\x3b\xe1\xf7\x4f\xf1\xff\xe4\xe8\x57\x94\xbc\x8d\x0c\x84\x5f\xb3\x99\x1c\xf9\x58\xda\xf2\xf6\xfc\x9b\xf4\x10\xcb\x7a\x0f\xa6\x7e\xe8\x6a\x26\x94\x64\xa6\x7e\x2c\x21\xd2\xff\xfc\xe4\xb0\x3d\xa5\x3b\x72\x8a\xe5\x72\xe2\x2d\x00\x00\xff\xff\x3b\x61\x5e\xb8\x9f\x02\x00\x00")

func templateServiceTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateServiceTmpl,
		"template/service.tmpl",
	)
}

func templateServiceTmpl() (*asset, error) {
	bytes, err := templateServiceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/service.tmpl", size: 671, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateTo_protoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\x4d\x6f\xdb\x30\x0c\xbd\xe7\x57\xb0\x42\x31\x24\x41\x22\xdf\x33\xe4\xb2\xb6\x2b\x7a\x68\x51\x60\x5d\xaf\x81\x6a\xd1\xae\x50\x47\x72\x65\xc5\x45\xe0\xe9\xbf\x0f\x92\xed\xc4\x5f\x69\x13\x60\xc5\x36\x9f\x64\x99\x7c\x24\xdf\xa3\x28\x17\xc5\x1c\x82\x69\xac\xcc\x36\xc5\x05\xa0\x34\xb1\xa2\x42\x05\xa1\x92\x46\x8b\xa7\x00\xa5\x49\xb5\x32\x2a\x08\xd7\x3c\xf0\xab\x70\x1e\xa3\x9c\x3b\x43\x9d\x86\x34\x43\x9d\x8b\x10\xaf\x51\xa2\x66\x46\xe9\x69\x00\x73\x6b\x47\x45\x01\x1c\x23\x21\x11\x88\x51\x2b\xef\xb7\x8a\x36\x32\x24\x60\xed\x08\x00\x20\x08\xc0\xa8\x7b\xb7\x5f\x14\x40\xaf\xa4\x79\xd8\xa6\x48\xef\xd8\x1a\xc1\x5a\x30\x9a\xc9\x2c\x52\x7a\x9d\x81\x79\x46\x97\x15\xb8\xfc\xc0\x28\xff\x9e\x3e\xf9\x57\x0f\xe4\x50\xdf\x81\x1a\x23\x4c\xab\xed\x7b\x16\xbe\xb0\x18\xe9\x0d\x77\x78\x6d\xc3\x5f\x20\xfc\xae\xb5\x13\x18\x4f\x07\x70\x66\x80\x5a\x2b\x3d\x81\xc2\x47\x75\x4f\x0e\x8b\x25\x7c\x19\xb0\x2d\xec\xce\xc6\xb1\xab\x99\x8c\x11\xe8\x77\x81\x09\xbf\x65\x69\xb9\xc8\x6a\x22\x9a\x96\xe7\x39\xd3\x1e\x63\xb1\x84\x90\xad\x31\xf1\xd0\xde\x9e\xfe\x30\x7a\x13\x96\x6b\xcf\x70\xcf\x57\x70\xe7\x96\x6a\x21\x0d\x10\xa4\xe4\x68\x5f\x30\xb8\x4e\x13\x66\x10\x48\xe4\x4c\x56\xb5\x62\x04\xb8\x08\x0d\x10\xef\x48\x80\x02\x79\x2c\xf3\x23\xfb\x4c\x89\x67\x93\xf8\xf0\x1d\xe4\x9c\x3a\x6e\xee\x9f\x9a\xd1\xad\x85\xa5\x0b\xb9\xf3\xb7\x6d\xae\x50\xf2\xee\x56\x97\xbe\x2b\x1e\xe3\x09\xec\x39\x73\xea\xd5\xb9\xb9\x3c\x95\x44\x1e\x57\x34\x9e\x06\x22\xab\x24\x76\x9e\x1f\x79\x88\x68\x6f\xfb\x53\x8a\xd7\x0d\x76\xeb\x73\x8f\x88\x00\x79\xec\x80\xb1\x24\xc1\xf1\x5b\x06\xb3\xf6\xab\xff\x76\xb6\x04\x29\x92\x46\x8f\x76\x23\x7d\x92\xd4\x2d\xc9\xeb\x94\x60\x7f\x3a\xf6\xfc\xd5\x47\x64\xd0\xbd\xea\x47\x5f\xdd\xcd\x65\xb7\x73\x16\x9d\xc6\x99\x0d\x62\xf4\x13\xeb\xf3\x8d\x49\x36\xc8\x70\xa4\x34\xac\x66\x35\xcb\x65\xe3\x0d\x70\xfd\xef\xf0\xcb\xd2\x14\x25\x1f\xb7\xb6\x67\x7f\x85\xf5\xc9\x31\xb4\xf7\x0f\x77\x67\x4b\xa3\xd9\x68\x09\xf9\xcc\xb5\xf1\xa8\x44\x29\x8a\xda\xaa\x79\xab\x74\xe9\xad\x40\x1a\x87\xb8\x9a\xf3\xf3\xe6\x97\x50\x49\x3f\xb5\x25\xbe\x5d\x28\x99\xa3\x36\xa8\xab\xd1\xd2\x32\x14\x51\x69\x4b\x1f\xca\x8b\xa5\x34\xce\x84\x92\xdd\x02\x5c\xb0\x7a\x60\x1c\x72\x21\xe3\x52\x54\x32\x21\xad\x28\x8d\xe2\x3b\x41\xaf\xa4\xb9\x65\x3a\x7b\x66\x49\x82\xfa\x42\xc9\xcc\x4b\xa2\x34\xbd\x56\xfd\xa9\x09\xf4\x71\xaf\x8e\xbb\xa6\x5c\x85\x4e\x34\xdf\x47\xb4\x02\xfa\x26\x24\xd3\xdb\xf1\x5e\x27\x37\x4e\xb4\x1e\x1e\x19\x95\x0e\x52\x24\x1e\x70\xd4\xd6\x74\x77\x84\x44\x04\x4c\xf2\x76\xdd\x8f\x2c\xd9\xa0\xee\x71\x71\x74\x05\xde\xbf\x51\xc6\xb9\xe0\xd6\x52\xbf\xfb\x47\x92\xef\x47\x74\x27\x84\xcf\x40\xbd\x54\xbc\x75\x93\xa1\x63\x47\xe6\x40\x8d\xd6\xb6\x12\x3a\x53\x2f\xef\x64\x52\x14\xf0\xba\x61\x89\x88\xb6\x40\xfc\xaf\x44\x46\x80\xdc\xe1\x9b\x6b\xdd\x31\x09\x59\x66\x84\x8c\x21\x77\xc8\xee\x37\xe7\x60\x48\x32\x79\xbf\x20\x6b\xab\x32\xca\x1f\x9a\x43\x3a\xb8\xa8\x2d\x2f\xcf\xc2\xa4\xa7\xef\x70\x12\x47\x6a\x57\xb7\xe0\x67\xaa\xf7\xff\x0a\x77\x90\xe6\x53\x8e\xcb\x29\x62\x97\x6a\x74\x34\xfe\x08\xb9\x71\x1b\x35\x66\x56\x63\xf9\x3b\x00\x00\xff\xff\x03\x59\x9f\x2c\x41\x0c\x00\x00")

func templateTo_protoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateTo_protoTmpl,
		"template/to_proto.tmpl",
	)
}

func templateTo_protoTmpl() (*asset, error) {
	bytes, err := templateTo_protoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/to_proto.tmpl", size: 3137, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/enums.tmpl":    templateEnumsTmpl,
	"template/service.tmpl":  templateServiceTmpl,
	"template/to_proto.tmpl": templateTo_protoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"enums.tmpl":    &bintree{templateEnumsTmpl, map[string]*bintree{}},
		"service.tmpl":  &bintree{templateServiceTmpl, map[string]*bintree{}},
		"to_proto.tmpl": &bintree{templateTo_protoTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
