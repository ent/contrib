// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/enums.tmpl
// template/service.tmpl
// template/to_ent.tmpl
// template/to_proto.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateEnumsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\x4f\x6b\xdc\x30\x10\xc5\xef\xfe\x14\x83\xe8\xc1\x86\x22\x4a\x7b\x6b\xe9\xad\x9b\x25\x90\x96\x85\xa6\xa7\x50\x82\x76\x3d\x4e\x45\x6c\x49\x95\xc7\x2e\x41\x9d\xef\x5e\x24\x7b\xd7\xf6\xfe\x29\xdb\xea\x64\x34\xf3\xde\x6f\xf4\xc6\x21\x40\x89\x95\x36\x08\x02\x4d\xd7\xb4\x02\x98\x33\x00\x80\x10\xe0\x95\xb7\x96\xe0\xfd\x47\x90\xb3\x4b\xaf\xcc\x13\x82\xbc\xd1\x58\x97\x9f\x95\x93\xab\xa8\xda\xd7\xf7\xc2\x68\x75\xff\xe2\x30\x89\x37\xdb\xd4\xfc\x09\xdb\x9d\xd7\x8e\xac\x97\x6b\xa4\xd5\xbe\xe3\x8c\xf2\x8b\x6a\x92\xd2\x79\x6d\x68\x98\x42\xae\x0c\xc5\x76\x99\x6a\xe2\x51\x4c\x8c\xe8\x96\x6e\x8f\x9c\xdc\x36\x32\x6e\x4b\x34\xe9\x0d\x83\xcd\x8d\xae\x51\xae\xed\x6d\xe3\xac\xa7\x8d\xa2\x1f\x72\x68\x98\xb8\x70\x3a\x11\xdd\xed\x54\x9b\x26\x6a\x8d\x7a\xc6\x73\x13\x9d\x6a\x16\x70\x34\x74\xe0\x8c\x6e\x72\xb3\xfd\x4a\xbe\xdb\x51\x0a\x67\x6e\x50\x75\x66\x07\x64\x37\xde\x92\x3d\x7a\x88\x5c\xdb\x11\x07\x39\x46\x92\x3e\xb8\x4e\x3c\x60\x2e\x66\xb5\x79\x0e\xcc\x10\x0e\x9c\x78\x74\x05\xfd\x6b\xb0\xcf\x71\xc8\x8b\xac\xc7\x5e\xd5\x1d\x3e\x84\x00\x3f\x3b\x55\xeb\xea\x05\x44\x4b\x5e\x9b\xa7\x56\x80\xb8\xb7\xdf\x9c\x43\x1f\xff\x9b\x7c\xb8\xcd\xb1\x28\xbe\x7f\x88\xa6\x4b\x56\x3c\x1e\xa9\xf3\xe6\x64\x3f\xbf\xc7\x61\x99\xf3\xbe\x58\x88\x38\xfb\x37\xf9\x9b\x49\xce\xd9\x71\xa4\x2b\x43\x17\x1f\xb9\xc8\x73\x99\x59\xf1\x97\xa4\xff\x2b\x4f\xa3\x1a\x7c\xd0\x86\xde\xbd\xcd\xf1\x8a\xa8\xce\xa1\x99\xf3\x4b\xfb\xb8\xb3\xbf\xc6\x7d\xf4\xc5\x15\x61\x0a\x91\x2d\xeb\x21\x00\x9a\x92\x39\x1b\x3e\x80\xf9\x4f\x00\x00\x00\xff\xff\xeb\x69\x69\x55\x25\x04\x00\x00")

func templateEnumsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateEnumsTmpl,
		"template/enums.tmpl",
	)
}

func templateEnumsTmpl() (*asset, error) {
	bytes, err := templateEnumsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/enums.tmpl", size: 1061, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateServiceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x5b\x4f\xe3\xb8\x17\x7f\xe7\x53\x9c\xbf\xc5\x7f\x94\x20\x48\xdf\x91\x78\x60\x69\x61\xf3\x30\xc0\xaa\xc0\x3c\x56\x26\x39\x0d\xd6\xa4\x4e\xea\x38\x85\xaa\x9b\xef\xbe\x3a\x76\xda\xe6\x4e\x87\x61\x76\x27\xd2\x68\x12\xfb\xf8\xf8\x5c\x7e\xe7\x56\x36\x9b\x33\x18\x9d\x44\x89\x5e\xa7\x78\x0e\x28\x75\x94\x78\x22\x19\x05\x89\xd4\x4a\x3c\x8f\x50\xea\x54\x25\x3a\x19\x05\x8b\x70\x64\xde\x82\xb3\x08\xe5\x19\x11\xaa\x34\xf0\x32\x54\x2b\x11\xe0\x0d\x4a\x54\x5c\x27\xea\x64\x04\x67\x45\x71\x44\x5c\x8f\xe1\xfc\x02\x3c\xf3\x39\x1a\xc1\x55\x12\x22\x44\x96\x0c\x43\x78\x5e\x43\x07\x37\x18\xdf\xc1\xed\xdd\x03\x4c\xc6\xfe\x83\x77\x94\xf2\xe0\x3b\x8f\x10\x36\x1b\xf0\xae\x45\x8c\xde\x4d\x72\x6f\x97\x6e\xf9\x02\xa1\x28\x8e\x88\x31\xed\x4e\xad\x14\xde\x4d\x52\xee\x80\x58\xa4\x31\x2e\x50\xea\xac\x9b\x80\x16\x50\x1d\x91\xd6\x3d\x1c\x32\xad\xf2\x40\xc3\xe6\x08\x00\x20\x88\x05\x4a\x0d\x27\x44\x3a\x91\xba\x14\xc3\xf3\x43\x5a\x65\x57\x66\x97\xc1\xdf\x20\xcc\x42\x51\x98\x43\x8f\x72\x27\x05\x86\x43\x52\x58\x45\x6e\xf1\xb5\x5b\x12\x85\x3a\x57\x32\x03\x0e\x12\x5f\xbb\xa5\x3d\x9a\xe7\x32\xe8\xe5\xe0\xfc\xa8\xf8\xae\x25\x6d\x8b\x62\xad\x61\x05\x82\x2f\x9d\x34\x96\x64\x6f\xb4\xf3\xf2\xff\x53\xb3\x5e\x90\xb2\x9b\x0d\x68\x5c\xa4\x31\xd7\x08\x0c\x65\xbe\xc8\x18\x78\xc6\x9f\xb5\x1d\x9d\xcc\x0c\x46\x66\xa4\x5c\x85\x42\x71\x19\xe1\xfe\xe6\xaf\xa8\x5f\x92\x30\xdb\x5a\xdd\x40\x4f\x84\xd7\x02\xe3\x90\x10\x78\xec\x99\xd7\xaf\x3c\xf5\xfc\xb1\x41\xe3\x8e\x6a\xc5\x95\x11\x9a\xa8\xca\x13\x64\x1e\xfb\x62\x76\x6a\xe4\x0b\x73\xd1\xf6\xc4\x56\xe3\x1a\x89\x90\x69\xae\x77\x14\x3e\x7d\x79\x37\x89\xb1\x73\x95\xde\x1c\x28\xb1\xdb\x87\xd9\xe3\x3e\xb8\x78\xb5\x53\x86\x95\xf1\xbe\x93\xad\x02\xe3\xb7\x8e\x93\x6e\xfd\x2a\x27\xd0\x6f\xb4\xb2\xcc\x79\x2c\xe6\x6b\x60\x14\xee\xf8\xa6\x19\xb0\xab\xed\x5b\x51\x9c\x82\xc2\xa5\xe1\x68\x71\x51\xd7\xc7\x70\x75\x2a\xbb\x77\xb9\xae\x6f\x9f\x02\x2a\x95\x28\x17\xf6\x90\x20\x23\x89\x39\xe0\xb2\x66\x4d\x76\x83\xe6\xc2\x1d\x19\x3d\x2b\xae\xc0\xa9\xad\xd0\x83\x4a\x59\xae\xad\x9d\x08\x75\xa9\x7d\x0b\xe1\x66\xe9\x61\x9d\xa2\x75\x6a\x23\x4c\xb7\x8f\x5b\xfb\x22\x49\xf7\x50\x9c\x13\x24\x66\x3a\x99\x99\x40\x09\x45\xa0\x81\x19\x98\xb0\x3d\xd6\xd8\x93\x85\x13\xeb\x03\x13\x33\xd2\x30\x70\x52\x25\x28\xee\x14\x2e\x3d\xa3\xf9\x8e\xfe\xfe\x79\x6a\xb2\x4e\xc9\xd0\x71\x99\xdb\x94\x32\x7b\x15\x3a\x78\x81\xf2\xec\x93\xc0\x57\xa7\x6a\xe0\x5d\xec\xf1\xcc\x24\xb6\x0a\x22\x8b\x62\xf6\xe4\x4f\xbe\xcd\x1e\x6f\xa7\xf7\x93\x2b\xff\xda\x9f\x8c\x4f\xdb\x24\x7f\x5c\x4e\xfd\xab\xf3\x16\xbf\xd2\xc2\xc6\xa5\x70\x01\xd9\x2a\xf0\x6c\x58\x7b\x5b\x93\xef\xed\x5b\x14\x24\x1a\x61\xcc\xf2\xdf\x86\x59\x51\xb8\x07\xca\xf9\xcd\x7f\xf8\x73\x36\x19\xdf\x4c\x66\xfe\x78\xfa\xd3\xc2\xfc\x95\xa3\x5a\x3b\xae\xd7\xc9\x87\x9e\x6f\x2f\xa8\xd0\xa9\xc4\x43\xe9\x21\x27\x97\xcb\x3c\xd1\x58\xc7\xd4\x54\x2b\x21\x23\x17\xd8\x88\x55\x2e\x2b\x77\x5d\x60\xfe\x98\xb0\xec\x34\x34\x1f\xb8\x7e\x97\xd2\x2a\xa9\x6a\x12\x46\x98\x35\x7d\xdf\x3e\x78\x06\xc7\xa8\x4d\xae\x99\x48\x4d\x67\x3c\x12\x66\x97\x93\x7a\x15\x16\xfa\xa5\xac\x05\xe6\x50\x15\x75\x45\xe1\x50\x3a\x71\x96\x64\x35\x38\xd9\x5a\x15\xf5\xd6\x9e\xc6\x9c\x5d\x98\x6b\x3e\x86\x83\x37\xc5\x18\x03\x4d\xe6\xf8\x80\x79\x51\x6f\x0d\x0b\xae\xf9\xf2\xc7\xde\x55\x22\x33\xcd\xa5\x86\x4e\x40\x55\x9f\x62\xd8\xe8\x28\xc3\x21\x0b\xdf\xc9\x78\x4d\x20\x6e\xdf\x11\xe2\x9c\xe7\xb1\xee\x06\x66\x59\x1c\xa5\x88\x0d\xfa\x33\xcd\x75\x9e\x4d\x94\x02\xe6\xcb\x15\x8f\x45\x78\xa9\xa2\x7c\x61\x12\x01\x13\x76\x05\x78\xb9\x74\x0e\xb9\xfc\x2e\x93\x57\x09\x2b\x81\xaf\xac\x21\x5c\x67\x22\xe8\x09\x7d\x13\x19\x17\x24\xc5\xa0\x94\x3a\xb9\xa7\x0a\xdb\x15\x36\x4e\x84\x7a\x20\x5e\x3b\xfa\x08\x3f\xbb\x4d\xf4\x75\x92\xcb\xb0\xda\x4b\x38\xa8\x94\xfb\x63\xa6\x9a\x03\xdb\x73\x62\x32\xd1\x30\xa7\xf7\x73\xf8\x7f\xc6\x80\xa1\x52\xa6\x58\x7c\x8e\x5b\xe6\xe4\x17\x8d\x4a\xf2\xd8\x38\xc4\xbe\xda\x1a\xd3\xb8\xb0\xdf\x17\x55\xe6\x52\xc4\xb5\x72\x87\x71\x86\x5d\x35\x6f\x8c\x31\x6a\xec\x2c\x7b\xdd\x45\xee\x77\xad\x48\x87\x25\x61\xab\xee\x9d\x44\x7f\xdc\x4c\x8d\xde\xe4\x0d\x83\x76\xa4\x7d\x0a\xc0\xbf\x54\xbb\x9c\x28\x49\xa2\x18\xbd\x28\x89\xb9\x8c\xbc\x44\x45\x76\xa2\x79\xce\xe7\x23\x1a\x04\xb2\x91\x89\xbd\x11\x2e\x52\xbd\x4e\x9f\x19\xb0\x09\xbd\x91\x8b\x36\x45\xdd\xb1\x35\x51\xfe\xfb\x70\xe8\xc8\x62\xbf\x32\x18\x7a\x63\xa1\x8a\xf7\x44\x81\xd3\xc4\xfc\x95\x42\xae\x91\xb9\xed\x9d\xc7\x34\xb4\x3b\x0d\xde\xa6\xc4\x29\x5c\x3e\x71\x45\x65\x2e\xe0\x0b\x8c\x9b\xe8\x6a\x56\x3b\xf2\x47\x79\xa4\x28\xe8\x54\x09\xeb\xce\x2c\xd7\xee\xfa\x3a\x62\xb5\x94\xbb\xab\x5a\x2c\xe8\x82\xf7\xc0\x6f\xcf\x77\xdc\x65\x8c\xd5\xc1\xb5\x39\x9e\x58\xbd\xcb\x30\xdd\x2a\xc7\x66\x7d\x81\xed\x76\x76\x00\xe5\x64\x44\xfc\x1a\x8c\xde\x0b\x7a\x60\xbd\x0c\x3f\x9c\x91\xb6\xda\x6d\x73\x10\x49\xf6\x51\xfb\x5a\xf4\x74\x26\x97\xb6\xc9\xdb\x55\x9f\x96\x5b\x1d\x98\x79\xe9\x6c\xc1\x8c\x1d\xb3\xef\x22\xf5\x17\x8b\x5c\xf3\xe7\xd8\xb8\x88\xcb\x10\x9c\x16\x72\x4a\x5c\x83\x0b\x7b\x0f\xed\x8f\xf5\x7a\x89\xb8\x13\xd3\x44\x81\xe7\x67\xfe\xd8\x5a\xaf\x71\x69\xdf\x69\x31\x07\x4a\x12\x96\x49\x4f\x83\x73\x10\xc0\x0c\xc2\xe0\x10\x68\x1d\x02\xaf\x83\x61\x55\xd1\x63\x7f\xf7\x5d\xaa\x45\x42\xc9\x68\xa0\x63\x13\x73\x3b\x4a\x90\x83\xe1\x7f\xa6\x38\xf4\xb4\xa9\x3d\x40\xa8\x6e\x1f\x04\x6c\xef\x03\x88\xa6\x67\xe1\x4d\x4d\x3e\xda\xeb\xd7\x68\xc1\xdf\x9b\x9b\x3e\x6c\xa3\x7e\x85\x7b\xec\x31\x10\x33\x87\x86\x52\xef\x30\x53\xd1\xc0\xcc\x21\x8f\x52\x2c\xf3\xce\x84\x08\x3f\x8e\x59\xc3\xf1\xb3\x21\x5b\xae\x13\x6f\x7f\xdc\x6e\x8e\x06\x6f\xfa\xd7\x10\xd5\x31\xd3\xbd\x93\x18\xe1\x9d\x7a\x44\xcf\x3c\x51\x30\x3b\x05\xa1\xd1\xe4\x64\xeb\xe5\x5a\xad\x2d\x8b\x6c\xc3\x6a\x54\x64\x07\xa6\xc5\x9a\x57\xf7\x6e\xed\xd1\x63\x98\x4d\xd5\x95\x8c\x04\x7d\xc7\x5d\xef\xf0\xfb\xa5\x0e\xb3\x4e\xbb\x0c\x43\x6a\xc0\x84\x8c\xf2\x98\xab\x7e\xef\x65\x07\x65\x84\x9f\x8d\x5e\x85\x99\xfd\x51\xe5\xfc\x82\x00\xc5\x57\xf8\xd9\x6d\xb9\x69\xb8\x77\x77\x0c\x8d\x9f\x0a\xb3\x6e\x25\xa9\x3f\x53\x6a\x38\xbf\xc3\xe7\x4f\x7c\xfd\x36\xae\x5c\x56\xaa\x37\x34\x2a\xec\xa6\x91\xdd\xdf\x5a\x50\xea\x51\x28\x78\x8c\x81\x1e\x65\xcb\x98\xfe\x45\x8a\xa7\x2f\x8c\x66\x08\x9b\x12\xcd\x6f\x1e\x8a\x0b\xa9\x27\x24\x26\xfb\xf0\x20\x71\x19\x2b\xe4\xe1\x7a\xf2\x26\x32\x4d\x9a\x72\xfb\x0d\x68\x16\x86\x47\x8a\xe1\x61\xa7\x25\xe2\xcf\xce\x3c\x87\xfc\x5c\xf2\x7b\x4e\x40\xfb\xc0\x2a\x8e\xf6\xbf\x33\xfd\x13\x00\x00\xff\xff\x30\x7c\x07\x15\x6a\x1b\x00\x00")

func templateServiceTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateServiceTmpl,
		"template/service.tmpl",
	)
}

func templateServiceTmpl() (*asset, error) {
	bytes, err := templateServiceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/service.tmpl", size: 7018, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateTo_entTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x94\x4f\x6f\xd3\x40\x10\xc5\xef\xfd\x14\x83\x05\x28\xad\xc8\xfa\x1e\x94\x03\x54\xa5\xea\x01\x2e\xfc\xb9\x56\xcb\x7a\x1c\x46\x72\x66\xa2\xd9\x89\x51\xb5\xda\xef\x8e\x76\x53\x05\xa7\xd0\x9a\x03\x87\xfa\x34\xde\x99\xf7\x9e\xe6\xe7\x3f\x29\x2d\xa1\xbd\xd8\x88\xdd\xed\x70\x05\xc8\xb6\x11\x47\xd2\x06\x61\x53\xfa\xde\x22\xdb\x4e\xc5\xa4\x0d\xdb\xae\xad\x55\x58\x6e\x90\x97\x65\x50\x77\xc1\x45\xd4\x91\x02\x5e\x23\xa3\x7a\x13\xbd\x68\x61\x99\xf3\x59\x4a\xd0\x61\x4f\x8c\xd0\xf4\x84\x43\x77\x6b\x72\x8b\x6c\x0d\xe4\x7c\x06\x00\x50\x52\x5f\x52\x07\xab\x35\xb8\x9b\x0e\xd9\xaa\xea\xd8\x09\xc2\x63\xe9\x31\xfe\xbc\x14\x1e\x51\x0d\x15\xdc\x87\xe2\x74\x32\x48\xfd\x61\xd6\x7d\x91\x2b\xb6\x8f\xd2\x51\x4f\xa8\xc7\x91\x69\xd2\x1a\x76\x4a\x6c\xb5\x7e\x4a\x53\xe6\x91\x9f\x8c\xf1\x1a\x7f\xf8\x61\x40\xbd\x14\x8e\xa6\xfb\x60\xa2\xee\x5a\x3e\xf9\x2d\xc2\x24\x79\xf4\x0a\x29\x81\xfb\xe6\xf5\xbe\x55\x6e\xa9\x6e\x3b\x67\x37\xb1\xa1\x1e\x50\xb5\xd0\x58\xbc\x3e\xb5\x3b\x77\x5f\x79\x7b\x50\xbf\x27\xf6\x7a\xb7\x28\x01\x65\xc1\x9c\xcf\xdf\x56\xd5\x8b\x35\x30\x0d\x90\x8e\x6e\xe5\x52\xb4\xbd\x72\x69\xbc\x29\x82\x68\xde\xf6\xf1\x4a\xb5\x87\xe6\x86\x47\x3f\x50\xf7\x4e\x37\xfb\x6d\x7d\x5e\x0d\x1d\x4e\xc0\xdf\x1f\xad\xe0\x55\x6c\xa0\x41\xd5\x66\xba\xec\x04\xde\x10\xf1\x01\xb1\xcf\xc1\x33\xcf\xe1\x7a\x80\x6a\xb5\xfe\x2b\xad\x3f\xad\x20\xe7\xf4\x6f\xb4\x8a\x76\x82\x08\x9e\x15\xa3\xff\x01\xe7\x94\xca\xe2\xf7\xcb\x30\x13\x3c\xa2\x46\x12\x9e\x0d\x7c\x4c\xf5\x68\xd2\xac\x61\x15\x9d\x7c\x77\xf5\xe7\x71\x2c\x7f\x05\x00\x00\xff\xff\xda\x56\x49\xac\x9e\x04\x00\x00")

func templateTo_entTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateTo_entTmpl,
		"template/to_ent.tmpl",
	)
}

func templateTo_entTmpl() (*asset, error) {
	bytes, err := templateTo_entTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/to_ent.tmpl", size: 1182, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateTo_protoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\x4d\x6f\xdb\x30\x0c\xbd\xe7\x57\xb0\x42\x31\x24\x41\x22\xdf\x33\xe4\xb2\xb6\x2b\x7a\x68\x51\x60\x5d\xaf\x81\x6a\xd1\xae\x50\x47\x72\x65\xc5\x45\xe0\xe9\xbf\x0f\x92\xed\xc4\x5f\x69\x13\x60\xc5\x36\x9f\x64\x99\x7c\x24\xdf\xa3\x28\x17\xc5\x1c\x82\x69\xac\xcc\x36\xc5\x05\xa0\x34\xb1\xa2\x42\x05\xa1\x92\x46\x8b\xa7\x00\xa5\x49\xb5\x32\x2a\x08\xd7\x3c\xf0\xab\x70\x1e\xa3\x9c\x3b\x43\x9d\x86\x34\x43\x9d\x8b\x10\xaf\x51\xa2\x66\x46\xe9\x69\x00\x73\x6b\x47\x45\x01\x1c\x23\x21\x11\x88\x51\x2b\xef\xb7\x8a\x36\x32\x24\x60\xed\x08\x00\x20\x08\xc0\xa8\x7b\xb7\x5f\x14\x40\xaf\xa4\x79\xd8\xa6\x48\xef\xd8\x1a\xc1\x5a\x30\x9a\xc9\x2c\x52\x7a\x9d\x81\x79\x46\x97\x15\xb8\xfc\xc0\x28\xff\x9e\x3e\xf9\x57\x0f\xe4\x50\xdf\x81\x1a\x23\x4c\xab\xed\x7b\x16\xbe\xb0\x18\xe9\x0d\x77\x78\x6d\xc3\x5f\x20\xfc\xae\xb5\x13\x18\x4f\x07\x70\x66\x80\x5a\x2b\x3d\x81\xc2\x47\x75\x4f\x0e\x8b\x25\x7c\x19\xb0\x2d\xec\xce\xc6\xb1\xab\x99\x8c\x11\xe8\x77\x81\x09\xbf\x65\x69\xb9\xc8\x6a\x22\x9a\x96\xe7\x39\xd3\x1e\x63\xb1\x84\x90\xad\x31\xf1\xd0\xde\x9e\xfe\x30\x7a\x13\x96\x6b\xcf\x70\xcf\x57\x70\xe7\x96\x6a\x21\x0d\x10\xa4\xe4\x68\x5f\x30\xb8\x4e\x13\x66\x10\x48\xe4\x4c\x56\xb5\x62\x04\xb8\x08\x0d\x10\xef\x48\x80\x02\x79\x2c\xf3\x23\xfb\x4c\x89\x67\x93\xf8\xf0\x1d\xe4\x9c\x3a\x6e\xee\x9f\x9a\xd1\xad\x85\xa5\x0b\xb9\xf3\xb7\x6d\xae\x50\xf2\xee\x56\x97\xbe\x2b\x1e\xe3\x09\xec\x39\x73\xea\xd5\xb9\xb9\x3c\x95\x44\x1e\x57\x34\x9e\x06\x22\xab\x24\x76\x9e\x1f\x79\x88\x68\x6f\xfb\x53\x8a\xd7\x0d\x76\xeb\x73\x8f\x88\x00\x79\xec\x80\xb1\x24\xc1\xf1\x5b\x06\xb3\xf6\xab\xff\x76\xb6\x04\x29\x92\x46\x8f\x76\x23\x7d\x92\xd4\x2d\xc9\xeb\x94\x60\x7f\x3a\xf6\xfc\xd5\x47\x64\xd0\xbd\xea\x47\x5f\xdd\xcd\x65\xb7\x73\x16\x9d\xc6\x99\x0d\x62\xf4\x13\xeb\xf3\x8d\x49\x36\xc8\x70\xa4\x34\xac\x66\x35\xcb\x65\xe3\x0d\x70\xfd\xef\xf0\xcb\xd2\x14\x25\x1f\xb7\xb6\x67\x7f\x85\xf5\xc9\x31\xb4\xf7\x0f\x77\x67\x4b\xa3\xd9\x68\x09\xf9\xcc\xb5\xf1\xa8\x44\x29\x8a\xda\xaa\x79\xab\x74\xe9\xad\x40\x1a\x87\xb8\x9a\xf3\xf3\xe6\x97\x50\x49\x3f\xb5\x25\xbe\x5d\x28\x99\xa3\x36\xa8\xab\xd1\xd2\x32\x14\x51\x69\x4b\x1f\xca\x8b\xa5\x34\xce\x84\x92\xdd\x02\x5c\xb0\x7a\x60\x1c\x72\x21\xe3\x52\x54\x32\x21\xad\x28\x8d\xe2\x3b\x41\xaf\xa4\xb9\x65\x3a\x7b\x66\x49\x82\xfa\x42\xc9\xcc\x4b\xa2\x34\xbd\x56\xfd\xa9\x09\xf4\x71\xaf\x8e\xbb\xa6\x5c\x85\x4e\x34\xdf\x47\xb4\x02\xfa\x26\x24\xd3\xdb\xf1\x5e\x27\x37\x4e\xb4\x1e\x1e\x19\x95\x0e\x52\x24\x1e\x70\xd4\xd6\x74\x77\x84\x44\x04\x4c\xf2\x76\xdd\x8f\x2c\xd9\xa0\xee\x71\x71\x74\x05\xde\xbf\x51\xc6\xb9\xe0\xd6\x52\xbf\xfb\x47\x92\xef\x47\x74\x27\x84\xcf\x40\xbd\x54\xbc\x75\x93\xa1\x63\x47\xe6\x40\x8d\xd6\xb6\x12\x3a\x53\x2f\xef\x64\x52\x14\xf0\xba\x61\x89\x88\xb6\x40\xfc\xaf\x44\x46\x80\xdc\xe1\x9b\x6b\xdd\x31\x09\x59\x66\x84\x8c\x21\x77\xc8\xee\x37\xe7\x60\x48\x32\x79\xbf\x20\x6b\xab\x32\xca\x1f\x9a\x43\x3a\xb8\xa8\x2d\x2f\xcf\xc2\xa4\xa7\xef\x70\x12\x47\x6a\x57\xb7\xe0\x67\xaa\xf7\xff\x0a\x77\x90\xe6\x53\x8e\xcb\x29\x62\x97\x6a\x74\x34\xfe\x08\xb9\x71\x1b\x35\x66\x56\x63\xf9\x3b\x00\x00\xff\xff\x03\x59\x9f\x2c\x41\x0c\x00\x00")

func templateTo_protoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateTo_protoTmpl,
		"template/to_proto.tmpl",
	)
}

func templateTo_protoTmpl() (*asset, error) {
	bytes, err := templateTo_protoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/to_proto.tmpl", size: 3137, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/enums.tmpl":    templateEnumsTmpl,
	"template/service.tmpl":  templateServiceTmpl,
	"template/to_ent.tmpl":   templateTo_entTmpl,
	"template/to_proto.tmpl": templateTo_protoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"enums.tmpl":    &bintree{templateEnumsTmpl, map[string]*bintree{}},
		"service.tmpl":  &bintree{templateServiceTmpl, map[string]*bintree{}},
		"to_ent.tmpl":   &bintree{templateTo_entTmpl, map[string]*bintree{}},
		"to_proto.tmpl": &bintree{templateTo_protoTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
