// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/enums.tmpl
// template/service.tmpl
// template/to_proto.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateEnumsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\x4f\x6b\xdc\x30\x10\xc5\xef\xfe\x14\x83\xe8\xc1\x86\x22\x4a\x7b\x6b\xe9\xad\x9b\x25\x90\x96\x85\xa6\xa7\x50\x82\x76\x3d\x4e\x45\x6c\x49\x95\xc7\x2e\x41\x9d\xef\x5e\x24\x7b\xd7\xf6\xfe\x29\xdb\xea\x64\x34\xf3\xde\x6f\xf4\xc6\x21\x40\x89\x95\x36\x08\x02\x4d\xd7\xb4\x02\x98\x33\x00\x80\x10\xe0\x95\xb7\x96\xe0\xfd\x47\x90\xb3\x4b\xaf\xcc\x13\x82\xbc\xd1\x58\x97\x9f\x95\x93\xab\xa8\xda\xd7\xf7\xc2\x68\x75\xff\xe2\x30\x89\x37\xdb\xd4\xfc\x09\xdb\x9d\xd7\x8e\xac\x97\x6b\xa4\xd5\xbe\xe3\x8c\xf2\x8b\x6a\x92\xd2\x79\x6d\x68\x98\x42\xae\x0c\xc5\x76\x99\x6a\xe2\x51\x4c\x8c\xe8\x96\x6e\x8f\x9c\xdc\x36\x32\x6e\x4b\x34\xe9\x0d\x83\xcd\x8d\xae\x51\xae\xed\x6d\xe3\xac\xa7\x8d\xa2\x1f\x72\x68\x98\xb8\x70\x3a\x11\xdd\xed\x54\x9b\x26\x6a\x8d\x7a\xc6\x73\x13\x9d\x6a\x16\x70\x34\x74\xe0\x8c\x6e\x72\xb3\xfd\x4a\xbe\xdb\x51\x0a\x67\x6e\x50\x75\x66\x07\x64\x37\xde\x92\x3d\x7a\x88\x5c\xdb\x11\x07\x39\x46\x92\x3e\xb8\x4e\x3c\x60\x2e\x66\xb5\x79\x0e\xcc\x10\x0e\x9c\x78\x74\x05\xfd\x6b\xb0\xcf\x71\xc8\x8b\xac\xc7\x5e\xd5\x1d\x3e\x84\x00\x3f\x3b\x55\xeb\xea\x05\x44\x4b\x5e\x9b\xa7\x56\x80\xb8\xb7\xdf\x9c\x43\x1f\xff\x9b\x7c\xb8\xcd\xb1\x28\xbe\x7f\x88\xa6\x4b\x56\x3c\x1e\xa9\xf3\xe6\x64\x3f\xbf\xc7\x61\x99\xf3\xbe\x58\x88\x38\xfb\x37\xf9\x9b\x49\xce\xd9\x71\xa4\x2b\x43\x17\x1f\xb9\xc8\x73\x99\x59\xf1\x97\xa4\xff\x2b\x4f\xa3\x1a\x7c\xd0\x86\xde\xbd\xcd\xf1\x8a\xa8\xce\xa1\x99\xf3\x4b\xfb\xb8\xb3\xbf\xc6\x7d\xf4\xc5\x15\x61\x0a\x91\x2d\xeb\x21\x00\x9a\x92\x39\x1b\x3e\x80\xf9\x4f\x00\x00\x00\xff\xff\xeb\x69\x69\x55\x25\x04\x00\x00")

func templateEnumsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateEnumsTmpl,
		"template/enums.tmpl",
	)
}

func templateEnumsTmpl() (*asset, error) {
	bytes, err := templateEnumsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/enums.tmpl", size: 1061, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateServiceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\x41\x6b\xe3\x30\x14\x84\xef\xfe\x15\x83\x0f\xcb\x6e\x58\x4b\xf7\x5c\x93\x6c\xc8\x25\x59\x68\x7a\x0e\x8e\xfc\x6a\x44\x6d\xc9\xc8\xcf\x0d\x41\xd5\x7f\x2f\x92\x42\x4b\xa9\x53\xe8\xc9\x66\x66\xf4\xfc\xcd\xb3\xbc\xaf\x20\x17\xad\xe5\xeb\x40\x4b\x90\xe1\xd6\x0a\x6d\xa5\xb2\x86\x9d\x3e\x4b\x32\x3c\x38\xcb\x56\xaa\xbe\x91\xe9\x4d\x55\x2d\x99\x2a\x06\xdd\xa0\xc4\x48\xee\x45\x2b\xda\x92\x21\x57\xb3\x75\x0b\x89\x2a\x84\x42\x4a\xac\x6c\x43\x68\xb3\x4e\x0d\xce\x57\xcc\x1c\xc7\xfa\x80\xfd\xe1\x88\xcd\x7a\x77\x14\xc5\x50\xab\xe7\xba\x25\x78\x0f\xf1\x4f\x77\x24\xb6\xf6\x7f\x96\xf6\x75\x4f\x08\xa1\x88\x83\xa3\xfb\x90\x3f\x2b\xb6\xf6\xe6\x40\xf7\x43\x47\x3d\x19\x1e\xe7\x03\x51\x20\x57\xc4\x9a\x77\x26\x8c\xec\x26\xc5\xf0\x05\x00\xa8\x4e\x93\x61\x2c\x62\x74\x63\xf8\x86\x21\x76\x4d\x54\xcb\x55\x72\x4b\xbc\x42\x27\x21\x84\x74\xe8\xd1\xbc\x53\x50\xf3\x1d\x45\x2e\xb2\xa7\xcb\x3c\x89\x23\x9e\x9c\x19\x51\xc3\xd0\x65\x9e\xb6\x78\x9a\x8c\xba\x3b\xe1\xf7\x4f\xf1\xff\xe4\xe8\x57\x94\xbc\x8d\x0c\x84\x5f\xb3\x99\x1c\xf9\x58\xda\xf2\xf6\xfc\x9b\xf4\x10\xcb\x7a\x0f\xa6\x7e\xe8\x6a\x26\x94\x64\xa6\x7e\x2c\x21\xd2\xff\xfc\xe4\xb0\x3d\xa5\x3b\x72\x8a\xe5\x72\xe2\x2d\x00\x00\xff\xff\x3b\x61\x5e\xb8\x9f\x02\x00\x00")

func templateServiceTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateServiceTmpl,
		"template/service.tmpl",
	)
}

func templateServiceTmpl() (*asset, error) {
	bytes, err := templateServiceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/service.tmpl", size: 671, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateTo_protoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\x4f\x4f\xe3\x3e\x10\xbd\xf7\x53\x0c\x16\xfa\xa9\xad\x5a\xe7\xde\x9f\x7a\x59\x60\x11\x07\x10\xd2\xb2\x5c\x2b\x13\x4f\x82\x45\x6a\x07\xc7\x0d\xaa\xb2\xfe\xee\x2b\x3b\x49\xf3\xb7\x6c\x91\xf6\x6f\x4f\xa9\xf3\xe6\xcd\xcc\x7b\xf6\xc4\x45\xb1\x84\x60\x1e\x2b\xb3\x4f\x71\x05\x28\x4d\xac\xa8\x50\x41\xa8\xa4\xd1\xe2\x29\x40\x69\x52\xad\x8c\x0a\xc2\x2d\x0f\xfc\x53\xb8\x8c\x51\x2e\x1d\x50\xa7\x21\xcd\x50\xe7\x22\xc4\x6b\x94\xa8\x99\x51\x7a\x1e\xc0\xd2\xda\x49\x51\x00\xc7\x48\x48\x04\x62\xd4\xc6\xc7\x6d\xa2\x9d\x0c\x09\x58\x3b\x01\x00\x08\x02\x30\xea\xde\xad\x17\x05\xd0\x2b\x69\x1e\xf6\x29\xd2\x3b\xb6\x45\xb0\x16\x8c\x66\x32\x8b\x94\xde\x66\x60\x9e\xd1\x55\x05\xae\x3e\x30\xca\xff\x4f\x9f\xfc\x5f\x4f\xe4\x58\xdf\xa1\x9a\x22\xcc\xab\xe5\x7b\x16\xbe\xb0\x18\xe9\x0d\x77\x7c\x5d\xe0\x37\x10\x7e\xd5\xda\x19\x4c\xe7\x23\x3c\x0b\x40\xad\x95\x9e\x41\xe1\xb3\xba\x5f\x0e\xab\x35\xfc\x37\x82\x2d\xec\x01\x53\x14\xa0\x99\x8c\x11\xe8\x67\x81\x09\xbf\x65\x69\xf9\x90\xd5\x3a\xb4\x80\xe7\x39\xd3\x9e\x61\xb5\x86\x90\x6d\x31\xf1\xc4\x1e\x4e\xbf\x18\xbd\x0b\xcb\xe7\xb1\x48\xc1\x5d\x50\xaa\x85\x34\x40\x90\x92\x93\x23\x0d\x6e\xd3\x84\x19\x04\x12\x39\xc4\xa6\x36\x8b\x00\x17\xa1\x01\xe2\xe3\x08\x50\x20\x8f\x65\x71\xa4\x29\x93\x78\x21\x89\xcf\xde\x63\xce\xa9\x93\xe5\xfe\xa9\x9b\x1c\xd6\x9d\x36\x6d\x47\x26\x94\xbc\xb7\xd2\x17\xee\x8a\xc7\x78\xba\x6e\x0e\x4d\xbd\x2b\x37\x97\x1f\x93\x8f\xc7\x95\x80\x1f\xa1\x90\x55\x01\x87\xb8\x16\x7e\x08\x17\x51\x03\xfc\x2a\xc5\xeb\x0e\xfb\x9c\xee\x27\x22\x40\x1e\x3b\x56\x2c\x9b\xa7\x87\x4c\xd6\xfe\xef\xdf\x9d\xad\x41\x8a\xa4\xb5\x29\x7f\x8f\xbf\x1d\x9f\xeb\x8a\xa0\x39\x0d\x8d\x72\xf5\x91\x18\x0d\xaf\x8a\xf4\xcd\xdd\x5c\xf6\xb7\xcb\xaa\xb7\x5b\x16\xa3\x1c\xc3\xc2\x06\x6a\x63\x92\x8d\xea\x1b\x29\x0d\x9b\x45\xad\x71\xb9\xdd\x46\x94\xfe\x6b\xd4\x65\x69\x8a\x92\x4f\x3b\xcb\x8b\x3f\xa2\xf9\xec\x04\xd1\x07\xe7\xb9\xb7\xa2\xd1\xec\xb4\x84\x7c\xe1\x76\xf0\xa4\xe4\x68\x50\xed\x2f\x48\x5f\xdc\x8a\xa4\x39\xb9\xd5\x48\xb7\x16\x0e\x2f\x42\x25\xfd\x7c\x96\xf8\x76\xa1\x64\x8e\xda\xa0\xae\x66\x49\x1d\x5f\x63\x45\x54\xc2\xe9\x43\xf9\x15\x29\xf1\x99\x50\xb2\xd7\x80\xcb\x56\x8f\x89\x63\x11\x64\x5a\x5a\x4a\x66\xed\x3a\x5b\xad\x77\x13\x5e\x49\x73\xcb\x74\xf6\xcc\x92\x04\xf5\x85\x92\x99\x77\x43\x69\x7a\xad\x46\x66\x24\x7d\x6c\x8c\x71\xdf\x23\xd7\x60\x55\x97\xb5\xb4\x22\xfa\x24\x24\xd3\xfb\x69\x63\x91\x1b\x23\x5a\x8f\x8f\x8a\xca\x04\x29\x12\x4f\x38\xe9\xda\x59\x9f\x1d\x11\x01\x93\xbc\xdb\xf3\x23\x4b\x76\xa8\x07\x3a\x9c\xdc\x80\x8f\x6f\x75\x71\x2e\xb8\xb5\xd4\xaf\xfe\x94\xda\x87\x19\xdd\xd9\xe0\x0b\x50\x2f\x95\x6c\xfd\x62\xe8\xb4\xde\x38\xbd\x1e\xad\xed\x14\x74\xa6\x5e\xde\xa9\xa4\x28\xe0\x75\xc7\x12\x11\xed\x81\xf8\x2b\x43\x46\x80\xdc\xe1\x9b\xdb\x0e\x53\x12\xb2\xcc\x08\x19\x43\xee\x98\xdd\x75\xe6\x68\x4a\x32\x7b\xbf\x21\x6b\xab\x36\xca\x8b\xcb\x31\x1f\x5c\xd6\x4e\x94\x57\x61\xd6\xb7\x77\xbc\x86\x13\xad\xab\x37\xe0\xaf\x34\xef\xdf\xf5\xed\x98\xca\xc3\xc3\x72\x54\xf0\x8f\x38\x5d\x7a\xd1\x35\xf8\x47\xc4\xad\x6f\x50\x33\xac\xc6\x67\x31\xf2\x18\x0f\xa3\x18\xc8\x51\xdc\xe1\xd6\x1f\xb6\x66\x63\x1b\xfd\x3d\x00\x00\xff\xff\xf2\xe5\x08\x14\x78\x0c\x00\x00")

func templateTo_protoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateTo_protoTmpl,
		"template/to_proto.tmpl",
	)
}

func templateTo_protoTmpl() (*asset, error) {
	bytes, err := templateTo_protoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/to_proto.tmpl", size: 3192, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/enums.tmpl":    templateEnumsTmpl,
	"template/service.tmpl":  templateServiceTmpl,
	"template/to_proto.tmpl": templateTo_protoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"enums.tmpl":    &bintree{templateEnumsTmpl, map[string]*bintree{}},
		"service.tmpl":  &bintree{templateServiceTmpl, map[string]*bintree{}},
		"to_proto.tmpl": &bintree{templateTo_protoTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
