// Copyright 2019-present Facebook
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package main

import (
	"flag"

	"entgo.io/ent/entc"
	"entgo.io/ent/entc/gen"
	"google.golang.org/protobuf/compiler/protogen"
)

var (
	entSchemaPath *string
	snake         = gen.Funcs["snake"].(func(string) string)
)

func main() {
	var flags flag.FlagSet
	entSchemaPath = flags.String("schema_path", "", "ent schema path")
	protogen.Options{
		ParamFunc: flags.Set,
	}.Run(func(plg *protogen.Plugin) error {
		g, err := entc.LoadGraph(*entSchemaPath, &gen.Config{})
		if err != nil {
			return err
		}
		for _, f := range plg.Files {
			if !f.Generate {
				continue
			}
			if err := generateFile(plg, f, g); err != nil {
				return err
			}
		}
		return nil
	})
}

// generateFile generates service implementations from all services defined in the file.
func generateFile(gen *protogen.Plugin, file *protogen.File, graph *gen.Graph) error {
	if len(file.Services) == 0 {
		return nil
	}
	for _, s := range file.Services {
		generateService(gen, file, graph, s)
	}
	return nil
}

// generateService creates a file named <package>_<service_name>.go with an implementation of a *protogen.Service.
func generateService(gen *protogen.Plugin, file *protogen.File, graph *gen.Graph, s *protogen.Service) {
	filename := file.GeneratedFilenamePrefix + "_" + snake(s.GoName) + ".go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)

	g.P("// Code generated by protoc-gen-entgrpc. DO NOT EDIT.")
	g.P("package ", file.GoPackageName)
	g.P()
	entClient := protogen.GoImportPath(graph.Config.Package).Ident("Client")
	g.P("// ", s.GoName, " implements ", s.GoName, "Server")
	g.P("type ", s.GoName, " struct {")
	g.P("client *", entClient)
	g.P("Unimplemented", s.GoName, "Server")
	g.P("}")
	g.P()
	g.P("func New", s.GoName, "(client *", entClient, ") *", s.GoName, "{")
	g.P("return &", s.GoName, "{client: client}")
	g.P("}")

	ctx := protogen.GoImportPath("context").Ident("Context")
	statErr := protogen.GoImportPath("google.golang.org/grpc/status").Ident("Error")
	codeNotImp := protogen.GoImportPath("google.golang.org/grpc/codes").Ident("Unimplemented")
	for _, me := range s.Methods {
		g.P("// ", me.GoName, " implements ", s.GoName, "Server.", me.GoName)
		g.P("func (svc *", s.GoName, ") ", me.GoName, "(ctx ", ctx, ", req *", me.Input.GoIdent, ") (*", me.Output.GoIdent, ", error) {")
		g.P("return nil, ", statErr, "(", codeNotImp, ", \"error\")")
		g.P("}")
		g.P()
	}
}
