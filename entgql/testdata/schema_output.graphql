"""Represents BillProduct object"""
type BillProduct {
  id: ID!
  name: String!
  sku: String!
  quantity: Uint64!
}
"""Represents Category object"""
type Category {
  id: ID!
  text: String!
  status: CategoryStatus!
  config: CategoryConfig
  duration: Duration
  count: Uint64
  strings: [String!]
  todos: [Todo!]
  subCategories: [Category!]
}
"""Ordering options for Category connections"""
input CategoryOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Categories."""
  field: CategoryOrderField!
}
"""Properties by which Category connections can be ordered."""
enum CategoryOrderField {
  ID
  TEXT
  DURATION
  COUNT
  TODOS_COUNT
}
"""CategoryStatus is enum for the field status"""
enum CategoryStatus @goModel(model: "entgo.io/contrib/entgql/internal/todo/ent/category.Status") {
  ENABLED
  DISABLED
}
"""CreateCategoryInput is used for create Category object."""
input CreateCategoryInput {
  text: String!
  status: CategoryStatus!
  config: CategoryConfig
  duration: Duration
  count: Uint64
  strings: [String!]
  todoIDs: [ID!]
  subCategoryIDs: [ID!]
}
"""CreateTodoInput is used for create Todo object."""
input CreateTodoInput {
  status: TodoStatus!
  priority: Int
  text: String!
  init: Map
  parentID: ID
  childIDs: [ID!]
  categoryID: ID
  secretID: ID
}
"""CreateUserInput is used for create User object."""
input CreateUserInput {
  name: String
  username: UUID
  password: String
  metadata: Map
  groupIDs: [ID!]
  friendIDs: [ID!]
}
type Friendship {
  id: ID!
  createdAt: Time!
  userID: ID!
  friendID: ID!
  user: User!
  friend: User!
}
type Group @hasPermissions(permissions: ["ADMIN","MODERATOR"]) {
  id: ID!
  name: String!
  users: [User!]
}
"""The builtin Map type"""
scalar Map
type OneToMany {
  id: ID!
  name: String!
  field2: String
  parent: OneToMany
  children: [OneToMany!]
}
"""Ordering options for OneToMany connections"""
input OneToManyOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order OneToManies."""
  field: OneToManyOrderField!
}
"""Properties by which OneToMany connections can be ordered."""
enum OneToManyOrderField {
  NAME
}
type Project {
  id: ID!
  todos: [Todo!]
}
type Query {
  billProducts: [BillProduct!]!
  categories: [Category!]!
  groups: [Group!]!
  oneToMany: [OneToMany!]!
  """This is the todo item"""
  todos: [Todo!]!
  users: [User!]!
}
"""The builtin Time type"""
scalar Time
type Todo {
  id: ID!
  createdAt: Time!
  status: TodoStatus!
  priorityOrder: Int! @goField(name: "Priority", forceResolver: false)
  text: String!
  categoryID: ID
  category_id: ID
  categoryX: ID @goField(name: "CategoryID", forceResolver: false)
  init: Map
  custom: [Custom!]
  customp: [Custom]
  parent: Todo
  children: [Todo!]
  category: Category
}
"""Ordering options for Todo connections"""
input TodoOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Todos."""
  field: TodoOrderField!
}
"""Properties by which Todo connections can be ordered."""
enum TodoOrderField {
  CREATED_AT
  STATUS
  PRIORITY_ORDER
  TEXT
  PARENT_STATUS
  CHILDREN_COUNT
  CATEGORY_TEXT
}
"""TodoStatus is enum for the field status"""
enum TodoStatus @goModel(model: "entgo.io/contrib/entgql/internal/todo/ent/todo.Status") {
  IN_PROGRESS
  COMPLETED
  PENDING
}
"""The builtin Uint64 type"""
scalar Uint64
"""UpdateCategoryInput is used for update Category object."""
input UpdateCategoryInput {
  text: String
  status: CategoryStatus
  config: CategoryConfig
  clearConfig: Boolean
  duration: Duration
  clearDuration: Boolean
  count: Uint64
  clearCount: Boolean
  strings: [String!]
  appendStrings: [String!]
  clearStrings: Boolean
  addTodoIDs: [ID!]
  removeTodoIDs: [ID!]
  clearTodos: Boolean
  addSubCategoryIDs: [ID!]
  removeSubCategoryIDs: [ID!]
  clearSubCategories: Boolean
}
"""UpdateFriendshipInput is used for update Friendship object."""
input UpdateFriendshipInput {
  createdAt: Time
  userID: ID
  friendID: ID
}
"""UpdateTodoInput is used for update Todo object."""
input UpdateTodoInput {
  status: TodoStatus
  priority: Int
  text: String
  init: Map
  clearInit: Boolean
  parentID: ID
  clearParent: Boolean
  addChildIDs: [ID!]
  removeChildIDs: [ID!]
  clearChildren: Boolean
  secretID: ID
  clearSecret: Boolean
}
"""UpdateUserInput is used for update User object."""
input UpdateUserInput {
  name: String
  username: UUID
  password: String
  clearPassword: Boolean
  metadata: Map
  clearMetadata: Boolean
  addGroupIDs: [ID!]
  removeGroupIDs: [ID!]
  clearGroups: Boolean
  addFriendIDs: [ID!]
  removeFriendIDs: [ID!]
  clearFriends: Boolean
}
type User {
  id: ID!
  name: String!
  username: UUID!
  metadata: Map
  """The groups of the user"""
  groups: [Group!]
  friends: [User!]
  friendships: [Friendship!]
}
"""Ordering options for User connections"""
input UserOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Users."""
  field: UserOrderField!
}
"""Properties by which User connections can be ordered."""
enum UserOrderField {
  GROUPS_COUNT
}
