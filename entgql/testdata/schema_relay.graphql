"""
Represents BillProduct object
"""
type BillProduct implements Node {
  id: ID!
  name: String!
  sku: String!
  quantity: Uint64!
}
"""
BillProductWhereInput is used for filtering BillProduct objects.
"""
input BillProductWhereInput {
  not: BillProductWhereInput
  and: [BillProductWhereInput!]
  or: [BillProductWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  sku field predicates
  """
  sku: String
  skuNEQ: String
  skuIn: [String!]
  skuNotIn: [String!]
  skuGT: String
  skuGTE: String
  skuLT: String
  skuLTE: String
  skuContains: String
  skuHasPrefix: String
  skuHasSuffix: String
  skuEqualFold: String
  skuContainsFold: String
  """
  quantity field predicates
  """
  quantity: Uint64
  quantityNEQ: Uint64
  quantityIn: [Uint64!]
  quantityNotIn: [Uint64!]
  quantityGT: Uint64
  quantityGTE: Uint64
  quantityLT: Uint64
  quantityLTE: Uint64
}
"""
Represents Category object
"""
type Category implements Node {
  id: ID!
  text: String!
  status: CategoryStatus!
  config: CategoryConfig
  types: CategoryTypes
  duration: Duration
  count: Uint64
  strings: [String!]
  todos(
    """
    Pagination limit.
    """
    limit: Int = 100

    """
    Pagination offset.
    """
    offset: Int = 0

    """
    Ordering options for Todos returned from the connection.
    """
    orderBy: [TodoOrder!]

    """
    Filtering options for Todos returned from the connection.
    """
    where: TodoWhereInput
  ): TodoList
  subCategories(
    """
    Pagination limit.
    """
    limit: Int = 100

    """
    Pagination offset.
    """
    offset: Int = 0

    """
    Ordering options for Categories returned from the connection.
    """
    orderBy: [CategoryOrder!]

    """
    Filtering options for Categories returned from the connection.
    """
    where: CategoryWhereInput
  ): CategoryList
}
"""
A connection to a list of items.
"""
type CategoryList {
  """
  Identifies the total count of data items.
  """
  totalCount: Int!
  """
  The list of data items.
  """
  items: [Category]!
}
"""
Ordering options for Category connections
"""
input CategoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Categories.
  """
  field: CategoryOrderField!
}
"""
Properties by which Category connections can be ordered.
"""
enum CategoryOrderField {
  ID
  TEXT
  STATUS
  DURATION
  COUNT
  TODOS_COUNT
}
"""
CategoryStatus is enum for the field status
"""
enum CategoryStatus @goModel(model: "entgo.io/contrib/entgql/internal/todo/ent/category.Status") {
  ENABLED
  DISABLED
}
"""
CategoryWhereInput is used for filtering Category objects.
"""
input CategoryWhereInput {
  not: CategoryWhereInput
  and: [CategoryWhereInput!]
  or: [CategoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  text field predicates
  """
  text: String
  textNEQ: String
  textIn: [String!]
  textNotIn: [String!]
  textGT: String
  textGTE: String
  textLT: String
  textLTE: String
  textContains: String
  textHasPrefix: String
  textHasSuffix: String
  textEqualFold: String
  textContainsFold: String
  """
  status field predicates
  """
  status: CategoryStatus
  statusNEQ: CategoryStatus
  statusIn: [CategoryStatus!]
  statusNotIn: [CategoryStatus!]
  """
  config field predicates
  """
  config: CategoryConfig
  configNEQ: CategoryConfig
  configIn: [CategoryConfig!]
  configNotIn: [CategoryConfig!]
  configGT: CategoryConfig
  configGTE: CategoryConfig
  configLT: CategoryConfig
  configLTE: CategoryConfig
  configIsNil: Boolean
  configNotNil: Boolean
  """
  duration field predicates
  """
  duration: Duration
  durationNEQ: Duration
  durationIn: [Duration!]
  durationNotIn: [Duration!]
  durationGT: Duration
  durationGTE: Duration
  durationLT: Duration
  durationLTE: Duration
  durationIsNil: Boolean
  durationNotNil: Boolean
  """
  count field predicates
  """
  count: Uint64
  countNEQ: Uint64
  countIn: [Uint64!]
  countNotIn: [Uint64!]
  countGT: Uint64
  countGTE: Uint64
  countLT: Uint64
  countLTE: Uint64
  countIsNil: Boolean
  countNotNil: Boolean
  """
  todos edge predicates
  """
  hasTodos: Boolean
  hasTodosWith: [TodoWhereInput!]
  """
  sub_categories edge predicates
  """
  hasSubCategories: Boolean
  hasSubCategoriesWith: [CategoryWhereInput!]
}
"""
CreateCategoryInput is used for create Category object.
"""
input CreateCategoryInput {
  text: String!
  status: CategoryStatus!
  config: CategoryConfig
  types: CategoryTypes
  duration: Duration
  count: Uint64
  strings: [String!]
  todoIDs: [ID!]
  subCategoryIDs: [ID!]
}
"""
CreateTodoInput is used for create Todo object.
"""
input CreateTodoInput {
  status: TodoStatus!
  priority: Int
  text: String!
  init: Map
  parentID: ID
  childIDs: [ID!]
  categoryID: ID
  secretID: ID
}
"""
CreateUserInput is used for create User object.
"""
input CreateUserInput {
  name: String
  username: UUID
  password: String
  requiredMetadata: Map!
  metadata: Map
  groupIDs: [ID!]
  friendIDs: [ID!]
}
type Friendship implements Node {
  id: ID!
  createdAt: Time!
  userID: ID!
  friendID: ID!
  user: User!
  friend: User!
}
"""
A connection to a list of items.
"""
type FriendshipList {
  """
  Identifies the total count of data items.
  """
  totalCount: Int!
  """
  The list of data items.
  """
  items: [Friendship]!
}
"""
FriendshipWhereInput is used for filtering Friendship objects.
"""
input FriendshipWhereInput {
  not: FriendshipWhereInput
  and: [FriendshipWhereInput!]
  or: [FriendshipWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
}
type Group implements Node & NamedNode @hasPermissions(permissions: ["ADMIN","MODERATOR"]) {
  id: ID!
  name: String!
  users(
    """
    Pagination limit.
    """
    limit: Int = 100

    """
    Pagination offset.
    """
    offset: Int = 0

    """
    Ordering options for Users returned from the connection.
    """
    orderBy: UserOrder

    """
    Filtering options for Users returned from the connection.
    """
    where: UserWhereInput
  ): UserList
}
"""
A connection to a list of items.
"""
type GroupList {
  """
  Identifies the total count of data items.
  """
  totalCount: Int!
  """
  The list of data items.
  """
  items: [Group]!
}
"""
GroupWhereInput is used for filtering Group objects.
"""
input GroupWhereInput {
  not: GroupWhereInput
  and: [GroupWhereInput!]
  or: [GroupWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  users edge predicates
  """
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]
}
"""
The builtin Map type
"""
scalar Map
type OneToMany implements Node {
  id: ID!
  name: String!
  field2: String
  parent: OneToMany
  children: [OneToMany!]
}
"""
A connection to a list of items.
"""
type OneToManyList {
  """
  Identifies the total count of data items.
  """
  totalCount: Int!
  """
  The list of data items.
  """
  items: [OneToMany]!
}
"""
Ordering options for OneToMany connections
"""
input OneToManyOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order OneToManies.
  """
  field: OneToManyOrderField!
}
"""
Properties by which OneToMany connections can be ordered.
"""
enum OneToManyOrderField {
  NAME
}
"""
OneToManyWhereInput is used for filtering OneToMany objects.
"""
input OneToManyWhereInput {
  not: OneToManyWhereInput
  and: [OneToManyWhereInput!]
  or: [OneToManyWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  field2 field predicates
  """
  field2: String
  field2NEQ: String
  field2In: [String!]
  field2NotIn: [String!]
  field2GT: String
  field2GTE: String
  field2LT: String
  field2LTE: String
  field2Contains: String
  field2HasPrefix: String
  field2HasSuffix: String
  field2IsNil: Boolean
  field2NotNil: Boolean
  field2EqualFold: String
  field2ContainsFold: String
  """
  parent edge predicates
  """
  hasParent: Boolean
  hasParentWith: [OneToManyWhereInput!]
  """
  children edge predicates
  """
  hasChildren: Boolean
  hasChildrenWith: [OneToManyWhereInput!]
}
type Organization implements Node @goModel(model: "entgo.io/contrib/entgql/internal/todo/ent.Workspace") {
  id: ID!
  name: String!
}
"""
OrganizationWhereInput is used for filtering Workspace objects.
"""
input OrganizationWhereInput {
  not: OrganizationWhereInput
  and: [OrganizationWhereInput!]
  or: [OrganizationWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
}
type Project implements Node {
  id: ID!
  todos(
    """
    Pagination limit.
    """
    limit: Int = 100

    """
    Pagination offset.
    """
    offset: Int = 0

    """
    Ordering options for Todos returned from the connection.
    """
    orderBy: [TodoOrder!]

    """
    Filtering options for Todos returned from the connection.
    """
    where: TodoWhereInput
  ): TodoList
}
"""
ProjectWhereInput is used for filtering Project objects.
"""
input ProjectWhereInput {
  not: ProjectWhereInput
  and: [ProjectWhereInput!]
  or: [ProjectWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  todos edge predicates
  """
  hasTodos: Boolean
  hasTodosWith: [TodoWhereInput!]
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  billProducts: [BillProduct!]!
  categories(
    """
    Pagination limit.
    """
    limit: Int = 100

    """
    Pagination offset.
    """
    offset: Int = 0

    """
    Ordering options for Categories returned from the connection.
    """
    orderBy: [CategoryOrder!]

    """
    Filtering options for Categories returned from the connection.
    """
    where: CategoryWhereInput
  ): CategoryList
  groups(
    """
    Pagination limit.
    """
    limit: Int = 100

    """
    Pagination offset.
    """
    offset: Int = 0

    """
    Filtering options for Groups returned from the connection.
    """
    where: GroupWhereInput
  ): GroupList
  oneToMany(
    """
    Pagination limit.
    """
    limit: Int = 100

    """
    Pagination offset.
    """
    offset: Int = 0

    """
    Ordering options for OneToManies returned from the connection.
    """
    orderBy: OneToManyOrder

    """
    Filtering options for OneToManies returned from the connection.
    """
    where: OneToManyWhereInput
  ): OneToManyList
  """
  This is the todo item
  """
  todos(
    """
    Pagination limit.
    """
    limit: Int = 100

    """
    Pagination offset.
    """
    offset: Int = 0

    """
    Ordering options for Todos returned from the connection.
    """
    orderBy: [TodoOrder!]

    """
    Filtering options for Todos returned from the connection.
    """
    where: TodoWhereInput
  ): TodoList
  users(
    """
    Pagination limit.
    """
    limit: Int = 100

    """
    Pagination offset.
    """
    offset: Int = 0

    """
    Ordering options for Users returned from the connection.
    """
    orderBy: UserOrder

    """
    Filtering options for Users returned from the connection.
    """
    where: UserWhereInput
  ): UserList
}
"""
The builtin Time type
"""
scalar Time
type Todo implements Node {
  id: ID!
  createdAt: Time!
  status: TodoStatus!
  priorityOrder: Int! @goField(name: "Priority", forceResolver: false)
  text: String!
  categoryID: ID
  category_id: ID
  categoryX: ID @goField(name: "CategoryID", forceResolver: false)
  init: Map
  custom: [Custom!]
  customp: [Custom]
  """
  Todo parent
  """
  parent: Todo
  """
  Todo children
  """
  children(
    """
    Pagination limit.
    """
    limit: Int = 100

    """
    Pagination offset.
    """
    offset: Int = 0

    """
    Ordering options for Todos returned from the connection.
    """
    orderBy: [TodoOrder!]

    """
    Filtering options for Todos returned from the connection.
    """
    where: TodoWhereInput
  ): TodoList
  category: Category
}
"""
A connection to a list of items.
"""
type TodoList {
  """
  Identifies the total count of data items.
  """
  totalCount: Int!
  """
  The list of data items.
  """
  items: [Todo]!
}
"""
Ordering options for Todo connections
"""
input TodoOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Todos.
  """
  field: TodoOrderField!
}
"""
Properties by which Todo connections can be ordered.
"""
enum TodoOrderField {
  CREATED_AT
  STATUS
  PRIORITY_ORDER
  TEXT
  PARENT_STATUS
  CHILDREN_COUNT
  CATEGORY_TEXT
}
"""
TodoStatus is enum for the field status
"""
enum TodoStatus @goModel(model: "entgo.io/contrib/entgql/internal/todo/ent/todo.Status") {
  IN_PROGRESS
  COMPLETED
  PENDING
}
"""
TodoWhereInput is used for filtering Todo objects.
"""
input TodoWhereInput {
  not: TodoWhereInput
  and: [TodoWhereInput!]
  or: [TodoWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  status field predicates
  """
  status: TodoStatus
  statusNEQ: TodoStatus
  statusIn: [TodoStatus!]
  statusNotIn: [TodoStatus!]
  """
  priority field predicates
  """
  priority: Int
  priorityNEQ: Int
  priorityIn: [Int!]
  priorityNotIn: [Int!]
  priorityGT: Int
  priorityGTE: Int
  priorityLT: Int
  priorityLTE: Int
  """
  text field predicates
  """
  text: String
  textNEQ: String
  textIn: [String!]
  textNotIn: [String!]
  textGT: String
  textGTE: String
  textLT: String
  textLTE: String
  textContains: String
  textHasPrefix: String
  textHasSuffix: String
  textEqualFold: String
  textContainsFold: String
  """
  category_id field predicates
  """
  categoryID: ID
  categoryIDNEQ: ID
  categoryIDIn: [ID!]
  categoryIDNotIn: [ID!]
  categoryIDIsNil: Boolean
  categoryIDNotNil: Boolean
  """
  parent edge predicates
  """
  hasParent: Boolean
  hasParentWith: [TodoWhereInput!]
  """
  children edge predicates
  """
  hasChildren: Boolean
  hasChildrenWith: [TodoWhereInput!]
  """
  category edge predicates
  """
  hasCategory: Boolean
  hasCategoryWith: [CategoryWhereInput!]
}
"""
The builtin Uint64 type
"""
scalar Uint64
"""
UpdateCategoryInput is used for update Category object.
"""
input UpdateCategoryInput {
  text: String
  status: CategoryStatus
  config: CategoryConfig
  clearConfig: Boolean
  types: CategoryTypes
  clearTypes: Boolean
  duration: Duration
  clearDuration: Boolean
  count: Uint64
  clearCount: Boolean
  strings: [String!]
  appendStrings: [String!]
  clearStrings: Boolean
  addTodoIDs: [ID!]
  removeTodoIDs: [ID!]
  clearTodos: Boolean
  addSubCategoryIDs: [ID!]
  removeSubCategoryIDs: [ID!]
  clearSubCategories: Boolean
}
"""
UpdateFriendshipInput is used for update Friendship object.
"""
input UpdateFriendshipInput {
  createdAt: Time
  userID: ID
  friendID: ID
}
"""
UpdateTodoInput is used for update Todo object.
"""
input UpdateTodoInput {
  status: TodoStatus
  priority: Int
  text: String
  init: Map
  clearInit: Boolean
  parentID: ID
  clearParent: Boolean
  addChildIDs: [ID!]
  removeChildIDs: [ID!]
  clearChildren: Boolean
  secretID: ID
  clearSecret: Boolean
}
"""
UpdateUserInput is used for update User object.
"""
input UpdateUserInput {
  name: String
  username: UUID
  password: String
  clearPassword: Boolean
  requiredMetadata: Map
  metadata: Map
  clearMetadata: Boolean
  addGroupIDs: [ID!]
  removeGroupIDs: [ID!]
  clearGroups: Boolean
  addFriendIDs: [ID!]
  removeFriendIDs: [ID!]
  clearFriends: Boolean
}
type User implements Node {
  id: ID!
  name: String!
  username: UUID!
  requiredMetadata: Map!
  metadata: Map
  """
  The groups of the user
  """
  groups(
    """
    Pagination limit.
    """
    limit: Int = 100

    """
    Pagination offset.
    """
    offset: Int = 0

    """
    Filtering options for Groups returned from the connection.
    """
    where: GroupWhereInput
  ): GroupList
  friends(
    """
    Pagination limit.
    """
    limit: Int = 100

    """
    Pagination offset.
    """
    offset: Int = 0

    """
    Ordering options for Users returned from the connection.
    """
    orderBy: UserOrder

    """
    Filtering options for Users returned from the connection.
    """
    where: UserWhereInput
  ): UserList
  friendships(
    """
    Pagination limit.
    """
    limit: Int = 100

    """
    Pagination offset.
    """
    offset: Int = 0

    """
    Filtering options for Friendships returned from the connection.
    """
    where: FriendshipWhereInput
  ): FriendshipList
}
"""
A connection to a list of items.
"""
type UserList {
  """
  Identifies the total count of data items.
  """
  totalCount: Int!
  """
  The list of data items.
  """
  items: [User]!
}
"""
Ordering options for User connections
"""
input UserOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Users.
  """
  field: UserOrderField!
}
"""
Properties by which User connections can be ordered.
"""
enum UserOrderField {
  GROUPS_COUNT
}
"""
UserWhereInput is used for filtering User objects.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  username field predicates
  """
  username: UUID
  usernameNEQ: UUID
  usernameIn: [UUID!]
  usernameNotIn: [UUID!]
  usernameGT: UUID
  usernameGTE: UUID
  usernameLT: UUID
  usernameLTE: UUID
  """
  groups edge predicates
  """
  hasGroups: Boolean
  hasGroupsWith: [GroupWhereInput!]
  """
  friends edge predicates
  """
  hasFriends: Boolean
  hasFriendsWith: [UserWhereInput!]
  """
  friendships edge predicates
  """
  hasFriendships: Boolean
  hasFriendshipsWith: [FriendshipWhereInput!]
}
