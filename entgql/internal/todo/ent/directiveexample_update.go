// Copyright 2019-present Facebook
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/contrib/entgql/internal/todo/ent/directiveexample"
	"entgo.io/contrib/entgql/internal/todo/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DirectiveExampleUpdate is the builder for updating DirectiveExample entities.
type DirectiveExampleUpdate struct {
	config
	hooks     []Hook
	mutation  *DirectiveExampleMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the DirectiveExampleUpdate builder.
func (deu *DirectiveExampleUpdate) Where(ps ...predicate.DirectiveExample) *DirectiveExampleUpdate {
	deu.mutation.Where(ps...)
	return deu
}

// SetOnTypeField sets the "on_type_field" field.
func (deu *DirectiveExampleUpdate) SetOnTypeField(s string) *DirectiveExampleUpdate {
	deu.mutation.SetOnTypeField(s)
	return deu
}

// SetNillableOnTypeField sets the "on_type_field" field if the given value is not nil.
func (deu *DirectiveExampleUpdate) SetNillableOnTypeField(s *string) *DirectiveExampleUpdate {
	if s != nil {
		deu.SetOnTypeField(*s)
	}
	return deu
}

// ClearOnTypeField clears the value of the "on_type_field" field.
func (deu *DirectiveExampleUpdate) ClearOnTypeField() *DirectiveExampleUpdate {
	deu.mutation.ClearOnTypeField()
	return deu
}

// SetOnMutationFields sets the "on_mutation_fields" field.
func (deu *DirectiveExampleUpdate) SetOnMutationFields(s string) *DirectiveExampleUpdate {
	deu.mutation.SetOnMutationFields(s)
	return deu
}

// SetNillableOnMutationFields sets the "on_mutation_fields" field if the given value is not nil.
func (deu *DirectiveExampleUpdate) SetNillableOnMutationFields(s *string) *DirectiveExampleUpdate {
	if s != nil {
		deu.SetOnMutationFields(*s)
	}
	return deu
}

// ClearOnMutationFields clears the value of the "on_mutation_fields" field.
func (deu *DirectiveExampleUpdate) ClearOnMutationFields() *DirectiveExampleUpdate {
	deu.mutation.ClearOnMutationFields()
	return deu
}

// SetOnMutationCreate sets the "on_mutation_create" field.
func (deu *DirectiveExampleUpdate) SetOnMutationCreate(s string) *DirectiveExampleUpdate {
	deu.mutation.SetOnMutationCreate(s)
	return deu
}

// SetNillableOnMutationCreate sets the "on_mutation_create" field if the given value is not nil.
func (deu *DirectiveExampleUpdate) SetNillableOnMutationCreate(s *string) *DirectiveExampleUpdate {
	if s != nil {
		deu.SetOnMutationCreate(*s)
	}
	return deu
}

// ClearOnMutationCreate clears the value of the "on_mutation_create" field.
func (deu *DirectiveExampleUpdate) ClearOnMutationCreate() *DirectiveExampleUpdate {
	deu.mutation.ClearOnMutationCreate()
	return deu
}

// SetOnMutationUpdate sets the "on_mutation_update" field.
func (deu *DirectiveExampleUpdate) SetOnMutationUpdate(s string) *DirectiveExampleUpdate {
	deu.mutation.SetOnMutationUpdate(s)
	return deu
}

// SetNillableOnMutationUpdate sets the "on_mutation_update" field if the given value is not nil.
func (deu *DirectiveExampleUpdate) SetNillableOnMutationUpdate(s *string) *DirectiveExampleUpdate {
	if s != nil {
		deu.SetOnMutationUpdate(*s)
	}
	return deu
}

// ClearOnMutationUpdate clears the value of the "on_mutation_update" field.
func (deu *DirectiveExampleUpdate) ClearOnMutationUpdate() *DirectiveExampleUpdate {
	deu.mutation.ClearOnMutationUpdate()
	return deu
}

// SetOnAllFields sets the "on_all_fields" field.
func (deu *DirectiveExampleUpdate) SetOnAllFields(s string) *DirectiveExampleUpdate {
	deu.mutation.SetOnAllFields(s)
	return deu
}

// SetNillableOnAllFields sets the "on_all_fields" field if the given value is not nil.
func (deu *DirectiveExampleUpdate) SetNillableOnAllFields(s *string) *DirectiveExampleUpdate {
	if s != nil {
		deu.SetOnAllFields(*s)
	}
	return deu
}

// ClearOnAllFields clears the value of the "on_all_fields" field.
func (deu *DirectiveExampleUpdate) ClearOnAllFields() *DirectiveExampleUpdate {
	deu.mutation.ClearOnAllFields()
	return deu
}

// Mutation returns the DirectiveExampleMutation object of the builder.
func (deu *DirectiveExampleUpdate) Mutation() *DirectiveExampleMutation {
	return deu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (deu *DirectiveExampleUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, deu.sqlSave, deu.mutation, deu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (deu *DirectiveExampleUpdate) SaveX(ctx context.Context) int {
	affected, err := deu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (deu *DirectiveExampleUpdate) Exec(ctx context.Context) error {
	_, err := deu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (deu *DirectiveExampleUpdate) ExecX(ctx context.Context) {
	if err := deu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (deu *DirectiveExampleUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DirectiveExampleUpdate {
	deu.modifiers = append(deu.modifiers, modifiers...)
	return deu
}

func (deu *DirectiveExampleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(directiveexample.Table, directiveexample.Columns, sqlgraph.NewFieldSpec(directiveexample.FieldID, field.TypeInt))
	if ps := deu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := deu.mutation.OnTypeField(); ok {
		_spec.SetField(directiveexample.FieldOnTypeField, field.TypeString, value)
	}
	if deu.mutation.OnTypeFieldCleared() {
		_spec.ClearField(directiveexample.FieldOnTypeField, field.TypeString)
	}
	if value, ok := deu.mutation.OnMutationFields(); ok {
		_spec.SetField(directiveexample.FieldOnMutationFields, field.TypeString, value)
	}
	if deu.mutation.OnMutationFieldsCleared() {
		_spec.ClearField(directiveexample.FieldOnMutationFields, field.TypeString)
	}
	if value, ok := deu.mutation.OnMutationCreate(); ok {
		_spec.SetField(directiveexample.FieldOnMutationCreate, field.TypeString, value)
	}
	if deu.mutation.OnMutationCreateCleared() {
		_spec.ClearField(directiveexample.FieldOnMutationCreate, field.TypeString)
	}
	if value, ok := deu.mutation.OnMutationUpdate(); ok {
		_spec.SetField(directiveexample.FieldOnMutationUpdate, field.TypeString, value)
	}
	if deu.mutation.OnMutationUpdateCleared() {
		_spec.ClearField(directiveexample.FieldOnMutationUpdate, field.TypeString)
	}
	if value, ok := deu.mutation.OnAllFields(); ok {
		_spec.SetField(directiveexample.FieldOnAllFields, field.TypeString, value)
	}
	if deu.mutation.OnAllFieldsCleared() {
		_spec.ClearField(directiveexample.FieldOnAllFields, field.TypeString)
	}
	_spec.AddModifiers(deu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, deu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{directiveexample.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	deu.mutation.done = true
	return n, nil
}

// DirectiveExampleUpdateOne is the builder for updating a single DirectiveExample entity.
type DirectiveExampleUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *DirectiveExampleMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetOnTypeField sets the "on_type_field" field.
func (deuo *DirectiveExampleUpdateOne) SetOnTypeField(s string) *DirectiveExampleUpdateOne {
	deuo.mutation.SetOnTypeField(s)
	return deuo
}

// SetNillableOnTypeField sets the "on_type_field" field if the given value is not nil.
func (deuo *DirectiveExampleUpdateOne) SetNillableOnTypeField(s *string) *DirectiveExampleUpdateOne {
	if s != nil {
		deuo.SetOnTypeField(*s)
	}
	return deuo
}

// ClearOnTypeField clears the value of the "on_type_field" field.
func (deuo *DirectiveExampleUpdateOne) ClearOnTypeField() *DirectiveExampleUpdateOne {
	deuo.mutation.ClearOnTypeField()
	return deuo
}

// SetOnMutationFields sets the "on_mutation_fields" field.
func (deuo *DirectiveExampleUpdateOne) SetOnMutationFields(s string) *DirectiveExampleUpdateOne {
	deuo.mutation.SetOnMutationFields(s)
	return deuo
}

// SetNillableOnMutationFields sets the "on_mutation_fields" field if the given value is not nil.
func (deuo *DirectiveExampleUpdateOne) SetNillableOnMutationFields(s *string) *DirectiveExampleUpdateOne {
	if s != nil {
		deuo.SetOnMutationFields(*s)
	}
	return deuo
}

// ClearOnMutationFields clears the value of the "on_mutation_fields" field.
func (deuo *DirectiveExampleUpdateOne) ClearOnMutationFields() *DirectiveExampleUpdateOne {
	deuo.mutation.ClearOnMutationFields()
	return deuo
}

// SetOnMutationCreate sets the "on_mutation_create" field.
func (deuo *DirectiveExampleUpdateOne) SetOnMutationCreate(s string) *DirectiveExampleUpdateOne {
	deuo.mutation.SetOnMutationCreate(s)
	return deuo
}

// SetNillableOnMutationCreate sets the "on_mutation_create" field if the given value is not nil.
func (deuo *DirectiveExampleUpdateOne) SetNillableOnMutationCreate(s *string) *DirectiveExampleUpdateOne {
	if s != nil {
		deuo.SetOnMutationCreate(*s)
	}
	return deuo
}

// ClearOnMutationCreate clears the value of the "on_mutation_create" field.
func (deuo *DirectiveExampleUpdateOne) ClearOnMutationCreate() *DirectiveExampleUpdateOne {
	deuo.mutation.ClearOnMutationCreate()
	return deuo
}

// SetOnMutationUpdate sets the "on_mutation_update" field.
func (deuo *DirectiveExampleUpdateOne) SetOnMutationUpdate(s string) *DirectiveExampleUpdateOne {
	deuo.mutation.SetOnMutationUpdate(s)
	return deuo
}

// SetNillableOnMutationUpdate sets the "on_mutation_update" field if the given value is not nil.
func (deuo *DirectiveExampleUpdateOne) SetNillableOnMutationUpdate(s *string) *DirectiveExampleUpdateOne {
	if s != nil {
		deuo.SetOnMutationUpdate(*s)
	}
	return deuo
}

// ClearOnMutationUpdate clears the value of the "on_mutation_update" field.
func (deuo *DirectiveExampleUpdateOne) ClearOnMutationUpdate() *DirectiveExampleUpdateOne {
	deuo.mutation.ClearOnMutationUpdate()
	return deuo
}

// SetOnAllFields sets the "on_all_fields" field.
func (deuo *DirectiveExampleUpdateOne) SetOnAllFields(s string) *DirectiveExampleUpdateOne {
	deuo.mutation.SetOnAllFields(s)
	return deuo
}

// SetNillableOnAllFields sets the "on_all_fields" field if the given value is not nil.
func (deuo *DirectiveExampleUpdateOne) SetNillableOnAllFields(s *string) *DirectiveExampleUpdateOne {
	if s != nil {
		deuo.SetOnAllFields(*s)
	}
	return deuo
}

// ClearOnAllFields clears the value of the "on_all_fields" field.
func (deuo *DirectiveExampleUpdateOne) ClearOnAllFields() *DirectiveExampleUpdateOne {
	deuo.mutation.ClearOnAllFields()
	return deuo
}

// Mutation returns the DirectiveExampleMutation object of the builder.
func (deuo *DirectiveExampleUpdateOne) Mutation() *DirectiveExampleMutation {
	return deuo.mutation
}

// Where appends a list predicates to the DirectiveExampleUpdate builder.
func (deuo *DirectiveExampleUpdateOne) Where(ps ...predicate.DirectiveExample) *DirectiveExampleUpdateOne {
	deuo.mutation.Where(ps...)
	return deuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (deuo *DirectiveExampleUpdateOne) Select(field string, fields ...string) *DirectiveExampleUpdateOne {
	deuo.fields = append([]string{field}, fields...)
	return deuo
}

// Save executes the query and returns the updated DirectiveExample entity.
func (deuo *DirectiveExampleUpdateOne) Save(ctx context.Context) (*DirectiveExample, error) {
	return withHooks(ctx, deuo.sqlSave, deuo.mutation, deuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (deuo *DirectiveExampleUpdateOne) SaveX(ctx context.Context) *DirectiveExample {
	node, err := deuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (deuo *DirectiveExampleUpdateOne) Exec(ctx context.Context) error {
	_, err := deuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (deuo *DirectiveExampleUpdateOne) ExecX(ctx context.Context) {
	if err := deuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (deuo *DirectiveExampleUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DirectiveExampleUpdateOne {
	deuo.modifiers = append(deuo.modifiers, modifiers...)
	return deuo
}

func (deuo *DirectiveExampleUpdateOne) sqlSave(ctx context.Context) (_node *DirectiveExample, err error) {
	_spec := sqlgraph.NewUpdateSpec(directiveexample.Table, directiveexample.Columns, sqlgraph.NewFieldSpec(directiveexample.FieldID, field.TypeInt))
	id, ok := deuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DirectiveExample.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := deuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, directiveexample.FieldID)
		for _, f := range fields {
			if !directiveexample.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != directiveexample.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := deuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := deuo.mutation.OnTypeField(); ok {
		_spec.SetField(directiveexample.FieldOnTypeField, field.TypeString, value)
	}
	if deuo.mutation.OnTypeFieldCleared() {
		_spec.ClearField(directiveexample.FieldOnTypeField, field.TypeString)
	}
	if value, ok := deuo.mutation.OnMutationFields(); ok {
		_spec.SetField(directiveexample.FieldOnMutationFields, field.TypeString, value)
	}
	if deuo.mutation.OnMutationFieldsCleared() {
		_spec.ClearField(directiveexample.FieldOnMutationFields, field.TypeString)
	}
	if value, ok := deuo.mutation.OnMutationCreate(); ok {
		_spec.SetField(directiveexample.FieldOnMutationCreate, field.TypeString, value)
	}
	if deuo.mutation.OnMutationCreateCleared() {
		_spec.ClearField(directiveexample.FieldOnMutationCreate, field.TypeString)
	}
	if value, ok := deuo.mutation.OnMutationUpdate(); ok {
		_spec.SetField(directiveexample.FieldOnMutationUpdate, field.TypeString, value)
	}
	if deuo.mutation.OnMutationUpdateCleared() {
		_spec.ClearField(directiveexample.FieldOnMutationUpdate, field.TypeString)
	}
	if value, ok := deuo.mutation.OnAllFields(); ok {
		_spec.SetField(directiveexample.FieldOnAllFields, field.TypeString, value)
	}
	if deuo.mutation.OnAllFieldsCleared() {
		_spec.ClearField(directiveexample.FieldOnAllFields, field.TypeString)
	}
	_spec.AddModifiers(deuo.modifiers...)
	_node = &DirectiveExample{config: deuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, deuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{directiveexample.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	deuo.mutation.done = true
	return _node, nil
}
