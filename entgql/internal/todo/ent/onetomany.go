// Copyright 2019-present Facebook
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/contrib/entgql/internal/todo/ent/onetomany"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// OneToMany is the model entity for the OneToMany schema.
type OneToMany struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Field2 holds the value of the "field2" field.
	Field2 string `json:"field2,omitempty"`
	// ParentID holds the value of the "parent_id" field.
	ParentID int `json:"parent_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OneToManyQuery when eager-loading is set.
	Edges        OneToManyEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OneToManyEdges holds the relations/edges for other nodes in the graph.
type OneToManyEdges struct {
	// Parent holds the value of the parent edge.
	Parent *OneToMany `json:"parent,omitempty"`
	// Children holds the value of the children edge.
	Children []*OneToMany `json:"children,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedChildren map[string][]*OneToMany
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OneToManyEdges) ParentOrErr() (*OneToMany, error) {
	if e.loadedTypes[0] {
		if e.Parent == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: onetomany.Label}
		}
		return e.Parent, nil
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e OneToManyEdges) ChildrenOrErr() ([]*OneToMany, error) {
	if e.loadedTypes[1] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OneToMany) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case onetomany.FieldID, onetomany.FieldParentID:
			values[i] = new(sql.NullInt64)
		case onetomany.FieldName, onetomany.FieldField2:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OneToMany fields.
func (otm *OneToMany) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case onetomany.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			otm.ID = int(value.Int64)
		case onetomany.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				otm.Name = value.String
			}
		case onetomany.FieldField2:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field field2", values[i])
			} else if value.Valid {
				otm.Field2 = value.String
			}
		case onetomany.FieldParentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field parent_id", values[i])
			} else if value.Valid {
				otm.ParentID = int(value.Int64)
			}
		default:
			otm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OneToMany.
// This includes values selected through modifiers, order, etc.
func (otm *OneToMany) Value(name string) (ent.Value, error) {
	return otm.selectValues.Get(name)
}

// QueryParent queries the "parent" edge of the OneToMany entity.
func (otm *OneToMany) QueryParent() *OneToManyQuery {
	return NewOneToManyClient(otm.config).QueryParent(otm)
}

// QueryChildren queries the "children" edge of the OneToMany entity.
func (otm *OneToMany) QueryChildren() *OneToManyQuery {
	return NewOneToManyClient(otm.config).QueryChildren(otm)
}

// Update returns a builder for updating this OneToMany.
// Note that you need to call OneToMany.Unwrap() before calling this method if this OneToMany
// was returned from a transaction, and the transaction was committed or rolled back.
func (otm *OneToMany) Update() *OneToManyUpdateOne {
	return NewOneToManyClient(otm.config).UpdateOne(otm)
}

// Unwrap unwraps the OneToMany entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (otm *OneToMany) Unwrap() *OneToMany {
	_tx, ok := otm.config.driver.(*txDriver)
	if !ok {
		panic("ent: OneToMany is not a transactional entity")
	}
	otm.config.driver = _tx.drv
	return otm
}

// String implements the fmt.Stringer.
func (otm *OneToMany) String() string {
	var builder strings.Builder
	builder.WriteString("OneToMany(")
	builder.WriteString(fmt.Sprintf("id=%v, ", otm.ID))
	builder.WriteString("name=")
	builder.WriteString(otm.Name)
	builder.WriteString(", ")
	builder.WriteString("field2=")
	builder.WriteString(otm.Field2)
	builder.WriteString(", ")
	builder.WriteString("parent_id=")
	builder.WriteString(fmt.Sprintf("%v", otm.ParentID))
	builder.WriteByte(')')
	return builder.String()
}

// NamedChildren returns the Children named value or an error if the edge was not
// loaded in eager-loading with this name.
func (otm *OneToMany) NamedChildren(name string) ([]*OneToMany, error) {
	if otm.Edges.namedChildren == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := otm.Edges.namedChildren[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (otm *OneToMany) appendNamedChildren(name string, edges ...*OneToMany) {
	if otm.Edges.namedChildren == nil {
		otm.Edges.namedChildren = make(map[string][]*OneToMany)
	}
	if len(edges) == 0 {
		otm.Edges.namedChildren[name] = []*OneToMany{}
	} else {
		otm.Edges.namedChildren[name] = append(otm.Edges.namedChildren[name], edges...)
	}
}

// OneToManies is a parsable slice of OneToMany.
type OneToManies []*OneToMany
