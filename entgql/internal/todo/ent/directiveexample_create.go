// Copyright 2019-present Facebook
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/contrib/entgql/internal/todo/ent/directiveexample"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DirectiveExampleCreate is the builder for creating a DirectiveExample entity.
type DirectiveExampleCreate struct {
	config
	mutation *DirectiveExampleMutation
	hooks    []Hook
}

// SetOnTypeField sets the "on_type_field" field.
func (dec *DirectiveExampleCreate) SetOnTypeField(s string) *DirectiveExampleCreate {
	dec.mutation.SetOnTypeField(s)
	return dec
}

// SetNillableOnTypeField sets the "on_type_field" field if the given value is not nil.
func (dec *DirectiveExampleCreate) SetNillableOnTypeField(s *string) *DirectiveExampleCreate {
	if s != nil {
		dec.SetOnTypeField(*s)
	}
	return dec
}

// SetOnMutationFields sets the "on_mutation_fields" field.
func (dec *DirectiveExampleCreate) SetOnMutationFields(s string) *DirectiveExampleCreate {
	dec.mutation.SetOnMutationFields(s)
	return dec
}

// SetNillableOnMutationFields sets the "on_mutation_fields" field if the given value is not nil.
func (dec *DirectiveExampleCreate) SetNillableOnMutationFields(s *string) *DirectiveExampleCreate {
	if s != nil {
		dec.SetOnMutationFields(*s)
	}
	return dec
}

// SetOnMutationCreate sets the "on_mutation_create" field.
func (dec *DirectiveExampleCreate) SetOnMutationCreate(s string) *DirectiveExampleCreate {
	dec.mutation.SetOnMutationCreate(s)
	return dec
}

// SetNillableOnMutationCreate sets the "on_mutation_create" field if the given value is not nil.
func (dec *DirectiveExampleCreate) SetNillableOnMutationCreate(s *string) *DirectiveExampleCreate {
	if s != nil {
		dec.SetOnMutationCreate(*s)
	}
	return dec
}

// SetOnMutationUpdate sets the "on_mutation_update" field.
func (dec *DirectiveExampleCreate) SetOnMutationUpdate(s string) *DirectiveExampleCreate {
	dec.mutation.SetOnMutationUpdate(s)
	return dec
}

// SetNillableOnMutationUpdate sets the "on_mutation_update" field if the given value is not nil.
func (dec *DirectiveExampleCreate) SetNillableOnMutationUpdate(s *string) *DirectiveExampleCreate {
	if s != nil {
		dec.SetOnMutationUpdate(*s)
	}
	return dec
}

// SetOnAllFields sets the "on_all_fields" field.
func (dec *DirectiveExampleCreate) SetOnAllFields(s string) *DirectiveExampleCreate {
	dec.mutation.SetOnAllFields(s)
	return dec
}

// SetNillableOnAllFields sets the "on_all_fields" field if the given value is not nil.
func (dec *DirectiveExampleCreate) SetNillableOnAllFields(s *string) *DirectiveExampleCreate {
	if s != nil {
		dec.SetOnAllFields(*s)
	}
	return dec
}

// Mutation returns the DirectiveExampleMutation object of the builder.
func (dec *DirectiveExampleCreate) Mutation() *DirectiveExampleMutation {
	return dec.mutation
}

// Save creates the DirectiveExample in the database.
func (dec *DirectiveExampleCreate) Save(ctx context.Context) (*DirectiveExample, error) {
	return withHooks(ctx, dec.sqlSave, dec.mutation, dec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dec *DirectiveExampleCreate) SaveX(ctx context.Context) *DirectiveExample {
	v, err := dec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dec *DirectiveExampleCreate) Exec(ctx context.Context) error {
	_, err := dec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dec *DirectiveExampleCreate) ExecX(ctx context.Context) {
	if err := dec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dec *DirectiveExampleCreate) check() error {
	return nil
}

func (dec *DirectiveExampleCreate) sqlSave(ctx context.Context) (*DirectiveExample, error) {
	if err := dec.check(); err != nil {
		return nil, err
	}
	_node, _spec := dec.createSpec()
	if err := sqlgraph.CreateNode(ctx, dec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	dec.mutation.id = &_node.ID
	dec.mutation.done = true
	return _node, nil
}

func (dec *DirectiveExampleCreate) createSpec() (*DirectiveExample, *sqlgraph.CreateSpec) {
	var (
		_node = &DirectiveExample{config: dec.config}
		_spec = sqlgraph.NewCreateSpec(directiveexample.Table, sqlgraph.NewFieldSpec(directiveexample.FieldID, field.TypeInt))
	)
	if value, ok := dec.mutation.OnTypeField(); ok {
		_spec.SetField(directiveexample.FieldOnTypeField, field.TypeString, value)
		_node.OnTypeField = value
	}
	if value, ok := dec.mutation.OnMutationFields(); ok {
		_spec.SetField(directiveexample.FieldOnMutationFields, field.TypeString, value)
		_node.OnMutationFields = value
	}
	if value, ok := dec.mutation.OnMutationCreate(); ok {
		_spec.SetField(directiveexample.FieldOnMutationCreate, field.TypeString, value)
		_node.OnMutationCreate = value
	}
	if value, ok := dec.mutation.OnMutationUpdate(); ok {
		_spec.SetField(directiveexample.FieldOnMutationUpdate, field.TypeString, value)
		_node.OnMutationUpdate = value
	}
	if value, ok := dec.mutation.OnAllFields(); ok {
		_spec.SetField(directiveexample.FieldOnAllFields, field.TypeString, value)
		_node.OnAllFields = value
	}
	return _node, _spec
}

// DirectiveExampleCreateBulk is the builder for creating many DirectiveExample entities in bulk.
type DirectiveExampleCreateBulk struct {
	config
	err      error
	builders []*DirectiveExampleCreate
}

// Save creates the DirectiveExample entities in the database.
func (decb *DirectiveExampleCreateBulk) Save(ctx context.Context) ([]*DirectiveExample, error) {
	if decb.err != nil {
		return nil, decb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(decb.builders))
	nodes := make([]*DirectiveExample, len(decb.builders))
	mutators := make([]Mutator, len(decb.builders))
	for i := range decb.builders {
		func(i int, root context.Context) {
			builder := decb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DirectiveExampleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, decb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, decb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, decb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (decb *DirectiveExampleCreateBulk) SaveX(ctx context.Context) []*DirectiveExample {
	v, err := decb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (decb *DirectiveExampleCreateBulk) Exec(ctx context.Context) error {
	_, err := decb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (decb *DirectiveExampleCreateBulk) ExecX(ctx context.Context) {
	if err := decb.Exec(ctx); err != nil {
		panic(err)
	}
}
