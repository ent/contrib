// Copyright 2019-present Facebook
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"time"

	"entgo.io/contrib/entgql/internal/todo/ent/category"
	"entgo.io/contrib/entgql/internal/todo/ent/schema/schematype"
	"entgo.io/contrib/entgql/internal/todo/ent/todo"
)

// CreateCategoryInput represents a mutation input for creating categories.
type CreateCategoryInput struct {
	Text     string
	Status   category.Status
	Config   *schematype.CategoryConfig
	Duration *time.Duration
	Count    *uint64
	Strings  *[]string
	TodoIDs  []int
}

// Mutate applies the CreateCategoryInput on the CategoryCreate builder.
func (i *CreateCategoryInput) Mutate(m *CategoryCreate) {
	m.SetText(i.Text)
	m.SetStatus(i.Status)
	m.SetConfig(i.Config)
	if v := i.Duration; v != nil {
		m.SetDuration(*v)
	}
	if v := i.Count; v != nil {
		m.SetCount(*v)
	}
	if v := i.Strings; v != nil {
		m.SetStrings(*v)
	}
	if ids := i.TodoIDs; len(ids) > 0 {
		m.AddTodoIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateCategoryInput on the create builder.
func (c *CategoryCreate) SetInput(i CreateCategoryInput) *CategoryCreate {
	i.Mutate(c)
	return c
}

// UpdateCategoryInput represents a mutation input for updating categories.
type UpdateCategoryInput struct {
	Text          *string
	Status        *category.Status
	Config        *schematype.CategoryConfig
	ClearConfig   bool
	Duration      *time.Duration
	ClearDuration bool
	Count         *uint64
	ClearCount    bool
	Strings       *[]string
	ClearStrings  bool
	AddTodoIDs    []int
	RemoveTodoIDs []int
}

// Mutate applies the UpdateCategoryInput on the CategoryMutation.
func (i *UpdateCategoryInput) Mutate(m *CategoryMutation) {
	if v := i.Text; v != nil {
		m.SetText(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if i.ClearConfig {
		m.ClearConfig()
	}
	if v := i.Config; v != nil {
		m.SetConfig(v)
	}
	if i.ClearDuration {
		m.ClearDuration()
	}
	if v := i.Duration; v != nil {
		m.SetDuration(*v)
	}
	if i.ClearCount {
		m.ClearCount()
	}
	if v := i.Count; v != nil {
		m.SetCount(*v)
	}
	if i.ClearStrings {
		m.ClearStrings()
	}
	if v := i.Strings; v != nil {
		m.SetStrings(*v)
	}
	if ids := i.AddTodoIDs; len(ids) > 0 {
		m.AddTodoIDs(ids...)
	}
	if ids := i.RemoveTodoIDs; len(ids) > 0 {
		m.RemoveTodoIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateCategoryInput on the update builder.
func (u *CategoryUpdate) SetInput(i UpdateCategoryInput) *CategoryUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateCategoryInput on the update-one builder.
func (u *CategoryUpdateOne) SetInput(i UpdateCategoryInput) *CategoryUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateGroupInput represents a mutation input for creating groups.
type CreateGroupInput struct {
	Name    *string
	UserIDs []int
}

// Mutate applies the CreateGroupInput on the GroupCreate builder.
func (i *CreateGroupInput) Mutate(m *GroupCreate) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if ids := i.UserIDs; len(ids) > 0 {
		m.AddUserIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateGroupInput on the create builder.
func (c *GroupCreate) SetInput(i CreateGroupInput) *GroupCreate {
	i.Mutate(c)
	return c
}

// UpdateGroupInput represents a mutation input for updating groups.
type UpdateGroupInput struct {
	Name          *string
	AddUserIDs    []int
	RemoveUserIDs []int
}

// Mutate applies the UpdateGroupInput on the GroupMutation.
func (i *UpdateGroupInput) Mutate(m *GroupMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if ids := i.AddUserIDs; len(ids) > 0 {
		m.AddUserIDs(ids...)
	}
	if ids := i.RemoveUserIDs; len(ids) > 0 {
		m.RemoveUserIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateGroupInput on the update builder.
func (u *GroupUpdate) SetInput(i UpdateGroupInput) *GroupUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateGroupInput on the update-one builder.
func (u *GroupUpdateOne) SetInput(i UpdateGroupInput) *GroupUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateTodoInput represents a mutation input for creating todos.
type CreateTodoInput struct {
	CreatedAt  *time.Time
	Status     todo.Status
	Priority   *int
	Text       string
	ParentID   *int
	ChildIDs   []int
	CategoryID *int
	SecretID   *int
}

// Mutate applies the CreateTodoInput on the TodoCreate builder.
func (i *CreateTodoInput) Mutate(m *TodoCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	m.SetStatus(i.Status)
	if v := i.Priority; v != nil {
		m.SetPriority(*v)
	}
	m.SetText(i.Text)
	if v := i.ParentID; v != nil {
		m.SetParentID(*v)
	}
	if ids := i.ChildIDs; len(ids) > 0 {
		m.AddChildIDs(ids...)
	}
	if v := i.CategoryID; v != nil {
		m.SetCategoryID(*v)
	}
	if v := i.SecretID; v != nil {
		m.SetSecretID(*v)
	}
}

// SetInput applies the change-set in the CreateTodoInput on the create builder.
func (c *TodoCreate) SetInput(i CreateTodoInput) *TodoCreate {
	i.Mutate(c)
	return c
}

// UpdateTodoInput represents a mutation input for updating todos.
type UpdateTodoInput struct {
	Status         *todo.Status
	Priority       *int
	Text           *string
	ParentID       *int
	ClearParent    bool
	AddChildIDs    []int
	RemoveChildIDs []int
	CategoryID     *int
	ClearCategory  bool
	SecretID       *int
	ClearSecret    bool
}

// Mutate applies the UpdateTodoInput on the TodoMutation.
func (i *UpdateTodoInput) Mutate(m *TodoMutation) {
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.Priority; v != nil {
		m.SetPriority(*v)
	}
	if v := i.Text; v != nil {
		m.SetText(*v)
	}
	if i.ClearParent {
		m.ClearParent()
	}
	if v := i.ParentID; v != nil {
		m.SetParentID(*v)
	}
	if ids := i.AddChildIDs; len(ids) > 0 {
		m.AddChildIDs(ids...)
	}
	if ids := i.RemoveChildIDs; len(ids) > 0 {
		m.RemoveChildIDs(ids...)
	}
	if i.ClearCategory {
		m.ClearCategory()
	}
	if v := i.CategoryID; v != nil {
		m.SetCategoryID(*v)
	}
	if i.ClearSecret {
		m.ClearSecret()
	}
	if v := i.SecretID; v != nil {
		m.SetSecretID(*v)
	}
}

// SetInput applies the change-set in the UpdateTodoInput on the update builder.
func (u *TodoUpdate) SetInput(i UpdateTodoInput) *TodoUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateTodoInput on the update-one builder.
func (u *TodoUpdateOne) SetInput(i UpdateTodoInput) *TodoUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	Name     *string
	GroupIDs []int
}

// Mutate applies the CreateUserInput on the UserCreate builder.
func (i *CreateUserInput) Mutate(m *UserCreate) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if ids := i.GroupIDs; len(ids) > 0 {
		m.AddGroupIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateUserInput on the create builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c)
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	Name           *string
	AddGroupIDs    []int
	RemoveGroupIDs []int
}

// Mutate applies the UpdateUserInput on the UserMutation.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if ids := i.AddGroupIDs; len(ids) > 0 {
		m.AddGroupIDs(ids...)
	}
	if ids := i.RemoveGroupIDs; len(ids) > 0 {
		m.RemoveGroupIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the update builder.
func (u *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateUserInput on the update-one builder.
func (u *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(u.Mutation())
	return u
}
