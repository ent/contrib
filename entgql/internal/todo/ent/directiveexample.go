// Copyright 2019-present Facebook
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/contrib/entgql/internal/todo/ent/directiveexample"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// DirectiveExample is the model entity for the DirectiveExample schema.
type DirectiveExample struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// OnTypeField holds the value of the "on_type_field" field.
	OnTypeField string `json:"on_type_field,omitempty"`
	// OnMutationFields holds the value of the "on_mutation_fields" field.
	OnMutationFields string `json:"on_mutation_fields,omitempty"`
	// OnMutationCreate holds the value of the "on_mutation_create" field.
	OnMutationCreate string `json:"on_mutation_create,omitempty"`
	// OnMutationUpdate holds the value of the "on_mutation_update" field.
	OnMutationUpdate string `json:"on_mutation_update,omitempty"`
	// OnAllFields holds the value of the "on_all_fields" field.
	OnAllFields  string `json:"on_all_fields,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DirectiveExample) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case directiveexample.FieldID:
			values[i] = new(sql.NullInt64)
		case directiveexample.FieldOnTypeField, directiveexample.FieldOnMutationFields, directiveexample.FieldOnMutationCreate, directiveexample.FieldOnMutationUpdate, directiveexample.FieldOnAllFields:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DirectiveExample fields.
func (de *DirectiveExample) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case directiveexample.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			de.ID = int(value.Int64)
		case directiveexample.FieldOnTypeField:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field on_type_field", values[i])
			} else if value.Valid {
				de.OnTypeField = value.String
			}
		case directiveexample.FieldOnMutationFields:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field on_mutation_fields", values[i])
			} else if value.Valid {
				de.OnMutationFields = value.String
			}
		case directiveexample.FieldOnMutationCreate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field on_mutation_create", values[i])
			} else if value.Valid {
				de.OnMutationCreate = value.String
			}
		case directiveexample.FieldOnMutationUpdate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field on_mutation_update", values[i])
			} else if value.Valid {
				de.OnMutationUpdate = value.String
			}
		case directiveexample.FieldOnAllFields:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field on_all_fields", values[i])
			} else if value.Valid {
				de.OnAllFields = value.String
			}
		default:
			de.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DirectiveExample.
// This includes values selected through modifiers, order, etc.
func (de *DirectiveExample) Value(name string) (ent.Value, error) {
	return de.selectValues.Get(name)
}

// Update returns a builder for updating this DirectiveExample.
// Note that you need to call DirectiveExample.Unwrap() before calling this method if this DirectiveExample
// was returned from a transaction, and the transaction was committed or rolled back.
func (de *DirectiveExample) Update() *DirectiveExampleUpdateOne {
	return NewDirectiveExampleClient(de.config).UpdateOne(de)
}

// Unwrap unwraps the DirectiveExample entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (de *DirectiveExample) Unwrap() *DirectiveExample {
	_tx, ok := de.config.driver.(*txDriver)
	if !ok {
		panic("ent: DirectiveExample is not a transactional entity")
	}
	de.config.driver = _tx.drv
	return de
}

// String implements the fmt.Stringer.
func (de *DirectiveExample) String() string {
	var builder strings.Builder
	builder.WriteString("DirectiveExample(")
	builder.WriteString(fmt.Sprintf("id=%v, ", de.ID))
	builder.WriteString("on_type_field=")
	builder.WriteString(de.OnTypeField)
	builder.WriteString(", ")
	builder.WriteString("on_mutation_fields=")
	builder.WriteString(de.OnMutationFields)
	builder.WriteString(", ")
	builder.WriteString("on_mutation_create=")
	builder.WriteString(de.OnMutationCreate)
	builder.WriteString(", ")
	builder.WriteString("on_mutation_update=")
	builder.WriteString(de.OnMutationUpdate)
	builder.WriteString(", ")
	builder.WriteString("on_all_fields=")
	builder.WriteString(de.OnAllFields)
	builder.WriteByte(')')
	return builder.String()
}

// DirectiveExamples is a parsable slice of DirectiveExample.
type DirectiveExamples []*DirectiveExample
