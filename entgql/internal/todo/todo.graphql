interface Node {
  id: ID!
}

type CategoryConfig {
  maxMembers: Int
}

input CategoryConfigInput {
  maxMembers: Int
}

enum CategoryStatus {
  ENABLED
  DISABLED
}

enum Status {
  IN_PROGRESS
  COMPLETED
}

scalar Time
scalar Duration
scalar Uint64

type Todo implements Node {
  id: ID!
  createdAt: Time
  status: Status!
  priority: Int!
  text: String!
  parent: Todo
  children: [Todo!]
  category: Category
}

type Category implements Node {
  id: ID!
  text: String!
  strings: [String]
  todos(after: Cursor, first: Int, before: Cursor, last: Int, orderBy: TodoOrder): TodoConnection
}

type User implements Node {
  id: ID!
  name: String!
  groups(after: Cursor, first: Int, before: Cursor, last: Int): GroupConnection
}

type Group implements Node {
  id: ID!
  name: String!
  users(after: Cursor, first: Int, before: Cursor, last: Int): UserConnection
}

input TodoInput {
  status: Status! = IN_PROGRESS
  priority: Int
  text: String!
  parent: ID
  category_id: ID
}

scalar Cursor

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: Cursor
  endCursor: Cursor
}

type TodoConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [TodoEdge]
}

type TodoEdge {
  node: Todo
  cursor: Cursor!
}

type UserConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [UserEdge]
}

type UserEdge {
  node: User
  cursor: Cursor!
}

type GroupConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [GroupEdge]
}

type GroupEdge {
  node: Group
  cursor: Cursor!
}

enum OrderDirection {
  ASC
  DESC
}

enum TodoOrderField {
  CREATED_AT
  PRIORITY
  STATUS
  TEXT
}

input TodoOrder {
  direction: OrderDirection!
  field: TodoOrderField
}

type Query {
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!
  todos(after: Cursor, first: Int, before: Cursor, last: Int, orderBy: TodoOrder, where: TodoWhereInput): TodoConnection
  users(after: Cursor, first: Int, before: Cursor, last: Int, where: UserWhereInput): UserConnection
  groups(after: Cursor, first: Int, before: Cursor, last: Int, where: GroupWhereInput): GroupConnection
}

type Mutation {
  createTodo(todo: TodoInput!): Todo!
  clearTodos: Int!
}
