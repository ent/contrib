// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package todo

import (
	"entgo.io/contrib/entgql"
	"entgo.io/contrib/entgql/internal/todouuid/ent"
	"github.com/google/uuid"
)

type Project struct {
	ID   uuid.UUID           `json:"id"`
	Todo *ent.TodoConnection `json:"todo"`
}

func (Project) IsNode() {}

// A connection to a list of items.
type ProjectConnection struct {
	// A list of edges.
	Edges []*ProjectEdge `json:"edges"`
	// Information to aid in pagination.
	PageInfo *entgql.PageInfo[uuid.UUID] `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount"`
}

// An edge in a connection.
type ProjectEdge struct {
	// The item at the end of the edge.
	Node *Project `json:"node"`
	// A cursor for use in pagination.
	Cursor entgql.Cursor[uuid.UUID] `json:"cursor"`
}

// ProjectWhereInput is used for filtering Project objects.
// Input was generated by ent.
type ProjectWhereInput struct {
	Not *ProjectWhereInput   `json:"not"`
	And []*ProjectWhereInput `json:"and"`
	Or  []*ProjectWhereInput `json:"or"`
	// id field predicates
	ID      *uuid.UUID  `json:"id"`
	IDNeq   *uuid.UUID  `json:"idNEQ"`
	IDIn    []uuid.UUID `json:"idIn"`
	IDNotIn []uuid.UUID `json:"idNotIn"`
	IDGt    *uuid.UUID  `json:"idGT"`
	IDGte   *uuid.UUID  `json:"idGTE"`
	IDLt    *uuid.UUID  `json:"idLT"`
	IDLte   *uuid.UUID  `json:"idLTE"`
	// todo edge predicates
	HasTodo     *bool                 `json:"hasTodo"`
	HasTodoWith []*ent.TodoWhereInput `json:"hasTodoWith"`
}
