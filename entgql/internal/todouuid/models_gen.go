// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package todo

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"entgo.io/contrib/entgql"
	"entgo.io/contrib/entgql/internal/todouuid/ent"
	"github.com/google/uuid"
)

type OneToMany struct {
	ID       uuid.UUID    `json:"id"`
	Name     string       `json:"name"`
	Field2   *string      `json:"field2"`
	Parent   *OneToMany   `json:"parent"`
	Children []*OneToMany `json:"children"`
}

func (OneToMany) IsNode() {}

// A connection to a list of items.
type OneToManyConnection struct {
	// A list of edges.
	Edges []*OneToManyEdge `json:"edges"`
	// Information to aid in pagination.
	PageInfo *entgql.PageInfo[uuid.UUID] `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount"`
}

// An edge in a connection.
type OneToManyEdge struct {
	// The item at the end of the edge.
	Node *OneToMany `json:"node"`
	// A cursor for use in pagination.
	Cursor entgql.Cursor[uuid.UUID] `json:"cursor"`
}

// Ordering options for OneToMany connections
type OneToManyOrder struct {
	// The ordering direction.
	Direction entgql.OrderDirection `json:"direction"`
	// The field by which to order OneToManies.
	Field OneToManyOrderField `json:"field"`
}

// OneToManyWhereInput is used for filtering OneToMany objects.
type OneToManyWhereInput struct {
	Not *OneToManyWhereInput   `json:"not"`
	And []*OneToManyWhereInput `json:"and"`
	Or  []*OneToManyWhereInput `json:"or"`
	// id field predicates
	ID      *uuid.UUID  `json:"id"`
	IDNeq   *uuid.UUID  `json:"idNEQ"`
	IDIn    []uuid.UUID `json:"idIn"`
	IDNotIn []uuid.UUID `json:"idNotIn"`
	IDGt    *uuid.UUID  `json:"idGT"`
	IDGte   *uuid.UUID  `json:"idGTE"`
	IDLt    *uuid.UUID  `json:"idLT"`
	IDLte   *uuid.UUID  `json:"idLTE"`
	// name field predicates
	Name             *string  `json:"name"`
	NameNeq          *string  `json:"nameNEQ"`
	NameIn           []string `json:"nameIn"`
	NameNotIn        []string `json:"nameNotIn"`
	NameGt           *string  `json:"nameGT"`
	NameGte          *string  `json:"nameGTE"`
	NameLt           *string  `json:"nameLT"`
	NameLte          *string  `json:"nameLTE"`
	NameContains     *string  `json:"nameContains"`
	NameHasPrefix    *string  `json:"nameHasPrefix"`
	NameHasSuffix    *string  `json:"nameHasSuffix"`
	NameEqualFold    *string  `json:"nameEqualFold"`
	NameContainsFold *string  `json:"nameContainsFold"`
	// field2 field predicates
	Field2             *string  `json:"field2"`
	Field2neq          *string  `json:"field2NEQ"`
	Field2In           []string `json:"field2In"`
	Field2NotIn        []string `json:"field2NotIn"`
	Field2gt           *string  `json:"field2GT"`
	Field2gte          *string  `json:"field2GTE"`
	Field2lt           *string  `json:"field2LT"`
	Field2lte          *string  `json:"field2LTE"`
	Field2Contains     *string  `json:"field2Contains"`
	Field2HasPrefix    *string  `json:"field2HasPrefix"`
	Field2HasSuffix    *string  `json:"field2HasSuffix"`
	Field2IsNil        *bool    `json:"field2IsNil"`
	Field2NotNil       *bool    `json:"field2NotNil"`
	Field2EqualFold    *string  `json:"field2EqualFold"`
	Field2ContainsFold *string  `json:"field2ContainsFold"`
	// parent edge predicates
	HasParent     *bool                  `json:"hasParent"`
	HasParentWith []*OneToManyWhereInput `json:"hasParentWith"`
	// children edge predicates
	HasChildren     *bool                  `json:"hasChildren"`
	HasChildrenWith []*OneToManyWhereInput `json:"hasChildrenWith"`
}

type Project struct {
	ID    uuid.UUID           `json:"id"`
	Todos *ent.TodoConnection `json:"todos"`
}

func (Project) IsNode() {}

// ProjectWhereInput is used for filtering Project objects.
type ProjectWhereInput struct {
	Not *ProjectWhereInput   `json:"not"`
	And []*ProjectWhereInput `json:"and"`
	Or  []*ProjectWhereInput `json:"or"`
	// id field predicates
	ID      *uuid.UUID  `json:"id"`
	IDNeq   *uuid.UUID  `json:"idNEQ"`
	IDIn    []uuid.UUID `json:"idIn"`
	IDNotIn []uuid.UUID `json:"idNotIn"`
	IDGt    *uuid.UUID  `json:"idGT"`
	IDGte   *uuid.UUID  `json:"idGTE"`
	IDLt    *uuid.UUID  `json:"idLT"`
	IDLte   *uuid.UUID  `json:"idLTE"`
	// todos edge predicates
	HasTodos     *bool                 `json:"hasTodos"`
	HasTodosWith []*ent.TodoWhereInput `json:"hasTodosWith"`
}

// UpdateFriendshipInput is used for update Friendship object.
type UpdateFriendshipInput struct {
	CreatedAt *time.Time `json:"createdAt"`
	UserID    *uuid.UUID `json:"userID"`
	FriendID  *uuid.UUID `json:"friendID"`
}

// Properties by which OneToMany connections can be ordered.
type OneToManyOrderField string

const (
	OneToManyOrderFieldName OneToManyOrderField = "NAME"
)

var AllOneToManyOrderField = []OneToManyOrderField{
	OneToManyOrderFieldName,
}

func (e OneToManyOrderField) IsValid() bool {
	switch e {
	case OneToManyOrderFieldName:
		return true
	}
	return false
}

func (e OneToManyOrderField) String() string {
	return string(e)
}

func (e *OneToManyOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OneToManyOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OneToManyOrderField", str)
	}
	return nil
}

func (e OneToManyOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
