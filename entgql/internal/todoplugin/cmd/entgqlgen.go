// Copyright 2019-present Facebook
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package main

import (
	"flag"
	"log"

	"entgo.io/contrib/entgql"
	"entgo.io/contrib/entgql/plugin"
	"entgo.io/ent/entc"
	"entgo.io/ent/entc/gen"
	"github.com/99designs/gqlgen/api"
	"github.com/99designs/gqlgen/codegen/config"
)

func main() {
	var (
		schemaPath = flag.String("path", "", "path to schema directory")
	)
	flag.Parse()
	if *schemaPath == "" {
		log.Fatal("entgqlgen: must specify schema path. use entgqlgen -path ./ent/schema")
	}

	graph, err := entc.LoadGraph(*schemaPath, &gen.Config{})
	if err != nil {
		log.Fatalf("entgqlgen: failed loading ent graph: %v", err)
	}

	cfg, err := config.LoadConfigFromDefaultLocations()
	if err != nil {
		log.Fatalf("failed to load config %v", err)
	}

	entgqlPlugin, err := plugin.NewEntGQLPlugin(graph,
		plugin.WithRelaySpecification(true),
	)
	if err != nil {
		log.Fatalf("failed to create entgql plugin: %v", err)
	}

	ex, err := entgql.NewExtension()
	if err != nil {
		log.Fatalf("creating entgql extension: %v", err)
	}
	err = entc.Generate(*schemaPath, &gen.Config{
		Header: `
			// Copyright 2019-present Facebook
			//
			// Licensed under the Apache License, Version 2.0 (the "License");
			// you may not use this file except in compliance with the License.
			// You may obtain a copy of the License at
			//
			//      http://www.apache.org/licenses/LICENSE-2.0
			//
			// Unless required by applicable law or agreed to in writing, software
			// distributed under the License is distributed on an "AS IS" BASIS,
			// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
			// See the License for the specific language governing permissions and
			// limitations under the License.
			//
			// Code generated by entc, DO NOT EDIT.
		`,
	}, entc.Extensions(ex))
	if err != nil {
		log.Fatalf("running ent codegen: %v", err)
	}

	err = api.Generate(cfg, api.PrependPlugin(entgqlPlugin))
	if err != nil {
		log.Fatalf("running gqlgen: %v", err)
	}
}
