directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Category implements Node & Entity {
  id: ID!
  text: String!
  uuidA: UUID
  status: CategoryStatus!
  config: CategoryConfig!
  duration: Duration!
  count: Uint64! @deprecated(reason: "We don't use this field anymore")
  strings: [String!]
  todos: [Todo!]
}
"""A connection to a list of items."""
type CategoryConnection {
  """A list of edges."""
  edges: [CategoryEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type CategoryEdge {
  """The item at the end of the edge."""
  node: Category
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Category connections"""
input CategoryOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Categories."""
  field: CategoryOrderField!
}
"""Properties by which Category connections can be ordered."""
enum CategoryOrderField {
  TEXT
  DURATION
}
"""CategoryStatus is enum for the field status"""
enum CategoryStatus @goModel(model: "entgo.io/contrib/entgql/internal/todoplugin/ent/category.Status") {
  ENABLED
  DISABLED
}
"""
CategoryWhereInput is used for filtering Category objects.
Input was generated by ent.
"""
input CategoryWhereInput {
  not: CategoryWhereInput
  and: [CategoryWhereInput!]
  or: [CategoryWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """text field predicates"""
  text: String
  textNEQ: String
  textIn: [String!]
  textNotIn: [String!]
  textGT: String
  textGTE: String
  textLT: String
  textLTE: String
  textContains: String
  textHasPrefix: String
  textHasSuffix: String
  textEqualFold: String
  textContainsFold: String
  """uuid_a field predicates"""
  uuidA: UUID
  uuidANEQ: UUID
  uuidAIn: [UUID!]
  uuidANotIn: [UUID!]
  uuidAGT: UUID
  uuidAGTE: UUID
  uuidALT: UUID
  uuidALTE: UUID
  uuidAIsNil: Boolean
  uuidANotNil: Boolean
  """status field predicates"""
  status: CategoryStatus
  statusNEQ: CategoryStatus
  statusIn: [CategoryStatus!]
  statusNotIn: [CategoryStatus!]
  """config field predicates"""
  config: CategoryConfigInput
  configNEQ: CategoryConfigInput
  configIn: [CategoryConfigInput!]
  configNotIn: [CategoryConfigInput!]
  configGT: CategoryConfigInput
  configGTE: CategoryConfigInput
  configLT: CategoryConfigInput
  configLTE: CategoryConfigInput
  configIsNil: Boolean
  configNotNil: Boolean
  """duration field predicates"""
  duration: Duration
  durationNEQ: Duration
  durationIn: [Duration!]
  durationNotIn: [Duration!]
  durationGT: Duration
  durationGTE: Duration
  durationLT: Duration
  durationLTE: Duration
  durationIsNil: Boolean
  durationNotNil: Boolean
  """count field predicates"""
  count: Uint64
  countNEQ: Uint64
  countIn: [Uint64!]
  countNotIn: [Uint64!]
  countGT: Uint64
  countGTE: Uint64
  countLT: Uint64
  countLTE: Uint64
  countIsNil: Boolean
  countNotNil: Boolean
  """todos edge predicates"""
  hasTodos: Boolean
  hasTodosWith: [TodoWhereInput!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type MasterUser implements Node @goModel(model: "entgo.io/contrib/entgql/internal/todoplugin/ent.User") {
  id: ID!
  username: String!
  age: Float!
  amount: Float!
  role: Role!
  nullableString: String
}
"""A connection to a list of items."""
type MasterUserConnection {
  """A list of edges."""
  edges: [MasterUserEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type MasterUserEdge {
  """The item at the end of the edge."""
  node: MasterUser
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""
MasterUserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input MasterUserWhereInput {
  not: MasterUserWhereInput
  and: [MasterUserWhereInput!]
  or: [MasterUserWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """username field predicates"""
  username: String
  usernameNEQ: String
  usernameIn: [String!]
  usernameNotIn: [String!]
  usernameGT: String
  usernameGTE: String
  usernameLT: String
  usernameLTE: String
  usernameContains: String
  usernameHasPrefix: String
  usernameHasSuffix: String
  usernameEqualFold: String
  usernameContainsFold: String
  """role field predicates"""
  role: Role
  roleNEQ: Role
  roleIn: [Role!]
  roleNotIn: [Role!]
  """nullable_string field predicates"""
  nullableString: String
  nullableStringNEQ: String
  nullableStringIn: [String!]
  nullableStringNotIn: [String!]
  nullableStringGT: String
  nullableStringGTE: String
  nullableStringLT: String
  nullableStringLTE: String
  nullableStringContains: String
  nullableStringHasPrefix: String
  nullableStringHasSuffix: String
  nullableStringIsNil: Boolean
  nullableStringNotNil: Boolean
  nullableStringEqualFold: String
  nullableStringContainsFold: String
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "entgo.io/contrib/entgql/internal/todoplugin/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  todos(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
  ,
    """Returns the first _n_ elements from the list."""
    first: Int
  ,
    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor
  ,
    """Returns the last _n_ elements from the list."""
    last: Int
  ,
    """Ordering options for Todos returned from the connection."""
    orderBy: TodoOrder
  ,
    """Filtering options for Todos returned from the connection."""
    where: TodoWhereInput
  ): TodoConnection!
}
"""Role is enum for the field role"""
enum Role @goModel(model: "entgo.io/contrib/entgql/internal/todoplugin/ent/role.Role") {
  ADMIN
  USER
  UNKNOWN
}
"""Status is enum for the field status"""
enum Status @goModel(model: "entgo.io/contrib/entgql/internal/todoplugin/ent/todo.Status") {
  IN_PROGRESS
  COMPLETED
}
type Todo implements Node {
  id: ID!
  createdAt: Time!
  visibilityStatus: VisibilityStatus!
  status: Status!
  priority: Int!
  text: String!
  parent: Todo
  childrenConnection(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
  ,
    """Returns the first _n_ elements from the list."""
    first: Int
  ,
    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor
  ,
    """Returns the last _n_ elements from the list."""
    last: Int
  ,
    """Ordering options for Todos returned from the connection."""
    orderBy: TodoOrder
  ,
    """Filtering options for Todos returned from the connection."""
    where: TodoWhereInput
  ): TodoConnection! @goField(name: "children", forceResolver: false)
  children(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
  ,
    """Returns the first _n_ elements from the list."""
    first: Int
  ,
    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor
  ,
    """Returns the last _n_ elements from the list."""
    last: Int
  ,
    """Ordering options for Todos returned from the connection."""
    orderBy: TodoOrder
  ,
    """Filtering options for Todos returned from the connection."""
    where: TodoWhereInput
  ): TodoConnection!
}
"""A connection to a list of items."""
type TodoConnection {
  """A list of edges."""
  edges: [TodoEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type TodoEdge {
  """The item at the end of the edge."""
  node: Todo
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Todo connections"""
input TodoOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Todos."""
  field: TodoOrderField!
}
"""Properties by which Todo connections can be ordered."""
enum TodoOrderField {
  CREATED_AT
  VISIBILITY_STATUS
  STATUS
  PRIORITY
  TEXT
}
"""
TodoWhereInput is used for filtering Todo objects.
Input was generated by ent.
"""
input TodoWhereInput {
  not: TodoWhereInput
  and: [TodoWhereInput!]
  or: [TodoWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """visibility_status field predicates"""
  visibilityStatus: VisibilityStatus
  visibilityStatusNEQ: VisibilityStatus
  visibilityStatusIn: [VisibilityStatus!]
  visibilityStatusNotIn: [VisibilityStatus!]
  """status field predicates"""
  status: Status
  statusNEQ: Status
  statusIn: [Status!]
  statusNotIn: [Status!]
  """priority field predicates"""
  priority: Int
  priorityNEQ: Int
  priorityIn: [Int!]
  priorityNotIn: [Int!]
  priorityGT: Int
  priorityGTE: Int
  priorityLT: Int
  priorityLTE: Int
  """text field predicates"""
  text: String
  textNEQ: String
  textIn: [String!]
  textNotIn: [String!]
  textGT: String
  textGTE: String
  textLT: String
  textLTE: String
  textContains: String
  textHasPrefix: String
  textHasSuffix: String
  textEqualFold: String
  textContainsFold: String
  """parent edge predicates"""
  hasParent: Boolean
  hasParentWith: [TodoWhereInput!]
  """children edge predicates"""
  hasChildren: Boolean
  hasChildrenWith: [TodoWhereInput!]
}
"""VisibilityStatus is enum for the field visibility_status"""
enum VisibilityStatus @goModel(model: "entgo.io/contrib/entgql/internal/todoplugin/ent/todo.VisibilityStatus") {
  LISTING
  HIDDEN
}
