// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package todo

import (
	"entgo.io/contrib/entgql"
	"entgo.io/contrib/entgql/internal/todogotype/ent"
)

// CreateUserInput is used for create User object.
// Input was generated by ent.
type CreateUserInput struct {
	Name      *string                `json:"name"`
	Username  *string                `json:"username"`
	Password  *string                `json:"password"`
	Metadata  map[string]interface{} `json:"metadata"`
	GroupIDs  []string               `json:"groupIDs"`
	FriendIDs []string               `json:"friendIDs"`
}

type Project struct {
	ID   string              `json:"id"`
	Todo *ent.TodoConnection `json:"todo"`
}

func (Project) IsNode() {}

// A connection to a list of items.
type ProjectConnection struct {
	// A list of edges.
	Edges []*ProjectEdge `json:"edges"`
	// Information to aid in pagination.
	PageInfo *entgql.PageInfo[string] `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount"`
}

// An edge in a connection.
type ProjectEdge struct {
	// The item at the end of the edge.
	Node *Project `json:"node"`
	// A cursor for use in pagination.
	Cursor entgql.Cursor[string] `json:"cursor"`
}

// ProjectWhereInput is used for filtering Project objects.
// Input was generated by ent.
type ProjectWhereInput struct {
	Not *ProjectWhereInput   `json:"not"`
	And []*ProjectWhereInput `json:"and"`
	Or  []*ProjectWhereInput `json:"or"`
	// id field predicates
	ID      *string  `json:"id"`
	IDNeq   *string  `json:"idNEQ"`
	IDIn    []string `json:"idIn"`
	IDNotIn []string `json:"idNotIn"`
	IDGt    *string  `json:"idGT"`
	IDGte   *string  `json:"idGTE"`
	IDLt    *string  `json:"idLT"`
	IDLte   *string  `json:"idLTE"`
	// todo edge predicates
	HasTodo     *bool                 `json:"hasTodo"`
	HasTodoWith []*ent.TodoWhereInput `json:"hasTodoWith"`
}

// UpdateUserInput is used for update User object.
// Input was generated by ent.
type UpdateUserInput struct {
	Name            *string                `json:"name"`
	Username        *string                `json:"username"`
	Password        *string                `json:"password"`
	ClearPassword   *bool                  `json:"clearPassword"`
	Metadata        map[string]interface{} `json:"metadata"`
	ClearMetadata   *bool                  `json:"clearMetadata"`
	AddGroupIDs     []string               `json:"addGroupIDs"`
	RemoveGroupIDs  []string               `json:"removeGroupIDs"`
	ClearGroups     *bool                  `json:"clearGroups"`
	AddFriendIDs    []string               `json:"addFriendIDs"`
	RemoveFriendIDs []string               `json:"removeFriendIDs"`
	ClearFriends    *bool                  `json:"clearFriends"`
}
