{{/*
Copyright 2019-present Facebook Inc. All rights reserved.
This source code is licensed under the Apache 2.0 license found
in the LICENSE file in the root directory of this source tree.
*/}}

{{/* gotype: entgo.io/ent/entc/gen.Graph */}}

{{ define "gql_collection" }}
{{ template "header" $ }}

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

{{ range $node := filterNodes $.Nodes }}

{{ $edges := dict }}
{{ range $edge := filterEdges $node.Edges }}
	{{ if $annotation := $edge.Annotations.EntGQL }}
		{{ if $annotation.Bind }}
			{{ if $annotation.Mapping }}{{ fail "bind and mapping annotations are mutually exclusive" }}{{ end }}
			{{ $edges = set $edges $edge.Name (list $edge.Type.Name (list $edge.Name)) }}
		{{ end }}
		{{ if $mapping := $annotation.Mapping }}
			{{ $edges = set $edges $edge.Name (list $edge.Type.Name $mapping) }}
		{{ end }}
	{{ end }}
{{ end }}

{{ $receiver := $node.Receiver }}
{{ $query := $node.QueryName }}
// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func ({{ $receiver }} *{{ $query }}) CollectFields(ctx context.Context, satisfies ...string) *{{ $query }} {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		{{ $receiver }} = {{ $receiver }}.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return {{ $receiver }}
}

func ({{ $receiver }} *{{ $query }}) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *{{ $query }} {
	{{- with $edges }}
		for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
			switch field.Name {
				{{- range $name, $values := . }}
					case {{ range $i, $value := index $values 1 }}{{ if gt $i 0 }}, {{ end }}"{{ $value }}"{{ end }}:
						{{ $receiver }} = {{ $receiver }}.With{{ pascal $name }}(func(query *{{ pascal (index $values 0) }}Query) {
							query.collectField(ctx, field)
						})
				{{- end }}
			}
		}
	{{- end }}
	return {{ $receiver }}
}

{{ end }}
{{ end }}
