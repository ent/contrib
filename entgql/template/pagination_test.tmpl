{{/*
Copyright 2019-present Facebook Inc. All rights reserved.
This source code is licensed under the Apache 2.0 license found
in the LICENSE file in the root directory of this source tree.
*/}}

{{/* gotype: entgo.io/ent/entc/gen.Graph */}}

{{ define "pagination_test" }}

{{ $pkg := base $.Config.Package }}
{{- with extend $ "Package" (print $pkg "_test") }}
	{{ template "header" . }}
{{- end }}

import (
	"bytes"
	"strconv"
	"testing"

	"{{ $.Config.Package }}"
	"github.com/stretchr/testify/assert"
)

func TestCursorEncoding(t *testing.T) {
	t.Run("EncodeDecode", func(t *testing.T) {
		const (
			id = {{ if $.IDType.Numeric }}42{{ else }}"42"{{ end }}
			value = "foobar"
			quote = uint8('"')
		)
		var buf bytes.Buffer
		c := {{ $pkg }}.Cursor{ID: id, Value: value }
		c.MarshalGQL(&buf)
		s := buf.String()
		assert.Equal(t, quote, s[0])
		n := len(s) - 1
		assert.Equal(t, quote, s[n])
		c = {{ $pkg }}.Cursor{}
		err := c.UnmarshalGQL(s[1:n])
		assert.NoError(t, err)
		assert.Equal(t, id, c.ID)
		assert.Equal(t, value, c.Value)
	})
	t.Run("EncodeNoValue", func(t *testing.T) {
		const id = {{ if $.IDType.Numeric }}55{{ else }}"55"{{ end }}
		var buf bytes.Buffer
		c := {{ $pkg }}.Cursor{ ID: id }
		c.MarshalGQL(&buf)
		s, err := strconv.Unquote(buf.String())
		assert.NoError(t, err)
		c = {{ $pkg }}.Cursor{}
		err = c.UnmarshalGQL(s)
		assert.NoError(t, err)
		assert.Equal(t, id, c.ID)
		assert.Nil(t, c.Value)
	})
	t.Run("DecodeBadInput", func(t *testing.T) {
		inputs := []interface{}{
			0xbadbeef,
			"cursor@bad123",
			"Y3Vyc29yQGJhZDEyMw==",
		}
		for _, input := range inputs {
			var c {{ $pkg }}.Cursor
			err := c.UnmarshalGQL(input)
			assert.Error(t, err)
		}
	})
}
{{ end }}
