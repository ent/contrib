{{/*
Copyright 2019-present Facebook Inc. All rights reserved.
This source code is licensed under the Apache 2.0 license found
in the LICENSE file in the root directory of this source tree.
*/}}

{{ define "node" }}
{{ $pkg := base $.Config.Package }}
{{ template "header" $ }}

{{ if ne $.Storage.Name "sql" }}
	{{ fail "node requires SQL storage" }}
{{ end }}

{{/* Ensure all id types have the same type */}}
{{ $idType := $.IDType }}
{{ if gt (len $.Nodes) 0 }}
	{{ $idType = (index $.Nodes 0).ID.Type }}
	{{ range $n := (slice $.Nodes 1) }}
		{{ if ne $idType.Type $n.ID.Type.Type }}
			{{ fail "node does not support multiple id types" }}
		{{ end }}
	{{ end }}
{{ end }}

import (
	{{- range $n := $.Nodes }}
		"{{ $.Config.Package }}/{{ $n.Package }}"
	{{- end }}
	{{- with $package := $idType.PkgPath }}
		"{{ $package }}"
	{{- end }}
)

import (
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/schema"
	"github.com/hashicorp/go-multierror"
	"golang.org/x/sync/semaphore"
	"github.com/facebookincubator/ent-contrib/entgql"
)

// Noder wraps the basic Node method.
type Noder interface {
	Node(context.Context) (*Node, error)
}

// Node in the graph.
type Node struct {
	ID 	   {{ $idType }} `json:"id,omitemty"` // node id.
	Type   string   `json:"type,omitempty"`   // node type.
	Fields []*Field `json:"fields,omitempty"` // node fields.
	Edges  []*Edge  `json:"edges,omitempty"`  // node edges.
}

// Field of a node.
type Field struct {
	Type  string `json:"type,omitempty"`  // field type.
	Name  string `json:"name,omitempty"`  // field name (as in struct).
	Value string `json:"value,omitempty"` // stringified value.
}

// Edges between two nodes.
type Edge struct {
	Type string   `json:"type,omitempty"` // edge type.
	Name string   `json:"name,omitempty"` // edge name.
	IDs  []{{ $idType }} `json:"ids,omitempty"`  // node ids (where this edge point to).
}

{{/* loop over all types and add implement the Node interface. */}}
{{ range $n := $.Nodes }}
	{{ $receiver := $n.Receiver }}
	func ({{ $receiver }} *{{ $n.Name }}) Node(ctx context.Context) (node *Node, err error) {
		node = &Node{
			ID: {{ $receiver }}.ID,
			Type: "{{ $n.Name }}",
			Fields: make([]*Field, {{ len $n.Fields }}),
			Edges: make([]*Edge, {{ len $n.Edges }}),
		}
		{{- with $n.Fields }}
			var buf []byte
			{{- range $i, $f := $n.Fields }}
				if buf, err = json.Marshal({{ $receiver }}.{{ pascal $f.Name }}); err != nil {
					return nil, err
				}
				node.Fields[{{ $i }}] = &Field{
					Type:  "{{ $f.Type }}",
					Name:  "{{ $f.Name }}",
					Value: string(buf),
				}
			{{- end }}
		{{- end }}
		{{- with $n.Edges }}
			{{- range $i, $e := $n.Edges }}
				node.Edges[{{ $i }}] = &Edge{
					Type: "{{ $e.Type.Name }}",
					Name: "{{ $e.Name }}",
				}
				{{- if $idType.Numeric }}
					node.Edges[{{ $i }}].IDs, err = {{ $receiver }}.{{ print "Query" (pascal $e.Name) }}().
						Select({{ $e.Type.Package }}.FieldID).
						{{ pascal $idType.String }}s(ctx)
				{{- else }}
					err = {{ $receiver }}.{{ print "Query" (pascal $e.Name) }}().
						Select({{ $e.Type.Package }}.FieldID).
						Scan(ctx, &node.Edges[{{ $i }}].IDs)
				{{- end }}
				if err != nil {
					return nil, err
				}
			{{- end }}
		{{- end }}
		return node, nil
	}
{{ end }}

{{/* Add the node api to the client */}}
func (c *Client) Node(ctx context.Context, id {{ $idType }}) (*Node, error) {
	n, err := c.Noder(ctx, id)
	if err != nil {
		return nil, err
	}
	return n.Node(ctx)
}

var errNodeInvalidID = &NotFoundError{"node"}

// NodeOption allows configuring the Noder execution using functional options.
type NodeOption func(*NodeOptions)

// WithNodeType sets the Type of the node (i.e. the table to query).
// If was not provided, the table will be derived from the universal-id
// configuration as described in: https://entgo.io/docs/migrate/#universal-ids.
func WithNodeType(t string) NodeOption {
	return func(o *NodeOptions) {
		o.Type = t
	}
}

// NodeOptions holds the configuration for Noder execution.
type NodeOptions struct {
	// Type of the node (schema table).
	Type string
}

// Noder returns a Node by its id. If the NodeType was not provided, it will
// be derived from the id value according to the universal-id configuration.
//
//		c.Noder(ctx, id)
//		c.Noder(ctx, id, ent.WithNodeType(pet.Table))
//
func (c *Client) Noder(ctx context.Context, id {{ $idType }}, opts ...NodeOption) (_ Noder, err error) {
	defer func() {
		if IsNotFound(err) {
			err = multierror.Append(err, entgql.ErrNodeNotFound(id))
		}
	}()
	options := &NodeOptions{}
	for _, opt := range opts {
		opt(options)
	}
	if options.Type == "" {
		{{- if $idType.Numeric }}
			options.Type, err = c.tables.nodeType(ctx, c.driver, id)
			if err != nil {
				return nil, err
			}
		{{- else }}
			return nil, fmt.Errorf("cannot resolve Noder (%v) without its type", id)
		{{- end }}
	}
	return c.noder(ctx, options.Type, id)
}

func (c *Client) noder(ctx context.Context, tbl string, id {{ $idType }}) (Noder, error) {
	switch tbl {
	{{- range $n := $.Nodes }}
		case {{ $n.Package }}.Table:
			n, err := c.{{ $n.Name }}.Query().
				Where({{ $n.Package }}.ID(id)).
				{{- if hasTemplate "collection" }}
					CollectFields(ctx, "{{ $n.Name }}").
				{{- end }}
				Only(ctx)
			if err != nil {
				return nil, err
			}
			return n, nil
	{{- end }}
	default:
		return nil, fmt.Errorf("cannot resolve Noder from table %q: %w", tbl, errNodeInvalidID)
	}
}

{{ if $idType.Numeric }}
	type tables struct {
		once  sync.Once
		sem   *semaphore.Weighted
		value atomic.Value
	}

	func (t *tables) nodeType(ctx context.Context, drv dialect.Driver, id {{ $idType }}) (string, error) {
		tables, err := t.Load(ctx, drv)
		if err != nil {
			return "", err
		}
		idx := int(id/(1<<32 - 1))
		if idx < 0 || idx >= len(tables) {
			return "", fmt.Errorf("cannot resolve table from id %v: %w", id, errNodeInvalidID)
		}
		return tables[idx], nil
	}

	func (t *tables) Load(ctx context.Context, drv dialect.Driver) ([]string, error) {
		if tables := t.value.Load(); tables != nil {
			return tables.([]string), nil
		}
		t.once.Do(func() { t.sem = semaphore.NewWeighted(1) })
		if err := t.sem.Acquire(ctx, 1); err != nil {
			return nil, err
		}
		defer t.sem.Release(1)
		if tables := t.value.Load(); tables != nil {
			return tables.([]string), nil
		}
		tables, err := t.load(ctx, drv)
		if err == nil {
			t.value.Store(tables)
		}
		return tables, err
	}

	func (tables) load(ctx context.Context, drv dialect.Driver) ([]string, error) {
		rows := &sql.Rows{}
		query, args := sql.Dialect(drv.Dialect()).
			Select("type").
			From(sql.Table(schema.TypeTable)).
			OrderBy(sql.Asc("id")).
			Query()
		if err := drv.Query(ctx, query, args, rows); err != nil {
			return nil, err
		}
		defer rows.Close()
		var tables []string
		return tables, sql.ScanSlice(rows, &tables)
	}
{{ end }}
{{ end }}

{{ define "client/fields/additional" }}
	{{- if $.IDType.Numeric }}
		// additional fields for node api
		tables tables
	{{- end }}
{{ end }}
