{{/*
Copyright 2019-present Facebook Inc. All rights reserved.
This source code is licensed under the Apache 2.0 license found
in the LICENSE file in the root directory of this source tree.
*/}}

{{/* gotype: entgo.io/ent/entc/gen.Graph */}}

{{ define "gql_node" }}
{{ $pkg := base $.Config.Package }}
{{ template "header" $ }}

{{ if ne $.Storage.Name "sql" }}
	{{ fail "node requires SQL storage" }}
{{ end }}

{{ $gqlNodes := filterNodes $.Nodes (skipMode "type") }}
{{ $idType := gqlIDType $gqlNodes $.IDType }}

{{ template "import" $ }}

import (
	"sync"
	"sync/atomic"

	{{- range $n := $.Nodes }}
		"{{ $.Config.Package }}/{{ $n.Package }}"
	{{- end }}
	{{- with $package := $idType.PkgPath }}
		"{{ $package }}"
	{{- end }}

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/contrib/entgql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/hashicorp/go-multierror"
	"golang.org/x/sync/semaphore"
)

// Noder wraps the basic Node method.
type Noder interface {
{{- if hasTemplate "gql_node_descriptor" }}
	Node(context.Context) (*Node, error)
{{- end }}
	IsNode()
}

{{/* loop over all types and add implement the Node interface. */}}
{{ range $n := $gqlNodes }}
	// IsNode implements the Node interface check for GQLGen.
	func (n *{{ $n.Name }}) IsNode() {}

	{{- if and $idType.Mixed (gqlMarshaler $n.ID) }}
		{{ $receiver := $n.Receiver }}
		func ({{ $receiver }} {{ $n.Name }}) marshalID() string {
			var buf bytes.Buffer
			{{ $receiver }}.ID.MarshalGQL(&buf)
			return buf.String()
		}
	{{- end }}
{{ end }}

var errNodeInvalidID = &NotFoundError{"node"}

// NodeOption allows configuring the Noder execution using functional options.
type NodeOption func(*nodeOptions)

// WithNodeType sets the node Type resolver function (i.e. the table to query).
// If was not provided, the table will be derived from the universal-id
// configuration as described in: https://entgo.io/docs/migrate/#universal-ids.
func WithNodeType(f func(context.Context, {{ $idType }}) (string, error)) NodeOption {
	return func(o *nodeOptions) {
		o.nodeType = f
	}
}

// WithFixedNodeType sets the Type of the node to a fixed value.
func WithFixedNodeType(t string) NodeOption {
	return WithNodeType(func(context.Context, {{ $idType }}) (string, error) {
		return t, nil
	})
}

type nodeOptions struct {
	nodeType func(context.Context, {{ $idType }}) (string, error)
}

func (c *Client) newNodeOpts(opts []NodeOption) *nodeOptions {
	nopts := &nodeOptions{}
	for _, opt := range opts {
		opt(nopts)
	}
	if nopts.nodeType == nil {
		nopts.nodeType = func(ctx context.Context, id {{ $idType }}) (string, error) {
			{{- if $idType.Numeric }}
				return c.tables.nodeType(ctx, c.driver, id)
			{{- else }}
				return "", fmt.Errorf("cannot resolve noder (%v) without its type", id)
			{{- end }}
		}
	}
	return nopts
}

// Noder returns a Node by its id. If the NodeType was not provided, it will
// be derived from the id value according to the universal-id configuration.
//
//		c.Noder(ctx, id)
//		c.Noder(ctx, id, ent.WithNodeType(typeResolver))
//
func (c *Client) Noder(ctx context.Context, id {{ $idType }}, opts ...NodeOption) (_ Noder, err error) {
	defer func() {
		if IsNotFound(err) {
			err = multierror.Append(err, entgql.ErrNodeNotFound(id))
		}
	}()
	table, err := c.newNodeOpts(opts).nodeType(ctx, id)
	if err != nil {
		return nil, err
	}
	return c.noder(ctx, table, id)
}

func (c *Client) noder(ctx context.Context, table string, id {{ $idType }}) (Noder, error) {
	switch table {
	{{- range $n := $gqlNodes }}
		{{- $unmarshalID := gqlUnmarshaler $n.ID }}
		case {{ $n.Package }}.Table:
			{{- if $unmarshalID }}
				var uid {{ $n.ID.Type }}
				if err := uid.UnmarshalGQL(id); err != nil {
					return nil, err
				}
			{{- end }}
			query := c.{{ $n.Name }}.Query().
				Where({{ $n.Package }}.ID({{ if $unmarshalID }}u{{ end }}id))
			{{- if hasTemplate "gql_collection" }}
				query, err := query.CollectFields(ctx, "{{ $n.Name }}")
				if err != nil {
					return nil, err
				}
			{{- end }}
			n, err := query.Only(ctx)
			if err != nil {
				return nil, err
			}
			return n, nil
	{{- end }}
	default:
		return nil, fmt.Errorf("cannot resolve noder from table %q: %w", table, errNodeInvalidID)
	}
}

func (c *Client) Noders(ctx context.Context, ids []{{ $idType }}, opts ...NodeOption) ([]Noder, error) {
	switch len(ids) {
	case 1:
		noder, err := c.Noder(ctx, ids[0], opts...)
		if err != nil {
			return nil, err
		}
		return []Noder{noder}, nil
	case 0:
		return []Noder{}, nil
	}

	noders := make([]Noder, len(ids))
	errors := make([]error, len(ids))
	tables := make(map[string][]{{ $idType }})
	id2idx := make(map[{{ $idType }}][]int, len(ids))
	nopts := c.newNodeOpts(opts)
	for i, id := range ids {
		table, err := nopts.nodeType(ctx, id)
		if err != nil {
			errors[i] = err
			continue
		}
		tables[table] = append(tables[table], id)
		id2idx[id] = append(id2idx[id], i)
	}

	for table, ids := range tables {
		nodes, err := c.noders(ctx, table, ids)
		if err != nil {
			for _, id := range ids {
				for _, idx := range id2idx[id] {
					errors[idx] = err
				}
			}
		} else {
			for i, id := range ids {
				for _, idx := range id2idx[id] {
					noders[idx] = nodes[i]
				}
			}
		}
	}

	for i, id := range ids {
		if errors[i] == nil {
			if noders[i] != nil {
				continue
			}
			errors[i] = entgql.ErrNodeNotFound(id)
		} else if IsNotFound(errors[i]) {
			errors[i] = multierror.Append(errors[i], entgql.ErrNodeNotFound(id))
		}
		ctx := graphql.WithPathContext(ctx,
			graphql.NewPathWithIndex(i),
		)
		graphql.AddError(ctx, errors[i])
	}
	return noders, nil
}

func (c *Client) noders(ctx context.Context, table string, ids []{{ $idType }}) ([]Noder, error) {
	noders := make([]Noder, len(ids))
	idmap := make(map[{{ $idType }}][]*Noder, len(ids))
	for i, id := range ids {
		idmap[id] = append(idmap[id], &noders[i])
	}
	switch table {
	{{- range $n := $gqlNodes }}
		case {{ $n.Package }}.Table:
			{{- $marshalID := and $idType.Mixed (gqlMarshaler $n.ID) }}
			{{- $unmarshalID := and $idType.Mixed (gqlUnmarshaler $n.ID) }}
			{{- if $unmarshalID }}
				uids := make([]{{ $n.ID.Type }}, len(ids))
				for i, id := range ids {
					if err := uids[i].UnmarshalGQL(id); err != nil {
						return nil, err
					}
				}
			{{- end }}
			query := c.{{ $n.Name }}.Query().
				Where({{ $n.Package }}.IDIn({{ if $unmarshalID }}u{{ end }}ids...))
			{{- if hasTemplate "gql_collection" }}
				query, err := query.CollectFields(ctx, "{{ $n.Name }}")
				if err != nil {
					return nil, err
				}
			{{- end }}
			nodes, err := query.All(ctx)
			if err != nil {
				return nil, err
			}
			for _, node := range nodes {
				for _, noder := range idmap[node.{{ if $marshalID }}marshalID(){{ else }}ID{{ end }}] {
					*noder = node
				}
			}
	{{- end }}
	default:
		return nil, fmt.Errorf("cannot resolve noders from table %q: %w", table, errNodeInvalidID)
	}
	return noders, nil
}

{{ if $idType.Numeric }}
	type tables struct {
		once  sync.Once
		sem   *semaphore.Weighted
		value atomic.Value
	}

	func (t *tables) nodeType(ctx context.Context, drv dialect.Driver, id {{ $idType }}) (string, error) {
		tables, err := t.Load(ctx, drv)
		if err != nil {
			return "", err
		}
		idx := int(id/(1<<32 - 1))
		if idx < 0 || idx >= len(tables) {
			return "", fmt.Errorf("cannot resolve table from id %v: %w", id, errNodeInvalidID)
		}
		return tables[idx], nil
	}

	func (t *tables) Load(ctx context.Context, drv dialect.Driver) ([]string, error) {
		if tables := t.value.Load(); tables != nil {
			return tables.([]string), nil
		}
		t.once.Do(func() { t.sem = semaphore.NewWeighted(1) })
		if err := t.sem.Acquire(ctx, 1); err != nil {
			return nil, err
		}
		defer t.sem.Release(1)
		if tables := t.value.Load(); tables != nil {
			return tables.([]string), nil
		}
		tables, err := t.load(ctx, drv)
		if err == nil {
			t.value.Store(tables)
		}
		return tables, err
	}

	func (*tables) load(ctx context.Context, drv dialect.Driver) ([]string, error) {
		rows := &sql.Rows{}
		query, args := sql.Dialect(drv.Dialect()).
			Select("type").
			From(sql.Table(schema.TypeTable)).
			OrderBy(sql.Asc("id")).
			Query()
		if err := drv.Query(ctx, query, args, rows); err != nil {
			return nil, err
		}
		defer rows.Close()
		var tables []string
		return tables, sql.ScanSlice(rows, &tables)
	}
{{ end }}
{{ end }}

{{ define "client/fields/additional" }}
	{{- $idType := gqlIDType (filterNodes $.Nodes (skipMode "type")) $.IDType }}
	{{- if $idType.Numeric }}
		// additional fields for node api
		tables tables
	{{- end }}
{{ end }}
