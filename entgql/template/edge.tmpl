{{/*
Copyright 2019-present Facebook Inc. All rights reserved.
This source code is licensed under the Apache 2.0 license found
in the LICENSE file in the root directory of this source tree.
*/}}

{{/* gotype: entgo.io/ent/entc/gen.Graph */}}

{{ define "gql_edge" }}
{{ template "header" $ }}

import "context"

{{ range $n := filterNodes $.Nodes (skipMode "type") }}
	{{ $r := $n.Receiver }}
	{{ range $i, $e := filterEdges $n.Edges (skipMode "type") }}
		{{ if isRelayConn $e }}
			{{ with extend $n "Node" $n "Edge" $e "Index" $i }}
				{{ template "gql_edge/helper/paginate" . }}
			{{ end }}
		{{ else }}
			func ({{ $r }} *{{ $n.Name }}) {{ $e.StructField }}(ctx context.Context) ({{ if not $e.Unique }}[]{{ end }}*{{ $e.Type.Name }}, error) {
				result, err := {{ $r }}.Edges.{{ $e.StructField }}OrErr()
				if IsNotLoaded(err) {
					result, err = {{ $r }}.Query{{ $e.StructField }}().{{ if $e.Unique }}Only{{ else }}All{{ end }}(ctx)
				}
				return result, {{ if and $e.Unique $e.Optional }}MaskNotFound(err){{ else }}err{{ end }}
			}
		{{ end }}
	{{ end }}
{{ end }}

{{ end }}

{{ define "gql_edge/helper/paginate" }}
	{{ $n := $.Scope.Node }}
	{{ $e := $.Scope.Edge }}
	{{ $i := $.Scope.Index }}
	{{ $names := nodePaginationNames $e.Type }}
	{{ $order := $names.Order }}
	{{ $whereInput := $names.WhereInput }}
	{{- $edge := $names.Edge }}
	{{ $conn := $names.Connection }}
	{{ $opt := print $names.Node "PaginateOption" }}
	{{ $r := $n.Receiver }}
	{{ $newPager := print "new" $names.Node "Pager" }}

	func ({{ $r }} *{{ $n.Name }}) {{ $e.StructField }}(
		ctx context.Context, after *Cursor, first *int, before *Cursor, last *int,
		{{- if orderFields $e.Type }}orderBy *{{ $order }},{{ end }}
		{{- if and (hasTemplate "gql_where_input") (hasWhereInput $e) }}where *{{ $whereInput }},{{ end }}
		opts ...{{ $opt }},
	) (*{{ $conn }}, error) {
		{{- /* May be nil if the totalCount was not loaded. */}}
		totalCount := {{ $r }}.Edges.totalCount[{{ $i }}]
		if nodes, err := {{ $r }}.Edges.{{ $e.StructField }}OrErr(); err == nil {
			conn := &{{ $conn }}{Edges: []*{{ $edge }}{}}
			if totalCount != nil {
				conn.TotalCount = *totalCount
			}
			{{- if orderFields $e.Type }}
				opts = append(opts, {{ print "With" $order }}(orderBy))
			{{- end }}
			pager, err := {{ $newPager }}(opts)
			if err != nil {
				return nil, err
			}
			conn.build(nodes, pager, after, first, before, last)
			return conn, nil
		}
		query := {{ $r }}.Query{{ $e.StructField }}()
		{{ with extend $n "Node" $e.Type "Query" "query" "TotalCount" "totalCount" -}}
			{{ template "gql_pagination/helper/paginate" . }}
		{{- end -}}
	}
{{ end }}

{{ define "model/edges/fields/additional" }}
	{{- with filterEdges $.Edges (skipMode "type") }}
		// totalCount holds the count of the edges above.
		totalCount [{{ len . }}]*int
	{{- end }}
{{ end }}
