{{/*
Copyright 2019-present Facebook Inc. All rights reserved.
This source code is licensed under the Apache 2.0 license found
in the LICENSE file in the root directory of this source tree.
*/}}

{{/* gotype: entgo.io/ent/entc/gen.Graph */}}

{{ define "gql_edge" }}
{{ template "header" $ }}

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

{{ range $n := filterNodes $.Nodes (skipMode "type") }}
	{{ $r := $n.Receiver }}
	{{ range $i, $e := filterEdges $n.Edges (skipMode "type") }}
		{{ if isRelayConn $e }}
			{{ with extend $n "Node" $n "Edge" $e "Index" $i }}
				{{ template "gql_edge/helper/paginate" . }}
			{{ end }}
		{{ else if not $e.Unique }}
			func ({{ $r }} *{{ $n.Name }}) {{ $e.StructField }}(ctx context.Context) (result []*{{ $e.Type.Name }}, err error) {
				if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
					result, err = {{ $r }}.Named{{ $e.StructField }}(graphql.GetFieldContext(ctx).Field.Alias)
				} else {
					{{- /* For regular edges (not Relay connections), we fallback to .Edges field in case the context is not GraphQL */}}
					result, err = {{ $r }}.Edges.{{ $e.StructField }}OrErr()
				}
				if IsNotLoaded(err) {
					result, err = {{ $r }}.Query{{ $e.StructField }}().All(ctx)
				}
				return result, err
			}
		{{ else }}
			func ({{ $r }} *{{ $n.Name }}) {{ $e.StructField }}(ctx context.Context) (*{{ $e.Type.Name }}, error) {
				result, err := {{ $r }}.Edges.{{ $e.StructField }}OrErr()
				if IsNotLoaded(err) {
					result, err = {{ $r }}.Query{{ $e.StructField }}().Only(ctx)
				}
				return result, {{ if $e.Optional }}MaskNotFound(err){{ else }}err{{ end }}
			}
		{{ end }}
	{{ end }}
{{ end }}

{{ end }}

{{ define "gql_edge/helper/paginate" }}
	{{ $n := $.Scope.Node }}
	{{ $e := $.Scope.Edge }}
	{{ $i := $.Scope.Index }}
	{{ $names := nodePaginationNames $e.Type }}
	{{ $order := $names.Order }}
	{{ $multiOrder := $e.Type.Annotations.EntGQL.MultiOrder }}
	{{ $whereInput := $names.WhereInput }}
	{{- $edge := $names.Edge }}
	{{ $conn := $names.Connection }}
	{{ $opt := print $names.Node "PaginateOption" }}
	{{ $r := $n.Receiver }}
	{{ $newPager := print "new" $names.Node "Pager" }}

	func ({{ $r }} *{{ $n.Name }}) {{ $e.StructField }}(
		ctx context.Context, after *Cursor, first *int, before *Cursor, last *int,
		{{- if orderFields $e.Type }}orderBy {{ if $multiOrder }}[]{{ end }}*{{ $order }},{{ end }}
		{{- if and (hasTemplate "gql_where_input") (hasWhereInput $e) }}where *{{ $whereInput }},{{ end }}
	) (*{{ $conn }}, error) {
		opts := []{{ $opt }}{
		{{- if orderFields $e.Type }}
			{{ print "With" $order }}(orderBy),
		{{- end }}
		{{- if and (hasTemplate "gql_where_input") (hasWhereInput $e) }}
			{{ print "With" $names.Node "Filter" }}(where.Filter),
		{{- end }}
		}
		{{- /* May be nil if the totalCount was not loaded. */}}
		alias := graphql.GetFieldContext(ctx).Field.Alias
		totalCount, hasTotalCount := {{ $r }}.Edges.totalCount[{{ $i }}][alias]
		{{- /* Nodes were loaded, totalCount was loaded, or both. */}}
		if nodes, err := {{ $r }}.Named{{ $e.StructField }}(alias); err == nil || hasTotalCount {
			pager, err := {{ $newPager }}(opts, last != nil)
			if err != nil {
				return nil, err
			}
			{{- /* Ensure the "edges" field is marshaled as "[]" in case it is empty. */}}
			conn := &{{ $conn }}{Edges: []*{{ $edge }}{}, TotalCount: totalCount}
			conn.build(nodes, pager, after, first, before, last)
			return conn, nil
		}
		return {{ $r }}.Query{{ $e.StructField }}().Paginate(ctx, after, first, before, last, opts...)
	}
{{ end }}

{{ define "dialect/sql/model/edges/fields/additional/load_total" }}
	{{- with filterEdges $.Edges (skipMode "type") }}
		// totalCount holds the count of the edges above.
		totalCount [{{ len . }}]map[string]int
	{{- end }}
{{ end }}
