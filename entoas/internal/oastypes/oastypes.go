// Code generated by ent, DO NOT EDIT.

package oastypes

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"strings"
	"time"

	"entgo.io/contrib/entoas/internal/oastypes/oastypes"
	"entgo.io/contrib/entoas/internal/oastypes/schema"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// OASTypes is the model entity for the OASTypes schema.
type OASTypes struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Int holds the value of the "int" field.
	Int int `json:"int,omitempty"`
	// Int8 holds the value of the "int8" field.
	Int8 int8 `json:"int8,omitempty"`
	// Int16 holds the value of the "int16" field.
	Int16 int16 `json:"int16,omitempty"`
	// Int32 holds the value of the "int32" field.
	Int32 int32 `json:"int32,omitempty"`
	// Int64 holds the value of the "int64" field.
	Int64 int64 `json:"int64,omitempty"`
	// Uint holds the value of the "uint" field.
	Uint uint `json:"uint,omitempty"`
	// Uint8 holds the value of the "uint8" field.
	Uint8 uint8 `json:"uint8,omitempty"`
	// Uint16 holds the value of the "uint16" field.
	Uint16 uint16 `json:"uint16,omitempty"`
	// Uint32 holds the value of the "uint32" field.
	Uint32 uint32 `json:"uint32,omitempty"`
	// Uint64 holds the value of the "uint64" field.
	Uint64 uint64 `json:"uint64,omitempty"`
	// Float32 holds the value of the "float32" field.
	Float32 float32 `json:"float32,omitempty"`
	// Float64 holds the value of the "float64" field.
	Float64 float64 `json:"float64,omitempty"`
	// StringField holds the value of the "string_field" field.
	StringField string `json:"string_field,omitempty"`
	// Bool holds the value of the "bool" field.
	Bool bool `json:"bool,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID uuid.UUID `json:"uuid,omitempty"`
	// Time holds the value of the "time" field.
	Time time.Time `json:"time,omitempty"`
	// Text holds the value of the "text" field.
	Text string `json:"text,omitempty"`
	// State holds the value of the "state" field.
	State oastypes.State `json:"state,omitempty"`
	// Strings holds the value of the "strings" field.
	Strings []string `json:"strings,omitempty"`
	// Ints holds the value of the "ints" field.
	Ints []int `json:"ints,omitempty"`
	// Floats holds the value of the "floats" field.
	Floats []float64 `json:"floats,omitempty"`
	// Bytes holds the value of the "bytes" field.
	Bytes []byte `json:"bytes,omitempty"`
	// Nicknames holds the value of the "nicknames" field.
	Nicknames []string `json:"nicknames,omitempty"`
	// JSONSlice holds the value of the "json_slice" field.
	JSONSlice []http.Dir `json:"json_slice,omitempty"`
	// JSONObj holds the value of the "json_obj" field.
	JSONObj url.URL `json:"json_obj,omitempty"`
	// Other holds the value of the "other" field.
	Other *schema.Link `json:"other,omitempty"`
	// Optional holds the value of the "optional" field.
	Optional int `json:"optional,omitempty"`
	// Nillable holds the value of the "nillable" field.
	Nillable *int `json:"nillable,omitempty"`
	// OptionalAndNillable holds the value of the "optional_and_nillable" field.
	OptionalAndNillable *int `json:"optional_and_nillable,omitempty"`
	selectValues        sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OASTypes) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case oastypes.FieldStrings, oastypes.FieldInts, oastypes.FieldFloats, oastypes.FieldBytes, oastypes.FieldNicknames, oastypes.FieldJSONSlice, oastypes.FieldJSONObj:
			values[i] = new([]byte)
		case oastypes.FieldOther:
			values[i] = new(schema.Link)
		case oastypes.FieldBool:
			values[i] = new(sql.NullBool)
		case oastypes.FieldFloat32, oastypes.FieldFloat64:
			values[i] = new(sql.NullFloat64)
		case oastypes.FieldID, oastypes.FieldInt, oastypes.FieldInt8, oastypes.FieldInt16, oastypes.FieldInt32, oastypes.FieldInt64, oastypes.FieldUint, oastypes.FieldUint8, oastypes.FieldUint16, oastypes.FieldUint32, oastypes.FieldUint64, oastypes.FieldOptional, oastypes.FieldNillable, oastypes.FieldOptionalAndNillable:
			values[i] = new(sql.NullInt64)
		case oastypes.FieldStringField, oastypes.FieldText, oastypes.FieldState:
			values[i] = new(sql.NullString)
		case oastypes.FieldTime:
			values[i] = new(sql.NullTime)
		case oastypes.FieldUUID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OASTypes fields.
func (ot *OASTypes) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case oastypes.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ot.ID = int(value.Int64)
		case oastypes.FieldInt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field int", values[i])
			} else if value.Valid {
				ot.Int = int(value.Int64)
			}
		case oastypes.FieldInt8:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field int8", values[i])
			} else if value.Valid {
				ot.Int8 = int8(value.Int64)
			}
		case oastypes.FieldInt16:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field int16", values[i])
			} else if value.Valid {
				ot.Int16 = int16(value.Int64)
			}
		case oastypes.FieldInt32:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field int32", values[i])
			} else if value.Valid {
				ot.Int32 = int32(value.Int64)
			}
		case oastypes.FieldInt64:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field int64", values[i])
			} else if value.Valid {
				ot.Int64 = value.Int64
			}
		case oastypes.FieldUint:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field uint", values[i])
			} else if value.Valid {
				ot.Uint = uint(value.Int64)
			}
		case oastypes.FieldUint8:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field uint8", values[i])
			} else if value.Valid {
				ot.Uint8 = uint8(value.Int64)
			}
		case oastypes.FieldUint16:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field uint16", values[i])
			} else if value.Valid {
				ot.Uint16 = uint16(value.Int64)
			}
		case oastypes.FieldUint32:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field uint32", values[i])
			} else if value.Valid {
				ot.Uint32 = uint32(value.Int64)
			}
		case oastypes.FieldUint64:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field uint64", values[i])
			} else if value.Valid {
				ot.Uint64 = uint64(value.Int64)
			}
		case oastypes.FieldFloat32:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field float32", values[i])
			} else if value.Valid {
				ot.Float32 = float32(value.Float64)
			}
		case oastypes.FieldFloat64:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field float64", values[i])
			} else if value.Valid {
				ot.Float64 = value.Float64
			}
		case oastypes.FieldStringField:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field string_field", values[i])
			} else if value.Valid {
				ot.StringField = value.String
			}
		case oastypes.FieldBool:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field bool", values[i])
			} else if value.Valid {
				ot.Bool = value.Bool
			}
		case oastypes.FieldUUID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value != nil {
				ot.UUID = *value
			}
		case oastypes.FieldTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field time", values[i])
			} else if value.Valid {
				ot.Time = value.Time
			}
		case oastypes.FieldText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text", values[i])
			} else if value.Valid {
				ot.Text = value.String
			}
		case oastypes.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				ot.State = oastypes.State(value.String)
			}
		case oastypes.FieldStrings:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field strings", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ot.Strings); err != nil {
					return fmt.Errorf("unmarshal field strings: %w", err)
				}
			}
		case oastypes.FieldInts:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field ints", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ot.Ints); err != nil {
					return fmt.Errorf("unmarshal field ints: %w", err)
				}
			}
		case oastypes.FieldFloats:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field floats", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ot.Floats); err != nil {
					return fmt.Errorf("unmarshal field floats: %w", err)
				}
			}
		case oastypes.FieldBytes:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field bytes", values[i])
			} else if value != nil {
				ot.Bytes = *value
			}
		case oastypes.FieldNicknames:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field nicknames", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ot.Nicknames); err != nil {
					return fmt.Errorf("unmarshal field nicknames: %w", err)
				}
			}
		case oastypes.FieldJSONSlice:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field json_slice", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ot.JSONSlice); err != nil {
					return fmt.Errorf("unmarshal field json_slice: %w", err)
				}
			}
		case oastypes.FieldJSONObj:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field json_obj", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ot.JSONObj); err != nil {
					return fmt.Errorf("unmarshal field json_obj: %w", err)
				}
			}
		case oastypes.FieldOther:
			if value, ok := values[i].(*schema.Link); !ok {
				return fmt.Errorf("unexpected type %T for field other", values[i])
			} else if value != nil {
				ot.Other = value
			}
		case oastypes.FieldOptional:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field optional", values[i])
			} else if value.Valid {
				ot.Optional = int(value.Int64)
			}
		case oastypes.FieldNillable:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field nillable", values[i])
			} else if value.Valid {
				ot.Nillable = new(int)
				*ot.Nillable = int(value.Int64)
			}
		case oastypes.FieldOptionalAndNillable:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field optional_and_nillable", values[i])
			} else if value.Valid {
				ot.OptionalAndNillable = new(int)
				*ot.OptionalAndNillable = int(value.Int64)
			}
		default:
			ot.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OASTypes.
// This includes values selected through modifiers, order, etc.
func (ot *OASTypes) Value(name string) (ent.Value, error) {
	return ot.selectValues.Get(name)
}

// Update returns a builder for updating this OASTypes.
// Note that you need to call OASTypes.Unwrap() before calling this method if this OASTypes
// was returned from a transaction, and the transaction was committed or rolled back.
func (ot *OASTypes) Update() *OASTypesUpdateOne {
	return NewOASTypesClient(ot.config).UpdateOne(ot)
}

// Unwrap unwraps the OASTypes entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ot *OASTypes) Unwrap() *OASTypes {
	_tx, ok := ot.config.driver.(*txDriver)
	if !ok {
		panic("oastypes: OASTypes is not a transactional entity")
	}
	ot.config.driver = _tx.drv
	return ot
}

// String implements the fmt.Stringer.
func (ot *OASTypes) String() string {
	var builder strings.Builder
	builder.WriteString("OASTypes(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ot.ID))
	builder.WriteString("int=")
	builder.WriteString(fmt.Sprintf("%v", ot.Int))
	builder.WriteString(", ")
	builder.WriteString("int8=")
	builder.WriteString(fmt.Sprintf("%v", ot.Int8))
	builder.WriteString(", ")
	builder.WriteString("int16=")
	builder.WriteString(fmt.Sprintf("%v", ot.Int16))
	builder.WriteString(", ")
	builder.WriteString("int32=")
	builder.WriteString(fmt.Sprintf("%v", ot.Int32))
	builder.WriteString(", ")
	builder.WriteString("int64=")
	builder.WriteString(fmt.Sprintf("%v", ot.Int64))
	builder.WriteString(", ")
	builder.WriteString("uint=")
	builder.WriteString(fmt.Sprintf("%v", ot.Uint))
	builder.WriteString(", ")
	builder.WriteString("uint8=")
	builder.WriteString(fmt.Sprintf("%v", ot.Uint8))
	builder.WriteString(", ")
	builder.WriteString("uint16=")
	builder.WriteString(fmt.Sprintf("%v", ot.Uint16))
	builder.WriteString(", ")
	builder.WriteString("uint32=")
	builder.WriteString(fmt.Sprintf("%v", ot.Uint32))
	builder.WriteString(", ")
	builder.WriteString("uint64=")
	builder.WriteString(fmt.Sprintf("%v", ot.Uint64))
	builder.WriteString(", ")
	builder.WriteString("float32=")
	builder.WriteString(fmt.Sprintf("%v", ot.Float32))
	builder.WriteString(", ")
	builder.WriteString("float64=")
	builder.WriteString(fmt.Sprintf("%v", ot.Float64))
	builder.WriteString(", ")
	builder.WriteString("string_field=")
	builder.WriteString(ot.StringField)
	builder.WriteString(", ")
	builder.WriteString("bool=")
	builder.WriteString(fmt.Sprintf("%v", ot.Bool))
	builder.WriteString(", ")
	builder.WriteString("uuid=")
	builder.WriteString(fmt.Sprintf("%v", ot.UUID))
	builder.WriteString(", ")
	builder.WriteString("time=")
	builder.WriteString(ot.Time.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("text=")
	builder.WriteString(ot.Text)
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(fmt.Sprintf("%v", ot.State))
	builder.WriteString(", ")
	builder.WriteString("strings=")
	builder.WriteString(fmt.Sprintf("%v", ot.Strings))
	builder.WriteString(", ")
	builder.WriteString("ints=")
	builder.WriteString(fmt.Sprintf("%v", ot.Ints))
	builder.WriteString(", ")
	builder.WriteString("floats=")
	builder.WriteString(fmt.Sprintf("%v", ot.Floats))
	builder.WriteString(", ")
	builder.WriteString("bytes=")
	builder.WriteString(fmt.Sprintf("%v", ot.Bytes))
	builder.WriteString(", ")
	builder.WriteString("nicknames=")
	builder.WriteString(fmt.Sprintf("%v", ot.Nicknames))
	builder.WriteString(", ")
	builder.WriteString("json_slice=")
	builder.WriteString(fmt.Sprintf("%v", ot.JSONSlice))
	builder.WriteString(", ")
	builder.WriteString("json_obj=")
	builder.WriteString(fmt.Sprintf("%v", ot.JSONObj))
	builder.WriteString(", ")
	builder.WriteString("other=")
	builder.WriteString(fmt.Sprintf("%v", ot.Other))
	builder.WriteString(", ")
	builder.WriteString("optional=")
	builder.WriteString(fmt.Sprintf("%v", ot.Optional))
	builder.WriteString(", ")
	if v := ot.Nillable; v != nil {
		builder.WriteString("nillable=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := ot.OptionalAndNillable; v != nil {
		builder.WriteString("optional_and_nillable=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// OASTypesSlice is a parsable slice of OASTypes.
type OASTypesSlice []*OASTypes
